.TH "apollo::canbus::Eps" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::canbus::Eps
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkEpsDriverHandTorqFieldNumber\fP = 3, \fBkEpsControlStateFieldNumber\fP = 2, \fBkIsEpsFailFieldNumber\fP = 1, \fBkIsSteeringAngleValidFieldNumber\fP = 4, \fBkIsTrimmingStatusFieldNumber\fP = 7, \fBkIsCalibrationStatusFieldNumber\fP = 8, \fBkSteeringAngleFieldNumber\fP = 5, \fBkSteeringAngleSpdFieldNumber\fP = 6, \fBkAllowEnterAutonomousModeFieldNumber\fP = 10, \fBkCurrentDrivingModeFieldNumber\fP = 11, \fBkSteeringAngleCmdFieldNumber\fP = 12, \fBkVehicleSpeedFieldNumber\fP = 13, \fBkEpasTorqueFieldNumber\fP = 14, \fBkIsFailureStatusFieldNumber\fP = 9, \fBkSteeringEnabledFieldNumber\fP = 15, \fBkDriverOverrideFieldNumber\fP = 16, \fBkDriverActivityFieldNumber\fP = 17, \fBkWatchdogFaultFieldNumber\fP = 18, \fBkChannel1FaultFieldNumber\fP = 19, \fBkChannel2FaultFieldNumber\fP = 20, \fBkCalibrationFaultFieldNumber\fP = 21, \fBkTimestamp65FieldNumber\fP = 23, \fBkConnectorFaultFieldNumber\fP = 22, \fBkMajorVersionFieldNumber\fP = 24, \fBkMinorVersionFieldNumber\fP = 25, \fBkBuildNumberFieldNumber\fP = 26 }"
.br
.ti -1c
.RI "typedef Eps_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBEps\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBEps\fP (const \fBEps\fP &from)"
.br
.ti -1c
.RI "\fBEps\fP (\fBEps\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBEps\fP & \fBoperator=\fP (const \fBEps\fP &from)"
.br
.ti -1c
.RI "\fBEps\fP & \fBoperator=\fP (\fBEps\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBEps\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBEps\fP *other)"
.br
.ti -1c
.RI "\fBEps\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBEps\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBEps\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_eps_driver_hand_torq\fP () const"
.br
.ti -1c
.RI "void \fBclear_eps_driver_hand_torq\fP ()"
.br
.ti -1c
.RI "double \fBeps_driver_hand_torq\fP () const"
.br
.ti -1c
.RI "void \fBset_eps_driver_hand_torq\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_eps_control_state\fP () const"
.br
.ti -1c
.RI "void \fBclear_eps_control_state\fP ()"
.br
.ti -1c
.RI "::apollo::canbus::Eps_Type \fBeps_control_state\fP () const"
.br
.ti -1c
.RI "void \fBset_eps_control_state\fP (::apollo::canbus::Eps_Type value)"
.br
.ti -1c
.RI "bool \fBhas_is_eps_fail\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_eps_fail\fP ()"
.br
.ti -1c
.RI "bool \fBis_eps_fail\fP () const"
.br
.ti -1c
.RI "void \fBset_is_eps_fail\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_steering_angle_valid\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_steering_angle_valid\fP ()"
.br
.ti -1c
.RI "bool \fBis_steering_angle_valid\fP () const"
.br
.ti -1c
.RI "void \fBset_is_steering_angle_valid\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_trimming_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_trimming_status\fP ()"
.br
.ti -1c
.RI "bool \fBis_trimming_status\fP () const"
.br
.ti -1c
.RI "void \fBset_is_trimming_status\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_calibration_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_calibration_status\fP ()"
.br
.ti -1c
.RI "bool \fBis_calibration_status\fP () const"
.br
.ti -1c
.RI "void \fBset_is_calibration_status\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_steering_angle\fP () const"
.br
.ti -1c
.RI "void \fBclear_steering_angle\fP ()"
.br
.ti -1c
.RI "double \fBsteering_angle\fP () const"
.br
.ti -1c
.RI "void \fBset_steering_angle\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steering_angle_spd\fP () const"
.br
.ti -1c
.RI "void \fBclear_steering_angle_spd\fP ()"
.br
.ti -1c
.RI "double \fBsteering_angle_spd\fP () const"
.br
.ti -1c
.RI "void \fBset_steering_angle_spd\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_allow_enter_autonomous_mode\fP () const"
.br
.ti -1c
.RI "void \fBclear_allow_enter_autonomous_mode\fP ()"
.br
.ti -1c
.RI "int32_t \fBallow_enter_autonomous_mode\fP () const"
.br
.ti -1c
.RI "void \fBset_allow_enter_autonomous_mode\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_current_driving_mode\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_driving_mode\fP ()"
.br
.ti -1c
.RI "int32_t \fBcurrent_driving_mode\fP () const"
.br
.ti -1c
.RI "void \fBset_current_driving_mode\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_steering_angle_cmd\fP () const"
.br
.ti -1c
.RI "void \fBclear_steering_angle_cmd\fP ()"
.br
.ti -1c
.RI "double \fBsteering_angle_cmd\fP () const"
.br
.ti -1c
.RI "void \fBset_steering_angle_cmd\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_vehicle_speed\fP () const"
.br
.ti -1c
.RI "void \fBclear_vehicle_speed\fP ()"
.br
.ti -1c
.RI "double \fBvehicle_speed\fP () const"
.br
.ti -1c
.RI "void \fBset_vehicle_speed\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_epas_torque\fP () const"
.br
.ti -1c
.RI "void \fBclear_epas_torque\fP ()"
.br
.ti -1c
.RI "double \fBepas_torque\fP () const"
.br
.ti -1c
.RI "void \fBset_epas_torque\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_is_failure_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_failure_status\fP ()"
.br
.ti -1c
.RI "bool \fBis_failure_status\fP () const"
.br
.ti -1c
.RI "void \fBset_is_failure_status\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_steering_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_steering_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBsteering_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_steering_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_driver_override\fP () const"
.br
.ti -1c
.RI "void \fBclear_driver_override\fP ()"
.br
.ti -1c
.RI "bool \fBdriver_override\fP () const"
.br
.ti -1c
.RI "void \fBset_driver_override\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_driver_activity\fP () const"
.br
.ti -1c
.RI "void \fBclear_driver_activity\fP ()"
.br
.ti -1c
.RI "bool \fBdriver_activity\fP () const"
.br
.ti -1c
.RI "void \fBset_driver_activity\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_watchdog_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_watchdog_fault\fP ()"
.br
.ti -1c
.RI "bool \fBwatchdog_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_watchdog_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_channel_1_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_channel_1_fault\fP ()"
.br
.ti -1c
.RI "bool \fBchannel_1_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_channel_1_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_channel_2_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_channel_2_fault\fP ()"
.br
.ti -1c
.RI "bool \fBchannel_2_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_channel_2_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_calibration_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_calibration_fault\fP ()"
.br
.ti -1c
.RI "bool \fBcalibration_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_calibration_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_timestamp_65\fP () const"
.br
.ti -1c
.RI "void \fBclear_timestamp_65\fP ()"
.br
.ti -1c
.RI "double \fBtimestamp_65\fP () const"
.br
.ti -1c
.RI "void \fBset_timestamp_65\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_connector_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_connector_fault\fP ()"
.br
.ti -1c
.RI "bool \fBconnector_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_connector_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_major_version\fP () const"
.br
.ti -1c
.RI "void \fBclear_major_version\fP ()"
.br
.ti -1c
.RI "int32_t \fBmajor_version\fP () const"
.br
.ti -1c
.RI "void \fBset_major_version\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_minor_version\fP () const"
.br
.ti -1c
.RI "void \fBclear_minor_version\fP ()"
.br
.ti -1c
.RI "int32_t \fBminor_version\fP () const"
.br
.ti -1c
.RI "void \fBset_minor_version\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_build_number\fP () const"
.br
.ti -1c
.RI "void \fBclear_build_number\fP ()"
.br
.ti -1c
.RI "int32_t \fBbuild_number\fP () const"
.br
.ti -1c
.RI "void \fBset_build_number\fP (int32_t value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBEps\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBEps\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBNOT_AVAILABLE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBREADY\fP"
.br
.ti -1c
.RI "static constexpr Type \fBACTIVE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBINVALID\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBEps\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fchassis_5fmsgs_2fchassis_5fdetail_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBEps\fP &a, \fBEps\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::canbus::Eps::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Eps::MergeImpl
}
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::ACTIVE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_ACTIVE
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::INVALID\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_INVALID
.fi
.SS "constexpr int apollo::canbus::Eps::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    4
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::NOT_AVAILABLE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_NOT_AVAILABLE
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::READY\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_READY
.fi
.SS "constexpr int apollo::canbus::Eps::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_Type_ARRAYSIZE
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_Type_MAX
.fi
.SS "constexpr Eps_Type apollo::canbus::Eps::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Eps_Type_Type_MIN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
