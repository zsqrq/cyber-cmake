.TH "apollo::common::DriveEvent" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::common::DriveEvent
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkTypeFieldNumber\fP = 4, \fBkEventFieldNumber\fP = 2, \fBkHeaderFieldNumber\fP = 1, \fBkLocationFieldNumber\fP = 3, \fBkIsReportableFieldNumber\fP = 5 }"
.br
.ti -1c
.RI "typedef DriveEvent_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBDriveEvent\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBDriveEvent\fP (const \fBDriveEvent\fP &from)"
.br
.ti -1c
.RI "\fBDriveEvent\fP (\fBDriveEvent\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBDriveEvent\fP & \fBoperator=\fP (const \fBDriveEvent\fP &from)"
.br
.ti -1c
.RI "\fBDriveEvent\fP & \fBoperator=\fP (\fBDriveEvent\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBDriveEvent\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBDriveEvent\fP *other)"
.br
.ti -1c
.RI "\fBDriveEvent\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBDriveEvent\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBDriveEvent\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBtype_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_type\fP ()"
.br
.ti -1c
.RI "::apollo::common::DriveEvent_Type \fBtype\fP (int index) const"
.br
.ti -1c
.RI "void \fBset_type\fP (int index, ::apollo::common::DriveEvent_Type value)"
.br
.ti -1c
.RI "void \fBadd_type\fP (::apollo::common::DriveEvent_Type value)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int > & \fBtype\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedField< int > * \fBmutable_type\fP ()"
.br
.ti -1c
.RI "bool \fBhas_event\fP () const"
.br
.ti -1c
.RI "void \fBclear_event\fP ()"
.br
.ti -1c
.RI "const std::string & \fBevent\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_event\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_event\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_event\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_event\fP (std::string *event)"
.br
.ti -1c
.RI "bool \fBhas_header\fP () const"
.br
.ti -1c
.RI "void \fBclear_header\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Header\fP & \fBheader\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Header\fP * \fBrelease_header\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBmutable_header\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBunsafe_arena_release_header\fP ()"
.br
.ti -1c
.RI "bool \fBhas_location\fP () const"
.br
.ti -1c
.RI "void \fBclear_location\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::localization::Pose\fP & \fBlocation\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::localization::Pose\fP * \fBrelease_location\fP ()"
.br
.ti -1c
.RI "::\fBapollo::localization::Pose\fP * \fBmutable_location\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_location\fP (::\fBapollo::localization::Pose\fP *location)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_location\fP (::\fBapollo::localization::Pose\fP *location)"
.br
.ti -1c
.RI "::\fBapollo::localization::Pose\fP * \fBunsafe_arena_release_location\fP ()"
.br
.ti -1c
.RI "bool \fBhas_is_reportable\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_reportable\fP ()"
.br
.ti -1c
.RI "bool \fBis_reportable\fP () const"
.br
.ti -1c
.RI "void \fBset_is_reportable\fP (bool value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_event\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBDriveEvent\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBDriveEvent\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBCRITICAL\fP"
.br
.ti -1c
.RI "static constexpr Type \fBPROBLEM\fP"
.br
.ti -1c
.RI "static constexpr Type \fBDESIRED\fP"
.br
.ti -1c
.RI "static constexpr Type \fBOUT_OF_SCOPE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBDriveEvent\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fbasic_5fmsgs_2fdrive_5fevent_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBDriveEvent\fP &a, \fBDriveEvent\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::common::DriveEvent::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DriveEvent::MergeImpl
}
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::CRITICAL\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_CRITICAL
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::DESIRED\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_DESIRED
.fi
.SS "constexpr int apollo::common::DriveEvent::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::OUT_OF_SCOPE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_OUT_OF_SCOPE
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::PROBLEM\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_PROBLEM
.fi
.SS "constexpr int apollo::common::DriveEvent::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_Type_ARRAYSIZE
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_Type_MAX
.fi
.SS "constexpr DriveEvent_Type apollo::common::DriveEvent::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    DriveEvent_Type_Type_MIN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
