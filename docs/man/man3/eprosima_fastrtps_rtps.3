.TH "eprosima::fastrtps::rtps" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eprosima::fastrtps::rtps
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBCDRMessage\fP"
.br
.ti -1c
.RI " \fBTimeConv\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBEndpointAttributes\fP"
.br
.ti -1c
.RI "class \fBHistoryAttributes\fP"
.br
.ti -1c
.RI "class \fBPropertyPolicy\fP"
.br
.ti -1c
.RI "class \fBPropertyPolicyHelper\fP"
.br
.ti -1c
.RI "class \fBReaderTimes\fP"
.br
.ti -1c
.RI "class \fBReaderAttributes\fP"
.br
.ti -1c
.RI "class \fBRemoteWriterAttributes\fP"
.br
.ti -1c
.RI "class \fBSimpleEDPAttributes\fP"
.br
.ti -1c
.RI "class \fBPortParameters\fP"
.br
.ti -1c
.RI "class \fBBuiltinAttributes\fP"
.br
.ti -1c
.RI "class \fBRTPSParticipantAttributes\fP"
.br
.ti -1c
.RI "class \fBWriterTimes\fP"
.br
.ti -1c
.RI "class \fBWriterAttributes\fP"
.br
.ti -1c
.RI "class \fBRemoteReaderAttributes\fP"
.br
.ti -1c
.RI "class \fBBuiltinProtocols\fP"
.br
.ti -1c
.RI "class \fBParticipantProxyData\fP"
.br
.ti -1c
.RI "class \fBReaderProxyData\fP"
.br
.ti -1c
.RI "class \fBWriterProxyData\fP"
.br
.ti -1c
.RI "class \fBEDP\fP"
.br
.ti -1c
.RI "class \fBEDPSimple\fP"
.br
.ti -1c
.RI "class \fBEDPStaticProperty\fP"
.br
.ti -1c
.RI "class \fBEDPStatic\fP"
.br
.ti -1c
.RI "class \fBPDPSimple\fP"
.br
.ti -1c
.RI "class \fBPDPSimpleListener\fP"
.br
.ti -1c
.RI "class \fBRemoteParticipantLeaseDuration\fP"
.br
.ti -1c
.RI "class \fBResendParticipantProxyDataPeriod\fP"
.br
.ti -1c
.RI "class \fBWLivelinessPeriodicAssertion\fP"
.br
.ti -1c
.RI "class \fBWLP\fP"
.br
.ti -1c
.RI "class \fBWLPListener\fP"
.br
.ti -1c
.RI "class \fBBinaryProperty\fP"
.br
.ti -1c
.RI "class \fBBinaryPropertyHelper\fP"
.br
.ti -1c
.RI "struct \fBCacheChange_t\fP"
.br
.ti -1c
.RI "class \fBChangeForReader_t\fP"
.br
.ti -1c
.RI "struct \fBChangeForReaderCmp\fP"
.br
.ti -1c
.RI "class \fBChangeFromWriter_t\fP"
.br
.ti -1c
.RI "struct \fBChangeFromWriterCmp\fP"
.br
.ti -1c
.RI "struct \fBCDRMessage_t\fP"
.br
.RI "Structure \fBCDRMessage_t\fP, contains a serialized message\&. "
.ti -1c
.RI "class \fBFragmentNumberSet_t\fP"
.br
.ti -1c
.RI "struct \fBGuidPrefix_t\fP"
.br
.RI "Structure \fBGuidPrefix_t\fP, Guid Prefix of \fBGUID_t\fP\&. "
.ti -1c
.RI "struct \fBEntityId_t\fP"
.br
.RI "Structure \fBEntityId_t\fP, entity id part of \fBGUID_t\fP\&. "
.ti -1c
.RI "struct \fBGUID_t\fP"
.br
.RI "Structure \fBGUID_t\fP, entity identifier, unique in DDS-RTPS \fBDomain\fP\&. "
.ti -1c
.RI "struct \fBInstanceHandle_t\fP"
.br
.ti -1c
.RI "class \fBLocator_t\fP"
.br
.RI "Class \fBLocator_t\fP, uniquely identifies a communication channel for a particular transport\&. "
.ti -1c
.RI "class \fBLocatorList_t\fP"
.br
.ti -1c
.RI "class \fBMatchingInfo\fP"
.br
.ti -1c
.RI "class \fBProperty\fP"
.br
.ti -1c
.RI "class \fBPropertyHelper\fP"
.br
.ti -1c
.RI "class \fBSampleIdentity\fP"
.br
.RI "This class is used to specify a sample\&. "
.ti -1c
.RI "struct \fBSequenceNumber_t\fP"
.br
.RI "Structure \fBSequenceNumber_t\fP, different for each change in the same writer\&. "
.ti -1c
.RI "struct \fBSequenceNumberHash\fP"
.br
.RI "Defines the STL hash function for type \fBSequenceNumber_t\fP\&. "
.ti -1c
.RI "class \fBSequenceNumberSet_t\fP"
.br
.ti -1c
.RI "struct \fBSerializedPayload_t\fP"
.br
.RI "Structure \fBSerializedPayload_t\fP\&. "
.ti -1c
.RI "struct \fBTime_t\fP"
.br
.ti -1c
.RI "class \fBDataHolder\fP"
.br
.ti -1c
.RI "class \fBDataHolderHelper\fP"
.br
.ti -1c
.RI "struct \fBProtocolVersion_t\fP"
.br
.RI "Structure \fBProtocolVersion_t\fP, contains the protocol version\&. "
.ti -1c
.RI "class \fBWriteParams\fP"
.br
.RI "This class contains additional information of a CacheChange\&. "
.ti -1c
.RI "class \fBEndpoint\fP"
.br
.ti -1c
.RI "class \fBException\fP"
.br
.RI "This abstract class is used to create exceptions\&. "
.ti -1c
.RI "struct \fBThroughputControllerDescriptor\fP"
.br
.ti -1c
.RI "class \fBCacheChangePool\fP"
.br
.ti -1c
.RI "class \fBHistory\fP"
.br
.ti -1c
.RI "class \fBReaderHistory\fP"
.br
.ti -1c
.RI "class \fBWriterHistory\fP"
.br
.ti -1c
.RI "class \fBCDRMessagePool\fP"
.br
.ti -1c
.RI "class \fBMessageReceiver\fP"
.br
.ti -1c
.RI "struct \fBHeader_t\fP"
.br
.RI "Structure \fBHeader_t\fP, RTPS Message Header Structure\&. "
.ti -1c
.RI "struct \fBSubmessageHeader_t\fP"
.br
.RI "Structure \fBSubmessageHeader_t\fP, used to contain the header information of a submessage\&. "
.ti -1c
.RI "class \fBRTPSMessageCreator\fP"
.br
.RI "Class \fBRTPSMessageCreator\fP, allows the generation of serialized CDR RTPS Messages\&. "
.ti -1c
.RI "class \fBRTPSMessageGroup_t\fP"
.br
.ti -1c
.RI "class \fBRTPSMessageGroup\fP"
.br
.ti -1c
.RI "class \fBNetworkFactory\fP"
.br
.ti -1c
.RI "class \fBReceiverResource\fP"
.br
.ti -1c
.RI "class \fBSenderResource\fP"
.br
.ti -1c
.RI "class \fBRTPSParticipant\fP"
.br
.RI "Class \fBRTPSParticipant\fP, contains the public API for a \fBRTPSParticipant\fP\&. "
.ti -1c
.RI "class \fBRTPSParticipantDiscoveryInfo\fP"
.br
.ti -1c
.RI "class \fBRTPSParticipantListener\fP"
.br
.ti -1c
.RI "class \fBReaderListener\fP"
.br
.ti -1c
.RI "class \fBRTPSReader\fP"
.br
.ti -1c
.RI "class \fBStatefulReader\fP"
.br
.ti -1c
.RI "class \fBStatelessReader\fP"
.br
.ti -1c
.RI "class \fBHeartbeatResponseDelay\fP"
.br
.ti -1c
.RI "class \fBInitialAckNack\fP"
.br
.ti -1c
.RI "class \fBWriterProxyLiveliness\fP"
.br
.ti -1c
.RI "class \fBWriterProxy\fP"
.br
.ti -1c
.RI "class \fBAsyncInterestTree\fP"
.br
.ti -1c
.RI "class \fBAsyncWriterThread\fP"
.br
.RI "This static class owns a thread that manages asynchronous writes\&. Asynchronous writes happen directly (when using an async writer) and indirectly (when responding to a NACK)\&. "
.ti -1c
.RI "class \fBResourceEvent\fP"
.br
.ti -1c
.RI "class \fBTimedEvent\fP"
.br
.ti -1c
.RI "class \fBRTPSDomain\fP"
.br
.ti -1c
.RI "class \fBReaderLocator\fP"
.br
.ti -1c
.RI "class \fBReaderProxy\fP"
.br
.ti -1c
.RI "class \fBRTPSWriter\fP"
.br
.ti -1c
.RI "class \fBStatefulWriter\fP"
.br
.ti -1c
.RI "class \fBStatelessWriter\fP"
.br
.ti -1c
.RI "class \fBInitialHeartbeat\fP"
.br
.ti -1c
.RI "class \fBNackResponseDelay\fP"
.br
.ti -1c
.RI "class \fBNackSupressionDuration\fP"
.br
.ti -1c
.RI "class \fBPeriodicHeartbeat\fP"
.br
.ti -1c
.RI "class \fBWriterListener\fP"
.br
.ti -1c
.RI "class \fBtest_UDPv4Transport\fP"
.br
.ti -1c
.RI "struct \fBtest_UDPv4TransportDescriptor\fP"
.br
.ti -1c
.RI "class \fBTransportInterface\fP"
.br
.ti -1c
.RI "struct \fBTransportDescriptorInterface\fP"
.br
.ti -1c
.RI "class \fBUDPv4Transport\fP"
.br
.ti -1c
.RI "struct \fBUDPv4TransportDescriptor\fP"
.br
.ti -1c
.RI "class \fBUDPv6Transport\fP"
.br
.ti -1c
.RI "struct \fBUDPv6TransportDescriptor\fP"
.br
.ti -1c
.RI "class \fBObjectPool\fP"
.br
.ti -1c
.RI "class \fBStringMatching\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum eprosima::fastrtps::rtps::RTPSWriterPublishMode \fBRTPSWriterPublishMode\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBBinaryProperty\fP > \fBBinaryPropertySeq\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBFragmentNumber_t\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBLocator_t\fP >::iterator \fBLocatorListIterator\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBLocator_t\fP >::const_iterator \fBLocatorListConstIterator\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBProperty\fP > \fBPropertySeq\fP"
.br
.ti -1c
.RI "typedef \fBTime_t\fP \fBDuration_t\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBDataHolder\fP > \fBDataHolderSeq\fP"
.br
.ti -1c
.RI "typedef \fBDataHolder\fP \fBToken\fP"
.br
.ti -1c
.RI "typedef \fBToken\fP \fBIdentityToken\fP"
.br
.ti -1c
.RI "typedef enum \fBeprosima::fastrtps::rtps::ReliabilityKind_t\fP \fBReliabilityKind_t\fP"
.br
.ti -1c
.RI "typedef enum \fBeprosima::fastrtps::rtps::DurabilityKind_t\fP \fBDurabilityKind_t\fP"
.br
.ti -1c
.RI "typedef enum \fBeprosima::fastrtps::rtps::EndpointKind_t\fP \fBEndpointKind_t\fP"
.br
.ti -1c
.RI "typedef enum \fBeprosima::fastrtps::rtps::TopicKind_t\fP \fBTopicKind_t\fP"
.br
.RI "Topic kind\&. "
.ti -1c
.RI "typedef unsigned char \fBoctet\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBSubmessageFlag\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBBuiltinEndpointSet_t\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBCount_t\fP"
.br
.ti -1c
.RI "typedef octet \fBVendorId_t\fP[2]"
.br
.RI "Structure VendorId_t, specifying the vendor Id of the implementation\&. "
.ti -1c
.RI "typedef std::vector< std::pair< std::string, std::string > > \fBPropertyList\fP"
.br
.ti -1c
.RI "typedef std::vector< octet > \fBUserData\fP"
.br
.ti -1c
.RI "typedef enum \fBeprosima::fastrtps::rtps::MemoryManagementPolicy\fP \fBMemoryManagementPolicy_t\fP"
.br
.ti -1c
.RI "typedef \fBeprosima::fastrtps::rtps::test_UDPv4TransportDescriptor\fP \fBtest_UDPv4TransportDescriptor\fP"
.br
.ti -1c
.RI "typedef \fBeprosima::fastrtps::rtps::UDPv4TransportDescriptor\fP \fBUDPv4TransportDescriptor\fP"
.br
.ti -1c
.RI "typedef \fBeprosima::fastrtps::rtps::UDPv6TransportDescriptor\fP \fBUDPv6TransportDescriptor\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBRTPSWriterPublishMode\fP : octet { \fBSYNCHRONOUS_WRITER\fP, \fBASYNCHRONOUS_WRITER\fP }"
.br
.ti -1c
.RI "enum \fBChangeKind_t\fP { \fBALIVE\fP, \fBNOT_ALIVE_DISPOSED\fP, \fBNOT_ALIVE_UNREGISTERED\fP, \fBNOT_ALIVE_DISPOSED_UNREGISTERED\fP }"
.br
.ti -1c
.RI "enum \fBChangeFragmentStatus_t\fP { \fBNOT_PRESENT\fP = 0, \fBPRESENT\fP = 1 }"
.br
.ti -1c
.RI "enum \fBChangeForReaderStatus_t\fP { \fBUNSENT\fP = 0, \fBUNACKNOWLEDGED\fP = 1, \fBREQUESTED\fP = 2, \fBACKNOWLEDGED\fP = 3, \fBUNDERWAY\fP = 4 }"
.br
.ti -1c
.RI "enum \fBChangeFromWriterStatus_t\fP { \fBUNKNOWN\fP = 0, \fBMISSING\fP = 1, \fBRECEIVED\fP = 2, \fBLOST\fP = 3 }"
.br
.ti -1c
.RI "enum \fBMatchingStatus\fP { \fBMATCHED_MATCHING\fP, \fBREMOVED_MATCHING\fP }"
.br
.ti -1c
.RI "enum \fBEndianness_t\fP { \fBBIGEND\fP = 0x1, \fBLITTLEEND\fP = 0x0 }"
.br
.RI "This enumeration represents endianness types\&. "
.ti -1c
.RI "enum \fBReliabilityKind_t\fP { \fBRELIABLE\fP, \fBBEST_EFFORT\fP }"
.br
.ti -1c
.RI "enum \fBDurabilityKind_t\fP { \fBVOLATILE\fP, \fBTRANSIENT_LOCAL\fP }"
.br
.ti -1c
.RI "enum \fBEndpointKind_t\fP { \fBREADER\fP, \fBWRITER\fP }"
.br
.ti -1c
.RI "enum \fBTopicKind_t\fP { \fBNO_KEY\fP, \fBWITH_KEY\fP }"
.br
.RI "Topic kind\&. "
.ti -1c
.RI "enum \fBDISCOVERY_STATUS\fP { \fBDISCOVERED_RTPSPARTICIPANT\fP, \fBCHANGED_QOS_RTPSPARTICIPANT\fP, \fBREMOVED_RTPSPARTICIPANT\fP, \fBDROPPED_RTPSPARTICIPANT\fP }"
.br
.ti -1c
.RI "enum \fBMemoryManagementPolicy\fP { \fBPREALLOCATED_MEMORY_MODE\fP, \fBPREALLOCATED_WITH_REALLOC_MEMORY_MODE\fP, \fBDYNAMIC_RESERVE_MEMORY_MODE\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, \fBFragmentNumberSet_t\fP &sns)"
.br
.ti -1c
.RI "\fBFragmentNumberSet_t\fP \fBoperator\-\fP (\fBFragmentNumberSet_t\fP lhs, const \fBFragmentNumberSet_t\fP &rhs)"
.br
.ti -1c
.RI "\fBFragmentNumberSet_t\fP \fBoperator+\fP (\fBFragmentNumberSet_t\fP lhs, const \fBFragmentNumberSet_t\fP &rhs)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBGuidPrefix_t\fP &guiP)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (\fBEntityId_t\fP &id1, const uint32_t id2)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBEntityId_t\fP &id1, const \fBEntityId_t\fP &id2)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBEntityId_t\fP &id1, const \fBEntityId_t\fP &id2)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBEntityId_t\fP &enI)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBGUID_t\fP &g1, const \fBGUID_t\fP &g2)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBGUID_t\fP &g1, const \fBGUID_t\fP &g2)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBGUID_t\fP &g1, const \fBGUID_t\fP &g2)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBGUID_t\fP &guid)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBInstanceHandle_t\fP &ihandle1, const \fBInstanceHandle_t\fP &ihandle2)"
.br
.ti -1c
.RI "void \fBiHandle2GUID\fP (\fBGUID_t\fP &guid, const \fBInstanceHandle_t\fP &ihandle)"
.br
.ti -1c
.RI "\fBGUID_t\fP \fBiHandle2GUID\fP (const \fBInstanceHandle_t\fP &ihandle)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBInstanceHandle_t\fP &h1, const \fBInstanceHandle_t\fP &h2)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBInstanceHandle_t\fP &iHandle)"
.br
.ti -1c
.RI "bool \fBIsAddressDefined\fP (const \fBLocator_t\fP &loc)"
.br
.ti -1c
.RI "bool \fBIsLocatorValid\fP (const \fBLocator_t\fP &loc)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBLocator_t\fP &loc1, const \fBLocator_t\fP &loc2)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBLocator_t\fP &loc)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBLocatorList_t\fP &locList)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBSequenceNumber_t\fP &sn1, const \fBSequenceNumber_t\fP &sn2)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBSequenceNumber_t\fP &sn1, const \fBSequenceNumber_t\fP &sn2)"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBSequenceNumber_t\fP &seq1, const \fBSequenceNumber_t\fP &seq2)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBSequenceNumber_t\fP &seq1, const \fBSequenceNumber_t\fP &seq2)"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBSequenceNumber_t\fP &seq1, const \fBSequenceNumber_t\fP &seq2)"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBSequenceNumber_t\fP &seq1, const \fBSequenceNumber_t\fP &seq2)"
.br
.ti -1c
.RI "\fBSequenceNumber_t\fP \fBoperator\-\fP (const \fBSequenceNumber_t\fP &seq, const uint32_t inc)"
.br
.ti -1c
.RI "\fBSequenceNumber_t\fP \fBoperator+\fP (const \fBSequenceNumber_t\fP &seq, const uint32_t inc)"
.br
.ti -1c
.RI "\fBSequenceNumber_t\fP \fBoperator\-\fP (const \fBSequenceNumber_t\fP &minuend, const \fBSequenceNumber_t\fP &subtrahend)"
.br
.ti -1c
.RI "const \fBSequenceNumber_t\fP \fBc_SequenceNumber_Unknown\fP (\-1, 0)"
.br
.ti -1c
.RI "bool \fBsort_seqNum\fP (const \fBSequenceNumber_t\fP &s1, const \fBSequenceNumber_t\fP &s2)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBSequenceNumber_t\fP &seqNum)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, std::vector< \fBSequenceNumber_t\fP > &seqNumSet)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, \fBSequenceNumberSet_t\fP &sns)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBTime_t\fP &t)"
.br
.ti -1c
.RI "const \fBTime_t\fP \fBc_TimeInfinite\fP (0x7fffffff, 0xffffffff)"
.br
.ti -1c
.RI "const \fBTime_t\fP \fBc_TimeZero\fP (0, 0)"
.br
.ti -1c
.RI "const \fBTime_t\fP \fBc_TimeInvalid\fP (\-1, 0xffffffff)"
.br
.ti -1c
.RI "const \fBProtocolVersion_t\fP \fBc_ProtocolVersion_2_0\fP (2, 0)"
.br
.ti -1c
.RI "const \fBProtocolVersion_t\fP \fBc_ProtocolVersion_2_1\fP (2, 1)"
.br
.ti -1c
.RI "const \fBProtocolVersion_t\fP \fBc_ProtocolVersion_2_2\fP (2, 2)"
.br
.ti -1c
.RI "const \fBProtocolVersion_t\fP \fBc_ProtocolVersion\fP (2, 1)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBHeader_t\fP &h)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &output, const \fBSubmessageHeader_t\fP &sh)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBGuidPrefix_t\fP \fBc_GuidPrefix_Unknown\fP"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_Unknown\fP = ENTITYID_UNKNOWN"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SPDPReader\fP = ENTITYID_SPDP_BUILTIN_RTPSParticipant_READER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SPDPWriter\fP = ENTITYID_SPDP_BUILTIN_RTPSParticipant_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SEDPPubWriter\fP = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SEDPPubReader\fP = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SEDPSubWriter\fP = ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_SEDPSubReader\fP = ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_RTPSParticipant\fP = ENTITYID_RTPSParticipant"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_WriterLiveliness\fP = ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBc_EntityId_ReaderLiveliness\fP = ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_READER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBparticipant_stateless_message_writer_entity_id\fP = ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBparticipant_stateless_message_reader_entity_id\fP = ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_READER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBparticipant_volatile_message_secure_writer_entity_id\fP = ENTITYID_P2P_BUILTIN_PARTICIPANT_VOLATILE_MESSAGE_SECURE_WRITER"
.br
.ti -1c
.RI "const \fBEntityId_t\fP \fBparticipant_volatile_message_secure_reader_entity_id\fP = ENTITYID_P2P_BUILTIN_PARTICIPANT_VOLATILE_MESSAGE_SECURE_READER"
.br
.ti -1c
.RI "const \fBGUID_t\fP \fBc_Guid_Unknown\fP"
.br
.ti -1c
.RI "const \fBInstanceHandle_t\fP \fBc_InstanceHandle_Unknown\fP"
.br
.ti -1c
.RI "const \fBEndianness_t\fP \fBDEFAULT_ENDIAN\fP = \fBLITTLEEND\fP"
.br
.ti -1c
.RI "const \fBVendorId_t\fP \fBc_VendorId_Unknown\fP ={0x00,0x00}"
.br
.ti -1c
.RI "const \fBVendorId_t\fP \fBc_VendorId_eProsima\fP ={0x01,0x0F}"
.br
.ti -1c
.RI "const int \fBPAD\fP = 0x01"
.br
.ti -1c
.RI "const int \fBACKNACK\fP = 0x06"
.br
.ti -1c
.RI "const int \fBHEARTBEAT\fP = 0x07"
.br
.ti -1c
.RI "const int \fBGAP\fP = 0x08"
.br
.ti -1c
.RI "const int \fBINFO_TS\fP = 0x09"
.br
.ti -1c
.RI "const int \fBINFO_SRC\fP = 0x0c"
.br
.ti -1c
.RI "const int \fBINFO_REPLY_IP4\fP = 0x0d"
.br
.ti -1c
.RI "const int \fBINFO_DST\fP = 0x0e"
.br
.ti -1c
.RI "const int \fBINFO_REPLY\fP = 0x0f"
.br
.ti -1c
.RI "const int \fBNACK_FRAG\fP = 0x12"
.br
.ti -1c
.RI "const int \fBHEARTBEAT_FRAG\fP = 0x13"
.br
.ti -1c
.RI "const int \fBDATA\fP = 0x15"
.br
.ti -1c
.RI "const int \fBDATA_FRAG\fP = 0x16"
.br
.ti -1c
.RI "const int \fBSEC_PREFIX\fP = 0x31"
.br
.ti -1c
.RI "const int \fBSRTPS_PREFIX\fP = 0x33"
.br
.in -1c
.SH "Detailed Description"
.PP 
Contains the RTPS protocol implementation 
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBeprosima::fastrtps::rtps::MemoryManagementPolicy\fP \fBeprosima::fastrtps::rtps::MemoryManagementPolicy_t\fP"
Enum MemoryuManagementPolicy_t, indicated the way memory is managed in terms of dealing with CacheChanges 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBeprosima::fastrtps::rtps::MemoryManagementPolicy\fP"
Enum MemoryuManagementPolicy_t, indicated the way memory is managed in terms of dealing with CacheChanges 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPREALLOCATED_MEMORY_MODE \fP\fP
Preallocated memory\&. Size set to the data type maximum\&. Largest memory footprint but smalles allocation count\&. 
.TP
\fB\fIPREALLOCATED_WITH_REALLOC_MEMORY_MODE \fP\fP
Default size preallocated, requires reallocation when a bigger message arrives\&. Smaller memory footprint at the cost of an increased allocation count\&. 
.SH "Function Documentation"
.PP 
.SS "\fBGUID_t\fP eprosima::fastrtps::rtps::iHandle2GUID (const \fBInstanceHandle_t\fP & ihandle)\fC [inline]\fP"
Convert GUID to \fBInstanceHandle_t\fP 
.PP
\fBParameters\fP
.RS 4
\fIihandle\fP \fBInstanceHandle_t\fP to store the results 
.RE
.PP
\fBReturns\fP
.RS 4
\fBGUID_t\fP 
.RE
.PP

.SS "void eprosima::fastrtps::rtps::iHandle2GUID (\fBGUID_t\fP & guid, const \fBInstanceHandle_t\fP & ihandle)\fC [inline]\fP"
Convert \fBInstanceHandle_t\fP to GUID 
.PP
\fBParameters\fP
.RS 4
\fIguid\fP GUID to store the results 
.br
\fIihandle\fP \fBInstanceHandle_t\fP to copy 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator!= (const \fBEntityId_t\fP & id1, const \fBEntityId_t\fP & id2)\fC [inline]\fP"
Guid prefix comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIid1\fP First EntityId to compare 
.br
\fIid2\fP Second EntityId to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if not equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator!= (const \fBGUID_t\fP & g1, const \fBGUID_t\fP & g2)\fC [inline]\fP"
GUID comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIg1\fP First GUID to compare 
.br
\fIg2\fP Second GUID to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if not equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator!= (const \fBSequenceNumber_t\fP & sn1, const \fBSequenceNumber_t\fP & sn2)\fC [inline]\fP"
Compares two \fBSequenceNumber_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIsn1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIsn2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if not equal 
.RE
.PP

.SS "\fBSequenceNumber_t\fP eprosima::fastrtps::rtps::operator+ (const \fBSequenceNumber_t\fP & seq, const uint32_t inc)\fC [inline]\fP"
Add one \fBSequenceNumber_t\fP to another 
.PP
\fBParameters\fP
.RS 4
\fIseq\fP \fBBase\fP sequence number 
.br
\fIinc\fP value to add to the base 
.RE
.PP
\fBReturns\fP
.RS 4
Result of the addition 
.RE
.PP

.SS "\fBSequenceNumber_t\fP eprosima::fastrtps::rtps::operator\- (const \fBSequenceNumber_t\fP & minuend, const \fBSequenceNumber_t\fP & subtrahend)\fC [inline]\fP"
Subtract one \fBSequenceNumber_t\fP to another 
.PP
\fBParameters\fP
.RS 4
\fIminuend\fP Minuend\&. Has to be greater than or equal to subtrahend\&. 
.br
\fIsubtrahend\fP Subtrahend\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Result of the subtraction 
.RE
.PP

.SS "\fBSequenceNumber_t\fP eprosima::fastrtps::rtps::operator\- (const \fBSequenceNumber_t\fP & seq, const uint32_t inc)\fC [inline]\fP"
Subtract one \fBSequenceNumber_t\fP from another 
.PP
\fBParameters\fP
.RS 4
\fIseq\fP \fBBase\fP \fBSequenceNumber_t\fP 
.br
\fIinc\fP \fBSequenceNumber_t\fP to substract 
.RE
.PP
\fBReturns\fP
.RS 4
Result of the substraction 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator< (const \fBSequenceNumber_t\fP & seq1, const \fBSequenceNumber_t\fP & seq2)\fC [inline]\fP"
Checks if a \fBSequenceNumber_t\fP is less than other\&. 
.PP
\fBParameters\fP
.RS 4
\fIseq1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIseq2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if the first \fBSequenceNumber_t\fP is less than the second 
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, const \fBGUID_t\fP & guid)\fC [inline]\fP"
Stream operator, prints a GUID\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutput\fP Output stream\&. 
.br
\fIguid\fP \fBGUID_t\fP to print\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Stream operator\&. 
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, const \fBHeader_t\fP & h)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIoutput\fP 
.br
\fIh\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, const \fBInstanceHandle_t\fP & iHandle)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIoutput\fP 
.br
\fIiHandle\fP 
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, const \fBSequenceNumber_t\fP & seqNum)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIoutput\fP 
.br
\fIseqNum\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, const \fBSubmessageHeader_t\fP & sh)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIoutput\fP 
.br
\fIsh\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, \fBFragmentNumberSet_t\fP & sns)\fC [inline]\fP"
Prints a Fragment Number set 
.PP
\fBParameters\fP
.RS 4
\fIoutput\fP Output Stream 
.br
\fIsns\fP SequenceNumber set 
.RE
.PP
\fBReturns\fP
.RS 4
OStream\&. 
.RE
.PP

.SS "std::ostream& eprosima::fastrtps::rtps::operator<< (std::ostream & output, \fBSequenceNumberSet_t\fP & sns)\fC [inline]\fP"
Prints a sequence Number set 
.PP
\fBParameters\fP
.RS 4
\fIoutput\fP Output Stream 
.br
\fIsns\fP SequenceNumber set 
.RE
.PP
\fBReturns\fP
.RS 4
OStream\&. 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator<= (const \fBSequenceNumber_t\fP & seq1, const \fBSequenceNumber_t\fP & seq2)\fC [inline]\fP"
Checks if a \fBSequenceNumber_t\fP is less or equal than other\&. 
.PP
\fBParameters\fP
.RS 4
\fIseq1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIseq2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if the first \fBSequenceNumber_t\fP is less or equal than the second 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator== (const \fBEntityId_t\fP & id1, const \fBEntityId_t\fP & id2)\fC [inline]\fP"
Guid prefix comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIid1\fP First EntityId to compare 
.br
\fIid2\fP Second EntityId to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator== (const \fBGUID_t\fP & g1, const \fBGUID_t\fP & g2)\fC [inline]\fP"
GUID comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIg1\fP First GUID to compare 
.br
\fIg2\fP Second GUID to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator== (const \fBInstanceHandle_t\fP & ihandle1, const \fBInstanceHandle_t\fP & ihandle2)\fC [inline]\fP"
Comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIihandle1\fP First \fBInstanceHandle_t\fP to compare 
.br
\fIihandle2\fP Second \fBInstanceHandle_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator== (const \fBSequenceNumber_t\fP & sn1, const \fBSequenceNumber_t\fP & sn2)\fC [inline]\fP"
Compares two \fBSequenceNumber_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIsn1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIsn2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator== (\fBEntityId_t\fP & id1, const uint32_t id2)\fC [inline]\fP"
Guid prefix comparison operator 
.PP
\fBParameters\fP
.RS 4
\fIid1\fP EntityId to compare 
.br
\fIid2\fP ID prefix to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if equal 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator> (const \fBSequenceNumber_t\fP & seq1, const \fBSequenceNumber_t\fP & seq2)\fC [inline]\fP"
Checks if a \fBSequenceNumber_t\fP is greater than other\&. 
.PP
\fBParameters\fP
.RS 4
\fIseq1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIseq2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if the first \fBSequenceNumber_t\fP is greater than the second 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::operator>= (const \fBSequenceNumber_t\fP & seq1, const \fBSequenceNumber_t\fP & seq2)\fC [inline]\fP"
Checks if a \fBSequenceNumber_t\fP is greater or equal than other\&. 
.PP
\fBParameters\fP
.RS 4
\fIseq1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIseq2\fP Second \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if the first \fBSequenceNumber_t\fP is greater or equal than the second 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::sort_seqNum (const \fBSequenceNumber_t\fP & s1, const \fBSequenceNumber_t\fP & s2)\fC [inline]\fP"
Sorts two instances of \fBSequenceNumber_t\fP 
.PP
\fBParameters\fP
.RS 4
\fIs1\fP First \fBSequenceNumber_t\fP to compare 
.br
\fIs2\fP First \fBSequenceNumber_t\fP to compare 
.RE
.PP
\fBReturns\fP
.RS 4
True if s1 is less than s2 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
