.TH "apollo::control::SimpleLateralDebug" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::control::SimpleLateralDebug
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkCurrentTargetPointFieldNumber\fP = 30, \fBkSteerMracDebugFieldNumber\fP = 32, \fBkLateralErrorFieldNumber\fP = 1, \fBkRefHeadingFieldNumber\fP = 2, \fBkHeadingFieldNumber\fP = 3, \fBkHeadingErrorFieldNumber\fP = 4, \fBkHeadingErrorRateFieldNumber\fP = 5, \fBkLateralErrorRateFieldNumber\fP = 6, \fBkCurvatureFieldNumber\fP = 7, \fBkSteerAngleFieldNumber\fP = 8, \fBkSteerAngleFeedforwardFieldNumber\fP = 9, \fBkSteerAngleLateralContributionFieldNumber\fP = 10, \fBkSteerAngleLateralRateContributionFieldNumber\fP = 11, \fBkSteerAngleHeadingContributionFieldNumber\fP = 12, \fBkSteerAngleHeadingRateContributionFieldNumber\fP = 13, \fBkSteerAngleFeedbackFieldNumber\fP = 14, \fBkSteeringPositionFieldNumber\fP = 15, \fBkRefSpeedFieldNumber\fP = 16, \fBkSteerAngleLimitedFieldNumber\fP = 17, \fBkLateralAccelerationFieldNumber\fP = 18, \fBkLateralJerkFieldNumber\fP = 19, \fBkRefHeadingRateFieldNumber\fP = 20, \fBkHeadingRateFieldNumber\fP = 21, \fBkRefHeadingAccelerationFieldNumber\fP = 22, \fBkHeadingAccelerationFieldNumber\fP = 23, \fBkHeadingErrorAccelerationFieldNumber\fP = 24, \fBkRefHeadingJerkFieldNumber\fP = 25, \fBkHeadingJerkFieldNumber\fP = 26, \fBkHeadingErrorJerkFieldNumber\fP = 27, \fBkLateralErrorFeedbackFieldNumber\fP = 28, \fBkHeadingErrorFeedbackFieldNumber\fP = 29, \fBkSteerAngleFeedbackAugmentFieldNumber\fP = 31, \fBkSteerMracEnableStatusFieldNumber\fP = 33 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBSimpleLateralDebug\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBSimpleLateralDebug\fP (const \fBSimpleLateralDebug\fP &from)"
.br
.ti -1c
.RI "\fBSimpleLateralDebug\fP (\fBSimpleLateralDebug\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBSimpleLateralDebug\fP & \fBoperator=\fP (const \fBSimpleLateralDebug\fP &from)"
.br
.ti -1c
.RI "\fBSimpleLateralDebug\fP & \fBoperator=\fP (\fBSimpleLateralDebug\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBSimpleLateralDebug\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBSimpleLateralDebug\fP *other)"
.br
.ti -1c
.RI "\fBSimpleLateralDebug\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBSimpleLateralDebug\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBSimpleLateralDebug\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_current_target_point\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_target_point\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::TrajectoryPoint\fP & \fBcurrent_target_point\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::TrajectoryPoint\fP * \fBrelease_current_target_point\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::TrajectoryPoint\fP * \fBmutable_current_target_point\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_target_point\fP (::\fBapollo::common::TrajectoryPoint\fP *current_target_point)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_current_target_point\fP (::\fBapollo::common::TrajectoryPoint\fP *current_target_point)"
.br
.ti -1c
.RI "::\fBapollo::common::TrajectoryPoint\fP * \fBunsafe_arena_release_current_target_point\fP ()"
.br
.ti -1c
.RI "bool \fBhas_steer_mrac_debug\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_mrac_debug\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::control::MracDebug\fP & \fBsteer_mrac_debug\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::control::MracDebug\fP * \fBrelease_steer_mrac_debug\fP ()"
.br
.ti -1c
.RI "::\fBapollo::control::MracDebug\fP * \fBmutable_steer_mrac_debug\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_steer_mrac_debug\fP (::\fBapollo::control::MracDebug\fP *steer_mrac_debug)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_steer_mrac_debug\fP (::\fBapollo::control::MracDebug\fP *steer_mrac_debug)"
.br
.ti -1c
.RI "::\fBapollo::control::MracDebug\fP * \fBunsafe_arena_release_steer_mrac_debug\fP ()"
.br
.ti -1c
.RI "bool \fBhas_lateral_error\fP () const"
.br
.ti -1c
.RI "void \fBclear_lateral_error\fP ()"
.br
.ti -1c
.RI "double \fBlateral_error\fP () const"
.br
.ti -1c
.RI "void \fBset_lateral_error\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_ref_heading\fP () const"
.br
.ti -1c
.RI "void \fBclear_ref_heading\fP ()"
.br
.ti -1c
.RI "double \fBref_heading\fP () const"
.br
.ti -1c
.RI "void \fBset_ref_heading\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading\fP ()"
.br
.ti -1c
.RI "double \fBheading\fP () const"
.br
.ti -1c
.RI "void \fBset_heading\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_error\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_error\fP ()"
.br
.ti -1c
.RI "double \fBheading_error\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_error\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_error_rate\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_error_rate\fP ()"
.br
.ti -1c
.RI "double \fBheading_error_rate\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_error_rate\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_lateral_error_rate\fP () const"
.br
.ti -1c
.RI "void \fBclear_lateral_error_rate\fP ()"
.br
.ti -1c
.RI "double \fBlateral_error_rate\fP () const"
.br
.ti -1c
.RI "void \fBset_lateral_error_rate\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_curvature\fP () const"
.br
.ti -1c
.RI "void \fBclear_curvature\fP ()"
.br
.ti -1c
.RI "double \fBcurvature\fP () const"
.br
.ti -1c
.RI "void \fBset_curvature\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_feedforward\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_feedforward\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_feedforward\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_feedforward\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_lateral_contribution\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_lateral_contribution\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_lateral_contribution\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_lateral_contribution\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_lateral_rate_contribution\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_lateral_rate_contribution\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_lateral_rate_contribution\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_lateral_rate_contribution\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_heading_contribution\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_heading_contribution\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_heading_contribution\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_heading_contribution\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_heading_rate_contribution\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_heading_rate_contribution\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_heading_rate_contribution\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_heading_rate_contribution\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_feedback\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_feedback\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_feedback\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_feedback\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steering_position\fP () const"
.br
.ti -1c
.RI "void \fBclear_steering_position\fP ()"
.br
.ti -1c
.RI "double \fBsteering_position\fP () const"
.br
.ti -1c
.RI "void \fBset_steering_position\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_ref_speed\fP () const"
.br
.ti -1c
.RI "void \fBclear_ref_speed\fP ()"
.br
.ti -1c
.RI "double \fBref_speed\fP () const"
.br
.ti -1c
.RI "void \fBset_ref_speed\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_limited\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_limited\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_limited\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_limited\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_lateral_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_lateral_acceleration\fP ()"
.br
.ti -1c
.RI "double \fBlateral_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBset_lateral_acceleration\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_lateral_jerk\fP () const"
.br
.ti -1c
.RI "void \fBclear_lateral_jerk\fP ()"
.br
.ti -1c
.RI "double \fBlateral_jerk\fP () const"
.br
.ti -1c
.RI "void \fBset_lateral_jerk\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_ref_heading_rate\fP () const"
.br
.ti -1c
.RI "void \fBclear_ref_heading_rate\fP ()"
.br
.ti -1c
.RI "double \fBref_heading_rate\fP () const"
.br
.ti -1c
.RI "void \fBset_ref_heading_rate\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_rate\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_rate\fP ()"
.br
.ti -1c
.RI "double \fBheading_rate\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_rate\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_ref_heading_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_ref_heading_acceleration\fP ()"
.br
.ti -1c
.RI "double \fBref_heading_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBset_ref_heading_acceleration\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_acceleration\fP ()"
.br
.ti -1c
.RI "double \fBheading_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_acceleration\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_error_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_error_acceleration\fP ()"
.br
.ti -1c
.RI "double \fBheading_error_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_error_acceleration\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_ref_heading_jerk\fP () const"
.br
.ti -1c
.RI "void \fBclear_ref_heading_jerk\fP ()"
.br
.ti -1c
.RI "double \fBref_heading_jerk\fP () const"
.br
.ti -1c
.RI "void \fBset_ref_heading_jerk\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_jerk\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_jerk\fP ()"
.br
.ti -1c
.RI "double \fBheading_jerk\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_jerk\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_error_jerk\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_error_jerk\fP ()"
.br
.ti -1c
.RI "double \fBheading_error_jerk\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_error_jerk\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_lateral_error_feedback\fP () const"
.br
.ti -1c
.RI "void \fBclear_lateral_error_feedback\fP ()"
.br
.ti -1c
.RI "double \fBlateral_error_feedback\fP () const"
.br
.ti -1c
.RI "void \fBset_lateral_error_feedback\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading_error_feedback\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading_error_feedback\fP ()"
.br
.ti -1c
.RI "double \fBheading_error_feedback\fP () const"
.br
.ti -1c
.RI "void \fBset_heading_error_feedback\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_angle_feedback_augment\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_angle_feedback_augment\fP ()"
.br
.ti -1c
.RI "double \fBsteer_angle_feedback_augment\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_angle_feedback_augment\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_steer_mrac_enable_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_steer_mrac_enable_status\fP ()"
.br
.ti -1c
.RI "bool \fBsteer_mrac_enable_status\fP () const"
.br
.ti -1c
.RI "void \fBset_steer_mrac_enable_status\fP (bool value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBSimpleLateralDebug\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBSimpleLateralDebug\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSimpleLateralDebug\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBSimpleLateralDebug\fP &a, \fBSimpleLateralDebug\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::control::SimpleLateralDebug::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleLateralDebug::MergeImpl
}
.fi
.SS "constexpr int apollo::control::SimpleLateralDebug::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    3
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
