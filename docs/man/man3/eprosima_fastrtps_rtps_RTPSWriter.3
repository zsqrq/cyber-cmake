.TH "eprosima::fastrtps::rtps::RTPSWriter" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eprosima::fastrtps::rtps::RTPSWriter
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <RTPSWriter\&.h>\fP
.PP
Inherits \fBeprosima::fastrtps::rtps::Endpoint\fP\&.
.PP
Inherited by \fBeprosima::fastrtps::rtps::StatefulWriter\fP, and \fBeprosima::fastrtps::rtps::StatelessWriter\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename T > \fBCacheChange_t\fP * \fBnew_change\fP (T &data, \fBChangeKind_t\fP changeKind, \fBInstanceHandle_t\fP handle=c_InstanceHandle_Unknown)"
.br
.ti -1c
.RI "RTPS_DllAPI \fBCacheChange_t\fP * \fBnew_change\fP (const std::function< uint32_t()> &dataCdrSerializedSize, \fBChangeKind_t\fP changeKind, \fBInstanceHandle_t\fP handle=c_InstanceHandle_Unknown)"
.br
.ti -1c
.RI "virtual RTPS_DllAPI bool \fBmatched_reader_add\fP (\fBRemoteReaderAttributes\fP &ratt)=0"
.br
.ti -1c
.RI "virtual RTPS_DllAPI bool \fBmatched_reader_remove\fP (\fBRemoteReaderAttributes\fP &ratt)=0"
.br
.ti -1c
.RI "virtual RTPS_DllAPI bool \fBmatched_reader_is_matched\fP (\fBRemoteReaderAttributes\fP &ratt)=0"
.br
.ti -1c
.RI "virtual RTPS_DllAPI bool \fBis_acked_by_all\fP (\fBCacheChange_t\fP *)"
.br
.ti -1c
.RI "virtual RTPS_DllAPI bool \fBwait_for_all_acked\fP (const \fBDuration_t\fP &)"
.br
.ti -1c
.RI "virtual RTPS_DllAPI void \fBupdateAttributes\fP (\fBWriterAttributes\fP &att)=0"
.br
.ti -1c
.RI "virtual RTPS_DllAPI void \fBsend_any_unsent_changes\fP ()=0"
.br
.ti -1c
.RI "RTPS_DllAPI \fBSequenceNumber_t\fP \fBget_seq_num_min\fP ()"
.br
.ti -1c
.RI "RTPS_DllAPI \fBSequenceNumber_t\fP \fBget_seq_num_max\fP ()"
.br
.ti -1c
.RI "RTPS_DllAPI uint32_t \fBgetTypeMaxSerialized\fP ()"
.br
.ti -1c
.RI "uint32_t \fBgetMaxDataSize\fP ()"
.br
.ti -1c
.RI "uint32_t \fBcalculateMaxDataSize\fP (uint32_t length)"
.br
.ti -1c
.RI "RTPS_DllAPI \fBWriterListener\fP * \fBgetListener\fP ()"
.br
.ti -1c
.RI "RTPS_DllAPI bool \fBgetLivelinessAsserted\fP ()"
.br
.ti -1c
.RI "RTPS_DllAPI void \fBsetLivelinessAsserted\fP (bool l)"
.br
.ti -1c
.RI "RTPS_DllAPI bool \fBisAsync\fP ()"
.br
.ti -1c
.RI "RTPS_DllAPI bool \fBremove_older_changes\fP (unsigned int max=0)"
.br
.ti -1c
.RI "virtual bool \fBclean_history\fP (unsigned int max=0)=0"
.br
.ti -1c
.RI "virtual void \fBadd_flow_controller\fP (std::unique_ptr< FlowController > controller)=0"
.br
.ti -1c
.RI "RTPSParticipantImpl * \fBgetRTPSParticipant\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBRTPSWriter\fP (RTPSParticipantImpl *, \fBGUID_t\fP &guid, \fBWriterAttributes\fP &att, \fBWriterHistory\fP *hist, \fBWriterListener\fP *listen=nullptr)"
.br
.ti -1c
.RI "void \fBupdate_cached_info_nts\fP (std::vector< \fBGUID_t\fP > &&allRemoteReaders, std::vector< \fBLocatorList_t\fP > &allLocatorLists)"
.br
.ti -1c
.RI "void \fBinit_header\fP ()"
.br
.ti -1c
.RI "virtual void \fBunsent_change_added_to_history\fP (\fBCacheChange_t\fP *change)=0"
.br
.ti -1c
.RI "virtual bool \fBchange_removed_by_history\fP (\fBCacheChange_t\fP *a_change)=0"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBm_pushMode\fP"
.br
.RI "Is the data sent directly or announced by HB and THEN send to the ones who ask for it?\&. "
.ti -1c
.RI "\fBRTPSMessageGroup_t\fP \fBm_cdrmessages\fP"
.br
.RI "Group created to send messages more efficiently\&. "
.ti -1c
.RI "bool \fBm_livelinessAsserted\fP"
.br
.RI "INdicates if the liveliness has been asserted\&. "
.ti -1c
.RI "\fBWriterHistory\fP * \fBmp_history\fP"
.br
.RI "\fBWriterHistory\fP\&. "
.ti -1c
.RI "\fBWriterListener\fP * \fBmp_listener\fP"
.br
.RI "Listener\&. "
.ti -1c
.RI "bool \fBis_async_\fP"
.br
.ti -1c
.RI "\fBLocatorList_t\fP \fBmAllShrinkedLocatorList\fP"
.br
.ti -1c
.RI "std::vector< \fBGUID_t\fP > \fBmAllRemoteReaders\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBWriterHistory\fP"
.br
.ti -1c
.RI "class \fBRTPSParticipantImpl\fP"
.br
.ti -1c
.RI "class \fBRTPSMessageGroup\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBRTPSWriter\fP, manages the sending of data to the readers\&. Is always associated with a HistoryCache\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual bool eprosima::fastrtps::rtps::RTPSWriter::change_removed_by_history (\fBCacheChange_t\fP * a_change)\fC [protected]\fP, \fC [pure virtual]\fP"
Indicate the writer that a change has been removed by the history due to some HistoryQos requirement\&. 
.PP
\fBParameters\fP
.RS 4
\fIa_change\fP Pointer to the change that is going to be removed\&. 
.RE
.PP
\fBReturns\fP
.RS 4
True if removed correctly\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "RTPS_DllAPI \fBSequenceNumber_t\fP eprosima::fastrtps::rtps::RTPSWriter::get_seq_num_max ()"
Get Max Seq Num in \fBHistory\fP\&. 
.PP
\fBReturns\fP
.RS 4
Maximum sequence number in history 
.RE
.PP

.SS "RTPS_DllAPI \fBSequenceNumber_t\fP eprosima::fastrtps::rtps::RTPSWriter::get_seq_num_min ()"
Get Min Seq Num in \fBHistory\fP\&. 
.PP
\fBReturns\fP
.RS 4
Minimum sequence number in history 
.RE
.PP

.SS "RTPS_DllAPI \fBWriterListener\fP* eprosima::fastrtps::rtps::RTPSWriter::getListener ()\fC [inline]\fP"
Get listener 
.PP
\fBReturns\fP
.RS 4
Listener 
.RE
.PP

.SS "RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::getLivelinessAsserted ()\fC [inline]\fP"
Get the asserted liveliness 
.PP
\fBReturns\fP
.RS 4
Asserted liveliness 
.RE
.PP

.SS "RTPSParticipantImpl* eprosima::fastrtps::rtps::RTPSWriter::getRTPSParticipant () const\fC [inline]\fP"
Get RTPS participant 
.PP
\fBReturns\fP
.RS 4
RTPS participant 
.RE
.PP

.SS "RTPS_DllAPI uint32_t eprosima::fastrtps::rtps::RTPSWriter::getTypeMaxSerialized ()"
Get maximum size of the serialized type 
.PP
\fBReturns\fP
.RS 4
Maximum size of the serialized type 
.RE
.PP

.SS "void eprosima::fastrtps::rtps::RTPSWriter::init_header ()\fC [protected]\fP"
Initialize the header of hte CDRMessages\&. 
.SS "virtual RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::is_acked_by_all (\fBCacheChange_t\fP *)\fC [inline]\fP, \fC [virtual]\fP"
Check if a specific change has been acknowledged by all Readers\&. Is only useful in reliable Writer\&. In BE Writers always returns true; 
.PP
\fBReturns\fP
.RS 4
True if acknowledged by all\&. 
.RE
.PP

.PP
Reimplemented in \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::isAsync ()\fC [inline]\fP"
Get the publication mode 
.PP
\fBReturns\fP
.RS 4
publication mode 
.RE
.PP

.SS "virtual RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::matched_reader_add (\fBRemoteReaderAttributes\fP & ratt)\fC [pure virtual]\fP"
Add a matched reader\&. 
.PP
\fBParameters\fP
.RS 4
\fIratt\fP Pointer to the \fBReaderProxyData\fP object added\&. 
.RE
.PP
\fBReturns\fP
.RS 4
True if added\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "virtual RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::matched_reader_is_matched (\fBRemoteReaderAttributes\fP & ratt)\fC [pure virtual]\fP"
Tells us if a specific Reader is matched against this writer 
.PP
\fBParameters\fP
.RS 4
\fIratt\fP Pointer to the \fBReaderProxyData\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
True if it was matched\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "virtual RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::matched_reader_remove (\fBRemoteReaderAttributes\fP & ratt)\fC [pure virtual]\fP"
Remove a matched reader\&. 
.PP
\fBParameters\fP
.RS 4
\fIratt\fP Pointer to the object to remove\&. 
.RE
.PP
\fBReturns\fP
.RS 4
True if removed\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "template<typename T > \fBCacheChange_t\fP* eprosima::fastrtps::rtps::RTPSWriter::new_change (T & data, \fBChangeKind_t\fP changeKind, \fBInstanceHandle_t\fP handle = \fCc_InstanceHandle_Unknown\fP)\fC [inline]\fP"
Create a new change based with the provided changeKind\&. 
.PP
\fBParameters\fP
.RS 4
\fIchangeKind\fP The type of change\&. 
.br
\fIhandle\fP InstanceHandle to assign\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to the CacheChange or nullptr if incorrect\&. 
.RE
.PP

.SS "RTPS_DllAPI bool eprosima::fastrtps::rtps::RTPSWriter::remove_older_changes (unsigned int max = \fC0\fP)"
Remove an specified max number of changes 
.PP
\fBReturns\fP
.RS 4
at least one change has been removed 
.RE
.PP

.SS "virtual RTPS_DllAPI void eprosima::fastrtps::rtps::RTPSWriter::send_any_unsent_changes ()\fC [pure virtual]\fP"
This method triggers the send operation for unsent changes\&. 
.PP
\fBReturns\fP
.RS 4
number of messages sent 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "RTPS_DllAPI void eprosima::fastrtps::rtps::RTPSWriter::setLivelinessAsserted (bool l)\fC [inline]\fP"
Get the asserted liveliness 
.PP
\fBReturns\fP
.RS 4
asserted liveliness 
.RE
.PP

.SS "virtual void eprosima::fastrtps::rtps::RTPSWriter::unsent_change_added_to_history (\fBCacheChange_t\fP * change)\fC [protected]\fP, \fC [pure virtual]\fP"
Add a change to the unsent list\&. 
.PP
\fBParameters\fP
.RS 4
\fIchange\fP Pointer to the change to add\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.
.SS "virtual RTPS_DllAPI void eprosima::fastrtps::rtps::RTPSWriter::updateAttributes (\fBWriterAttributes\fP & att)\fC [pure virtual]\fP"
Update the Attributes of the Writer\&. 
.PP
\fBParameters\fP
.RS 4
\fIatt\fP New attributes 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::StatelessWriter\fP, and \fBeprosima::fastrtps::rtps::StatefulWriter\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
