.TH "apollo::dreamview::HMIStatus" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::dreamview::HMIStatus
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkModesFieldNumber\fP = 2, \fBkMapsFieldNumber\fP = 4, \fBkVehiclesFieldNumber\fP = 6, \fBkModulesFieldNumber\fP = 8, \fBkMonitoredComponentsFieldNumber\fP = 9, \fBkOtherComponentsFieldNumber\fP = 13, \fBkScenarioSetFieldNumber\fP = 15, \fBkDynamicModelsFieldNumber\fP = 18, \fBkRecordsFieldNumber\fP = 21, \fBkCurrentModeFieldNumber\fP = 3, \fBkCurrentMapFieldNumber\fP = 5, \fBkCurrentVehicleFieldNumber\fP = 7, \fBkDockerImageFieldNumber\fP = 10, \fBkPassengerMsgFieldNumber\fP = 12, \fBkCurrentScenarioSetIdFieldNumber\fP = 16, \fBkCurrentScenarioIdFieldNumber\fP = 17, \fBkCurrentDynamicModelFieldNumber\fP = 19, \fBkCurrentRecordIdFieldNumber\fP = 20, \fBkCurrentCameraSensorChannelFieldNumber\fP = 23, \fBkCurrentPointCloudChannelFieldNumber\fP = 24, \fBkHeaderFieldNumber\fP = 1, \fBkUtmZoneIdFieldNumber\fP = 11, \fBkCurrentVehicleTypeFieldNumber\fP = 22 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBHMIStatus\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBHMIStatus\fP (const \fBHMIStatus\fP &from)"
.br
.ti -1c
.RI "\fBHMIStatus\fP (\fBHMIStatus\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBHMIStatus\fP & \fBoperator=\fP (const \fBHMIStatus\fP &from)"
.br
.ti -1c
.RI "\fBHMIStatus\fP & \fBoperator=\fP (\fBHMIStatus\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBHMIStatus\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBHMIStatus\fP *other)"
.br
.ti -1c
.RI "\fBHMIStatus\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBHMIStatus\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBHMIStatus\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBmodes_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_modes\fP ()"
.br
.ti -1c
.RI "const std::string & \fBmodes\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_modes\fP (int index)"
.br
.ti -1c
.RI "void \fBset_modes\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_modes\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_modes\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_modes\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_modes\fP ()"
.br
.ti -1c
.RI "void \fBadd_modes\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_modes\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_modes\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_modes\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBmodes\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_modes\fP ()"
.br
.ti -1c
.RI "int \fBmaps_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_maps\fP ()"
.br
.ti -1c
.RI "const std::string & \fBmaps\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_maps\fP (int index)"
.br
.ti -1c
.RI "void \fBset_maps\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_maps\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_maps\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_maps\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_maps\fP ()"
.br
.ti -1c
.RI "void \fBadd_maps\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_maps\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_maps\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_maps\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBmaps\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_maps\fP ()"
.br
.ti -1c
.RI "int \fBvehicles_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_vehicles\fP ()"
.br
.ti -1c
.RI "const std::string & \fBvehicles\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_vehicles\fP (int index)"
.br
.ti -1c
.RI "void \fBset_vehicles\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_vehicles\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_vehicles\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_vehicles\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_vehicles\fP ()"
.br
.ti -1c
.RI "void \fBadd_vehicles\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_vehicles\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_vehicles\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_vehicles\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBvehicles\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_vehicles\fP ()"
.br
.ti -1c
.RI "int \fBmodules_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_modules\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool > & \fBmodules\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Map< std::string, bool > * \fBmutable_modules\fP ()"
.br
.ti -1c
.RI "int \fBmonitored_components_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_monitored_components\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::monitor::ComponentStatus\fP > & \fBmonitored_components\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::monitor::ComponentStatus\fP > * \fBmutable_monitored_components\fP ()"
.br
.ti -1c
.RI "int \fBother_components_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_other_components\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::monitor::ComponentStatus\fP > & \fBother_components\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::monitor::ComponentStatus\fP > * \fBmutable_other_components\fP ()"
.br
.ti -1c
.RI "int \fBscenario_set_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_scenario_set\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::dreamview::ScenarioSet\fP > & \fBscenario_set\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Map< std::string, ::\fBapollo::dreamview::ScenarioSet\fP > * \fBmutable_scenario_set\fP ()"
.br
.ti -1c
.RI "int \fBdynamic_models_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_dynamic_models\fP ()"
.br
.ti -1c
.RI "const std::string & \fBdynamic_models\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_dynamic_models\fP (int index)"
.br
.ti -1c
.RI "void \fBset_dynamic_models\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_dynamic_models\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_dynamic_models\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_dynamic_models\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_dynamic_models\fP ()"
.br
.ti -1c
.RI "void \fBadd_dynamic_models\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_dynamic_models\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_dynamic_models\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_dynamic_models\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBdynamic_models\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_dynamic_models\fP ()"
.br
.ti -1c
.RI "int \fBrecords_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_records\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t > & \fBrecords\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t > * \fBmutable_records\fP ()"
.br
.ti -1c
.RI "bool \fBhas_current_mode\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_mode\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_mode\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_mode\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_mode\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_mode\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_mode\fP (std::string *current_mode)"
.br
.ti -1c
.RI "bool \fBhas_current_map\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_map\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_map\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_map\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_map\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_map\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_map\fP (std::string *current_map)"
.br
.ti -1c
.RI "bool \fBhas_current_vehicle\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_vehicle\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_vehicle\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_vehicle\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_vehicle\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_vehicle\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_vehicle\fP (std::string *current_vehicle)"
.br
.ti -1c
.RI "bool \fBhas_docker_image\fP () const"
.br
.ti -1c
.RI "void \fBclear_docker_image\fP ()"
.br
.ti -1c
.RI "const std::string & \fBdocker_image\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_docker_image\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_docker_image\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_docker_image\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_docker_image\fP (std::string *docker_image)"
.br
.ti -1c
.RI "bool \fBhas_passenger_msg\fP () const"
.br
.ti -1c
.RI "void \fBclear_passenger_msg\fP ()"
.br
.ti -1c
.RI "const std::string & \fBpassenger_msg\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_passenger_msg\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_passenger_msg\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_passenger_msg\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_passenger_msg\fP (std::string *passenger_msg)"
.br
.ti -1c
.RI "bool \fBhas_current_scenario_set_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_scenario_set_id\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_scenario_set_id\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_scenario_set_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_scenario_set_id\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_scenario_set_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_scenario_set_id\fP (std::string *current_scenario_set_id)"
.br
.ti -1c
.RI "bool \fBhas_current_scenario_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_scenario_id\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_scenario_id\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_scenario_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_scenario_id\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_scenario_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_scenario_id\fP (std::string *current_scenario_id)"
.br
.ti -1c
.RI "bool \fBhas_current_dynamic_model\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_dynamic_model\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_dynamic_model\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_dynamic_model\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_dynamic_model\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_dynamic_model\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_dynamic_model\fP (std::string *current_dynamic_model)"
.br
.ti -1c
.RI "bool \fBhas_current_record_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_record_id\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_record_id\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_record_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_record_id\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_record_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_record_id\fP (std::string *current_record_id)"
.br
.ti -1c
.RI "bool \fBhas_current_camera_sensor_channel\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_camera_sensor_channel\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_camera_sensor_channel\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_camera_sensor_channel\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_camera_sensor_channel\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_camera_sensor_channel\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_camera_sensor_channel\fP (std::string *current_camera_sensor_channel)"
.br
.ti -1c
.RI "bool \fBhas_current_point_cloud_channel\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_point_cloud_channel\fP ()"
.br
.ti -1c
.RI "const std::string & \fBcurrent_point_cloud_channel\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_current_point_cloud_channel\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_current_point_cloud_channel\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_current_point_cloud_channel\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_current_point_cloud_channel\fP (std::string *current_point_cloud_channel)"
.br
.ti -1c
.RI "bool \fBhas_header\fP () const"
.br
.ti -1c
.RI "void \fBclear_header\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Header\fP & \fBheader\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Header\fP * \fBrelease_header\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBmutable_header\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBunsafe_arena_release_header\fP ()"
.br
.ti -1c
.RI "bool \fBhas_utm_zone_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_utm_zone_id\fP ()"
.br
.ti -1c
.RI "int32_t \fButm_zone_id\fP () const"
.br
.ti -1c
.RI "void \fBset_utm_zone_id\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_current_vehicle_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_current_vehicle_type\fP ()"
.br
.ti -1c
.RI "int32_t \fBcurrent_vehicle_type\fP () const"
.br
.ti -1c
.RI "void \fBset_current_vehicle_type\fP (int32_t value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_mode\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_map\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_vehicle\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_docker_image\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_passenger_msg\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_scenario_set_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_scenario_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_dynamic_model\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_record_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_camera_sensor_channel\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_current_point_cloud_channel\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBHMIStatus\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBHMIStatus\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBHMIStatus\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fdreamview_5fmsgs_2fhmi_5fstatus_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBHMIStatus\fP &a, \fBHMIStatus\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::dreamview::HMIStatus::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HMIStatus::MergeImpl
}
.fi
.SS "constexpr int apollo::dreamview::HMIStatus::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    7
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
