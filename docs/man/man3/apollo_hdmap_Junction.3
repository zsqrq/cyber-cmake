.TH "apollo::hdmap::Junction" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::hdmap::Junction
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkOverlapIdFieldNumber\fP = 3, \fBkIdFieldNumber\fP = 1, \fBkPolygonFieldNumber\fP = 2, \fBkTypeFieldNumber\fP = 4 }"
.br
.ti -1c
.RI "typedef Junction_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBJunction\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBJunction\fP (const \fBJunction\fP &from)"
.br
.ti -1c
.RI "\fBJunction\fP (\fBJunction\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBJunction\fP & \fBoperator=\fP (const \fBJunction\fP &from)"
.br
.ti -1c
.RI "\fBJunction\fP & \fBoperator=\fP (\fBJunction\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBJunction\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBJunction\fP *other)"
.br
.ti -1c
.RI "\fBJunction\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBJunction\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBJunction\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBoverlap_id_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_overlap_id\fP ()"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBmutable_overlap_id\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::hdmap::Id\fP > * \fBmutable_overlap_id\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::hdmap::Id\fP & \fBoverlap_id\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBadd_overlap_id\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::hdmap::Id\fP > & \fBoverlap_id\fP () const"
.br
.ti -1c
.RI "bool \fBhas_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_id\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::hdmap::Id\fP & \fBid\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::hdmap::Id\fP * \fBrelease_id\fP ()"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBmutable_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_id\fP (::\fBapollo::hdmap::Id\fP *id)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_id\fP (::\fBapollo::hdmap::Id\fP *id)"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBunsafe_arena_release_id\fP ()"
.br
.ti -1c
.RI "bool \fBhas_polygon\fP () const"
.br
.ti -1c
.RI "void \fBclear_polygon\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::hdmap::Polygon\fP & \fBpolygon\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::hdmap::Polygon\fP * \fBrelease_polygon\fP ()"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Polygon\fP * \fBmutable_polygon\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_polygon\fP (::\fBapollo::hdmap::Polygon\fP *polygon)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_polygon\fP (::\fBapollo::hdmap::Polygon\fP *polygon)"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Polygon\fP * \fBunsafe_arena_release_polygon\fP ()"
.br
.ti -1c
.RI "bool \fBhas_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_type\fP ()"
.br
.ti -1c
.RI "::apollo::hdmap::Junction_Type \fBtype\fP () const"
.br
.ti -1c
.RI "void \fBset_type\fP (::apollo::hdmap::Junction_Type value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBJunction\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBJunction\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBUNKNOWN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBIN_ROAD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBCROSS_ROAD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBFORK_ROAD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBMAIN_SIDE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBDEAD_END\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBJunction\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fmap_5fmsgs_2fmap_5fjunction_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBJunction\fP &a, \fBJunction\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::hdmap::Junction::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Junction::MergeImpl
}
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::CROSS_ROAD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_CROSS_ROAD
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::DEAD_END\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_DEAD_END
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::FORK_ROAD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_FORK_ROAD
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::IN_ROAD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_IN_ROAD
.fi
.SS "constexpr int apollo::hdmap::Junction::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::MAIN_SIDE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_MAIN_SIDE
.fi
.SS "constexpr int apollo::hdmap::Junction::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_Type_ARRAYSIZE
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_Type_MAX
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_Type_MIN
.fi
.SS "constexpr Junction_Type apollo::hdmap::Junction::UNKNOWN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Junction_Type_UNKNOWN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
