.TH "apollo::simulation::Condition" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::simulation::Condition
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBConditionCase\fP { \fBkLogicalCondition\fP = 1, \fBkSpeedCondition\fP = 2, \fBkAccelerationCondition\fP = 3, \fBkJerkCondition\fP = 4, \fBkObjectOverlapCondition\fP = 5, \fBkRegionOverlapCondition\fP = 6, \fBkRegionOverlapLwCondition\fP = 7, \fBkSpinCondition\fP = 8, \fBkOnRoadCondition\fP = 9, \fBkRunRedLightCondition\fP = 10, \fBkChangeLaneAtJunctionCondition\fP = 11, \fBkRoutingCondition\fP = 12, \fBkCrosswalkYieldCondition\fP = 13, \fBkAbnormalStopCondition\fP = 14, \fBkBrakeTapCondition\fP = 15, \fBkRunStopSignCondition\fP = 16, \fBkCheckpointCondition\fP = 17, \fBkDistToEndCondition\fP = 18, \fBkDistToLaneCenterCondition\fP = 19, \fBkCrosswalkStopCondition\fP = 20, \fBkRedLightStopCondition\fP = 21, \fBkSpeedbumpLimitCondition\fP = 22, \fBkWorkingZoneAvoidLimitCondition\fP = 23, \fBkLimitedTimeParkingCondition\fP = 24, \fBkFollowAndBypassCondition\fP = 25, \fBkObstacleBypassCondition\fP = 26, \fBkCentripetalAccelerationCondition\fP = 27, \fBkTimeLimitCondition\fP = 28, \fBkAntiCheatingCondition\fP = 29, \fBkKeyPointCondition\fP = 30, \fBCONDITION_NOT_SET\fP = 0 }"
.br
.ti -1c
.RI "enum : int { \fBkGradePlanningFieldNumber\fP = 100, \fBkLogicalConditionFieldNumber\fP = 1, \fBkSpeedConditionFieldNumber\fP = 2, \fBkAccelerationConditionFieldNumber\fP = 3, \fBkJerkConditionFieldNumber\fP = 4, \fBkObjectOverlapConditionFieldNumber\fP = 5, \fBkRegionOverlapConditionFieldNumber\fP = 6, \fBkRegionOverlapLwConditionFieldNumber\fP = 7, \fBkSpinConditionFieldNumber\fP = 8, \fBkOnRoadConditionFieldNumber\fP = 9, \fBkRunRedLightConditionFieldNumber\fP = 10, \fBkChangeLaneAtJunctionConditionFieldNumber\fP = 11, \fBkRoutingConditionFieldNumber\fP = 12, \fBkCrosswalkYieldConditionFieldNumber\fP = 13, \fBkAbnormalStopConditionFieldNumber\fP = 14, \fBkBrakeTapConditionFieldNumber\fP = 15, \fBkRunStopSignConditionFieldNumber\fP = 16, \fBkCheckpointConditionFieldNumber\fP = 17, \fBkDistToEndConditionFieldNumber\fP = 18, \fBkDistToLaneCenterConditionFieldNumber\fP = 19, \fBkCrosswalkStopConditionFieldNumber\fP = 20, \fBkRedLightStopConditionFieldNumber\fP = 21, \fBkSpeedbumpLimitConditionFieldNumber\fP = 22, \fBkWorkingZoneAvoidLimitConditionFieldNumber\fP = 23, \fBkLimitedTimeParkingConditionFieldNumber\fP = 24, \fBkFollowAndBypassConditionFieldNumber\fP = 25, \fBkObstacleBypassConditionFieldNumber\fP = 26, \fBkCentripetalAccelerationConditionFieldNumber\fP = 27, \fBkTimeLimitConditionFieldNumber\fP = 28, \fBkAntiCheatingConditionFieldNumber\fP = 29, \fBkKeyPointConditionFieldNumber\fP = 30 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBCondition\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBCondition\fP (const \fBCondition\fP &from)"
.br
.ti -1c
.RI "\fBCondition\fP (\fBCondition\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBCondition\fP & \fBoperator=\fP (const \fBCondition\fP &from)"
.br
.ti -1c
.RI "\fBCondition\fP & \fBoperator=\fP (\fBCondition\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBCondition\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBCondition\fP *other)"
.br
.ti -1c
.RI "\fBCondition\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBCondition\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBCondition\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_grade_planning\fP () const"
.br
.ti -1c
.RI "void \fBclear_grade_planning\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::GradePlanning\fP & \fBgrade_planning\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::GradePlanning\fP * \fBrelease_grade_planning\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::GradePlanning\fP * \fBmutable_grade_planning\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_grade_planning\fP (::\fBapollo::simulation::GradePlanning\fP *grade_planning)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_grade_planning\fP (::\fBapollo::simulation::GradePlanning\fP *grade_planning)"
.br
.ti -1c
.RI "::\fBapollo::simulation::GradePlanning\fP * \fBunsafe_arena_release_grade_planning\fP ()"
.br
.ti -1c
.RI "bool \fBhas_logical_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_logical_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::LogicalCondition\fP & \fBlogical_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::LogicalCondition\fP * \fBrelease_logical_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::LogicalCondition\fP * \fBmutable_logical_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_logical_condition\fP (::\fBapollo::simulation::LogicalCondition\fP *logical_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_logical_condition\fP (::\fBapollo::simulation::LogicalCondition\fP *logical_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::LogicalCondition\fP * \fBunsafe_arena_release_logical_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_speed_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_speed_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::SpeedCondition\fP & \fBspeed_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::SpeedCondition\fP * \fBrelease_speed_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpeedCondition\fP * \fBmutable_speed_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_speed_condition\fP (::\fBapollo::simulation::SpeedCondition\fP *speed_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_speed_condition\fP (::\fBapollo::simulation::SpeedCondition\fP *speed_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpeedCondition\fP * \fBunsafe_arena_release_speed_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_acceleration_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_acceleration_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::AccelerationCondition\fP & \fBacceleration_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::AccelerationCondition\fP * \fBrelease_acceleration_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::AccelerationCondition\fP * \fBmutable_acceleration_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_acceleration_condition\fP (::\fBapollo::simulation::AccelerationCondition\fP *acceleration_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_acceleration_condition\fP (::\fBapollo::simulation::AccelerationCondition\fP *acceleration_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::AccelerationCondition\fP * \fBunsafe_arena_release_acceleration_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_jerk_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_jerk_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::JerkCondition\fP & \fBjerk_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::JerkCondition\fP * \fBrelease_jerk_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::JerkCondition\fP * \fBmutable_jerk_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_jerk_condition\fP (::\fBapollo::simulation::JerkCondition\fP *jerk_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_jerk_condition\fP (::\fBapollo::simulation::JerkCondition\fP *jerk_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::JerkCondition\fP * \fBunsafe_arena_release_jerk_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_object_overlap_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_object_overlap_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::ObjectOverlapCondition\fP & \fBobject_overlap_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::ObjectOverlapCondition\fP * \fBrelease_object_overlap_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::ObjectOverlapCondition\fP * \fBmutable_object_overlap_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_object_overlap_condition\fP (::\fBapollo::simulation::ObjectOverlapCondition\fP *object_overlap_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_object_overlap_condition\fP (::\fBapollo::simulation::ObjectOverlapCondition\fP *object_overlap_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::ObjectOverlapCondition\fP * \fBunsafe_arena_release_object_overlap_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_region_overlap_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_region_overlap_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RegionOverlapCondition\fP & \fBregion_overlap_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RegionOverlapCondition\fP * \fBrelease_region_overlap_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RegionOverlapCondition\fP * \fBmutable_region_overlap_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_region_overlap_condition\fP (::\fBapollo::simulation::RegionOverlapCondition\fP *region_overlap_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_region_overlap_condition\fP (::\fBapollo::simulation::RegionOverlapCondition\fP *region_overlap_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RegionOverlapCondition\fP * \fBunsafe_arena_release_region_overlap_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_region_overlap_lw_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_region_overlap_lw_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RegionOverlapLWCondition\fP & \fBregion_overlap_lw_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RegionOverlapLWCondition\fP * \fBrelease_region_overlap_lw_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RegionOverlapLWCondition\fP * \fBmutable_region_overlap_lw_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_region_overlap_lw_condition\fP (::\fBapollo::simulation::RegionOverlapLWCondition\fP *region_overlap_lw_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_region_overlap_lw_condition\fP (::\fBapollo::simulation::RegionOverlapLWCondition\fP *region_overlap_lw_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RegionOverlapLWCondition\fP * \fBunsafe_arena_release_region_overlap_lw_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_spin_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_spin_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::SpinCondition\fP & \fBspin_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::SpinCondition\fP * \fBrelease_spin_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpinCondition\fP * \fBmutable_spin_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_spin_condition\fP (::\fBapollo::simulation::SpinCondition\fP *spin_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_spin_condition\fP (::\fBapollo::simulation::SpinCondition\fP *spin_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpinCondition\fP * \fBunsafe_arena_release_spin_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_on_road_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_on_road_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::OnRoadCondition\fP & \fBon_road_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::OnRoadCondition\fP * \fBrelease_on_road_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::OnRoadCondition\fP * \fBmutable_on_road_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_on_road_condition\fP (::\fBapollo::simulation::OnRoadCondition\fP *on_road_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_on_road_condition\fP (::\fBapollo::simulation::OnRoadCondition\fP *on_road_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::OnRoadCondition\fP * \fBunsafe_arena_release_on_road_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_run_red_light_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_run_red_light_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RunRedLightCondition\fP & \fBrun_red_light_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RunRedLightCondition\fP * \fBrelease_run_red_light_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RunRedLightCondition\fP * \fBmutable_run_red_light_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_run_red_light_condition\fP (::\fBapollo::simulation::RunRedLightCondition\fP *run_red_light_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_run_red_light_condition\fP (::\fBapollo::simulation::RunRedLightCondition\fP *run_red_light_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RunRedLightCondition\fP * \fBunsafe_arena_release_run_red_light_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_change_lane_at_junction_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_change_lane_at_junction_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP & \fBchange_lane_at_junction_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP * \fBrelease_change_lane_at_junction_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP * \fBmutable_change_lane_at_junction_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_change_lane_at_junction_condition\fP (::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP *change_lane_at_junction_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_change_lane_at_junction_condition\fP (::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP *change_lane_at_junction_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::ChangeLaneAtJunctionCondition\fP * \fBunsafe_arena_release_change_lane_at_junction_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_routing_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_routing_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RoutingCondition\fP & \fBrouting_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RoutingCondition\fP * \fBrelease_routing_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RoutingCondition\fP * \fBmutable_routing_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_routing_condition\fP (::\fBapollo::simulation::RoutingCondition\fP *routing_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_routing_condition\fP (::\fBapollo::simulation::RoutingCondition\fP *routing_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RoutingCondition\fP * \fBunsafe_arena_release_routing_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_crosswalk_yield_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_crosswalk_yield_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::CrosswalkYieldCondition\fP & \fBcrosswalk_yield_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::CrosswalkYieldCondition\fP * \fBrelease_crosswalk_yield_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::CrosswalkYieldCondition\fP * \fBmutable_crosswalk_yield_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_crosswalk_yield_condition\fP (::\fBapollo::simulation::CrosswalkYieldCondition\fP *crosswalk_yield_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_crosswalk_yield_condition\fP (::\fBapollo::simulation::CrosswalkYieldCondition\fP *crosswalk_yield_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::CrosswalkYieldCondition\fP * \fBunsafe_arena_release_crosswalk_yield_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_abnormal_stop_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_abnormal_stop_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::AbnormalStopCondition\fP & \fBabnormal_stop_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::AbnormalStopCondition\fP * \fBrelease_abnormal_stop_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::AbnormalStopCondition\fP * \fBmutable_abnormal_stop_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_abnormal_stop_condition\fP (::\fBapollo::simulation::AbnormalStopCondition\fP *abnormal_stop_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_abnormal_stop_condition\fP (::\fBapollo::simulation::AbnormalStopCondition\fP *abnormal_stop_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::AbnormalStopCondition\fP * \fBunsafe_arena_release_abnormal_stop_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_brake_tap_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_brake_tap_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::BrakeTapCondition\fP & \fBbrake_tap_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::BrakeTapCondition\fP * \fBrelease_brake_tap_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::BrakeTapCondition\fP * \fBmutable_brake_tap_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_brake_tap_condition\fP (::\fBapollo::simulation::BrakeTapCondition\fP *brake_tap_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_brake_tap_condition\fP (::\fBapollo::simulation::BrakeTapCondition\fP *brake_tap_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::BrakeTapCondition\fP * \fBunsafe_arena_release_brake_tap_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_run_stop_sign_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_run_stop_sign_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RunStopSignCondition\fP & \fBrun_stop_sign_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RunStopSignCondition\fP * \fBrelease_run_stop_sign_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RunStopSignCondition\fP * \fBmutable_run_stop_sign_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_run_stop_sign_condition\fP (::\fBapollo::simulation::RunStopSignCondition\fP *run_stop_sign_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_run_stop_sign_condition\fP (::\fBapollo::simulation::RunStopSignCondition\fP *run_stop_sign_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RunStopSignCondition\fP * \fBunsafe_arena_release_run_stop_sign_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_checkpoint_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_checkpoint_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::CheckpointCondition\fP & \fBcheckpoint_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::CheckpointCondition\fP * \fBrelease_checkpoint_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::CheckpointCondition\fP * \fBmutable_checkpoint_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_checkpoint_condition\fP (::\fBapollo::simulation::CheckpointCondition\fP *checkpoint_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_checkpoint_condition\fP (::\fBapollo::simulation::CheckpointCondition\fP *checkpoint_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::CheckpointCondition\fP * \fBunsafe_arena_release_checkpoint_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_dist_to_end_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_dist_to_end_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::DistToEndCondition\fP & \fBdist_to_end_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::DistToEndCondition\fP * \fBrelease_dist_to_end_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::DistToEndCondition\fP * \fBmutable_dist_to_end_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_dist_to_end_condition\fP (::\fBapollo::simulation::DistToEndCondition\fP *dist_to_end_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_dist_to_end_condition\fP (::\fBapollo::simulation::DistToEndCondition\fP *dist_to_end_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::DistToEndCondition\fP * \fBunsafe_arena_release_dist_to_end_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_dist_to_lane_center_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_dist_to_lane_center_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::DistToLaneCenterCondition\fP & \fBdist_to_lane_center_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::DistToLaneCenterCondition\fP * \fBrelease_dist_to_lane_center_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::DistToLaneCenterCondition\fP * \fBmutable_dist_to_lane_center_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_dist_to_lane_center_condition\fP (::\fBapollo::simulation::DistToLaneCenterCondition\fP *dist_to_lane_center_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_dist_to_lane_center_condition\fP (::\fBapollo::simulation::DistToLaneCenterCondition\fP *dist_to_lane_center_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::DistToLaneCenterCondition\fP * \fBunsafe_arena_release_dist_to_lane_center_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_crosswalk_stop_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_crosswalk_stop_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::CrosswalkStopCondition\fP & \fBcrosswalk_stop_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::CrosswalkStopCondition\fP * \fBrelease_crosswalk_stop_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::CrosswalkStopCondition\fP * \fBmutable_crosswalk_stop_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_crosswalk_stop_condition\fP (::\fBapollo::simulation::CrosswalkStopCondition\fP *crosswalk_stop_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_crosswalk_stop_condition\fP (::\fBapollo::simulation::CrosswalkStopCondition\fP *crosswalk_stop_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::CrosswalkStopCondition\fP * \fBunsafe_arena_release_crosswalk_stop_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_red_light_stop_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_red_light_stop_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::RedLightStopCondition\fP & \fBred_light_stop_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::RedLightStopCondition\fP * \fBrelease_red_light_stop_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::RedLightStopCondition\fP * \fBmutable_red_light_stop_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_red_light_stop_condition\fP (::\fBapollo::simulation::RedLightStopCondition\fP *red_light_stop_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_red_light_stop_condition\fP (::\fBapollo::simulation::RedLightStopCondition\fP *red_light_stop_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::RedLightStopCondition\fP * \fBunsafe_arena_release_red_light_stop_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_speedbump_limit_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_speedbump_limit_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::SpeedbumpLimitCondition\fP & \fBspeedbump_limit_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::SpeedbumpLimitCondition\fP * \fBrelease_speedbump_limit_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpeedbumpLimitCondition\fP * \fBmutable_speedbump_limit_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_speedbump_limit_condition\fP (::\fBapollo::simulation::SpeedbumpLimitCondition\fP *speedbump_limit_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_speedbump_limit_condition\fP (::\fBapollo::simulation::SpeedbumpLimitCondition\fP *speedbump_limit_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::SpeedbumpLimitCondition\fP * \fBunsafe_arena_release_speedbump_limit_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_working_zone_avoid_limit_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_working_zone_avoid_limit_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP & \fBworking_zone_avoid_limit_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP * \fBrelease_working_zone_avoid_limit_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP * \fBmutable_working_zone_avoid_limit_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_working_zone_avoid_limit_condition\fP (::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP *working_zone_avoid_limit_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_working_zone_avoid_limit_condition\fP (::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP *working_zone_avoid_limit_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::WorkingZoneAvoidLimitCondition\fP * \fBunsafe_arena_release_working_zone_avoid_limit_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_limited_time_parking_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_limited_time_parking_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::LimitedTimeParkingCondition\fP & \fBlimited_time_parking_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::LimitedTimeParkingCondition\fP * \fBrelease_limited_time_parking_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::LimitedTimeParkingCondition\fP * \fBmutable_limited_time_parking_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_limited_time_parking_condition\fP (::\fBapollo::simulation::LimitedTimeParkingCondition\fP *limited_time_parking_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_limited_time_parking_condition\fP (::\fBapollo::simulation::LimitedTimeParkingCondition\fP *limited_time_parking_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::LimitedTimeParkingCondition\fP * \fBunsafe_arena_release_limited_time_parking_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_follow_and_bypass_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_follow_and_bypass_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::FollowAndBypassCondition\fP & \fBfollow_and_bypass_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::FollowAndBypassCondition\fP * \fBrelease_follow_and_bypass_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::FollowAndBypassCondition\fP * \fBmutable_follow_and_bypass_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_follow_and_bypass_condition\fP (::\fBapollo::simulation::FollowAndBypassCondition\fP *follow_and_bypass_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_follow_and_bypass_condition\fP (::\fBapollo::simulation::FollowAndBypassCondition\fP *follow_and_bypass_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::FollowAndBypassCondition\fP * \fBunsafe_arena_release_follow_and_bypass_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_obstacle_bypass_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_obstacle_bypass_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::ObstacleBypassCondition\fP & \fBobstacle_bypass_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::ObstacleBypassCondition\fP * \fBrelease_obstacle_bypass_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::ObstacleBypassCondition\fP * \fBmutable_obstacle_bypass_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_obstacle_bypass_condition\fP (::\fBapollo::simulation::ObstacleBypassCondition\fP *obstacle_bypass_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_obstacle_bypass_condition\fP (::\fBapollo::simulation::ObstacleBypassCondition\fP *obstacle_bypass_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::ObstacleBypassCondition\fP * \fBunsafe_arena_release_obstacle_bypass_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_centripetal_acceleration_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_centripetal_acceleration_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::CentripetalAccelerationCondition\fP & \fBcentripetal_acceleration_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::CentripetalAccelerationCondition\fP * \fBrelease_centripetal_acceleration_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::CentripetalAccelerationCondition\fP * \fBmutable_centripetal_acceleration_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_centripetal_acceleration_condition\fP (::\fBapollo::simulation::CentripetalAccelerationCondition\fP *centripetal_acceleration_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_centripetal_acceleration_condition\fP (::\fBapollo::simulation::CentripetalAccelerationCondition\fP *centripetal_acceleration_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::CentripetalAccelerationCondition\fP * \fBunsafe_arena_release_centripetal_acceleration_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_time_limit_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_time_limit_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::TimeLimitCondition\fP & \fBtime_limit_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::TimeLimitCondition\fP * \fBrelease_time_limit_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::TimeLimitCondition\fP * \fBmutable_time_limit_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_time_limit_condition\fP (::\fBapollo::simulation::TimeLimitCondition\fP *time_limit_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_time_limit_condition\fP (::\fBapollo::simulation::TimeLimitCondition\fP *time_limit_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::TimeLimitCondition\fP * \fBunsafe_arena_release_time_limit_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_anti_cheating_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_anti_cheating_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::AntiCheatingCondition\fP & \fBanti_cheating_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::AntiCheatingCondition\fP * \fBrelease_anti_cheating_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::AntiCheatingCondition\fP * \fBmutable_anti_cheating_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_anti_cheating_condition\fP (::\fBapollo::simulation::AntiCheatingCondition\fP *anti_cheating_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_anti_cheating_condition\fP (::\fBapollo::simulation::AntiCheatingCondition\fP *anti_cheating_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::AntiCheatingCondition\fP * \fBunsafe_arena_release_anti_cheating_condition\fP ()"
.br
.ti -1c
.RI "bool \fBhas_key_point_condition\fP () const"
.br
.ti -1c
.RI "void \fBclear_key_point_condition\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::KeyPointCondition\fP & \fBkey_point_condition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::KeyPointCondition\fP * \fBrelease_key_point_condition\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::KeyPointCondition\fP * \fBmutable_key_point_condition\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_key_point_condition\fP (::\fBapollo::simulation::KeyPointCondition\fP *key_point_condition)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_key_point_condition\fP (::\fBapollo::simulation::KeyPointCondition\fP *key_point_condition)"
.br
.ti -1c
.RI "::\fBapollo::simulation::KeyPointCondition\fP * \fBunsafe_arena_release_key_point_condition\fP ()"
.br
.ti -1c
.RI "void \fBclear_condition\fP ()"
.br
.ti -1c
.RI "ConditionCase \fBcondition_case\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBCondition\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBCondition\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBCondition\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBCondition\fP &a, \fBCondition\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::simulation::Condition::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Condition::MergeImpl
}
.fi
.SS "constexpr int apollo::simulation::Condition::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
