.TH "apollo::canbus::BasicInfo" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::canbus::BasicInfo
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkPowerStateFieldNumber\fP = 2, \fBkIsAutoModeFieldNumber\fP = 1, \fBkIsAirBagDeployedFieldNumber\fP = 3, \fBkIsSystemErrorFieldNumber\fP = 6, \fBkIsHumanInterruptFieldNumber\fP = 7, \fBkOdoMeterFieldNumber\fP = 4, \fBkDriveRangeFieldNumber\fP = 5, \fBkAccOnButtonFieldNumber\fP = 8, \fBkAccOffButtonFieldNumber\fP = 9, \fBkAccResButtonFieldNumber\fP = 10, \fBkAccCancelButtonFieldNumber\fP = 11, \fBkAccOnOffButtonFieldNumber\fP = 12, \fBkAccResCancelButtonFieldNumber\fP = 13, \fBkAccIncSpdButtonFieldNumber\fP = 14, \fBkAccDecSpdButtonFieldNumber\fP = 15, \fBkAccIncGapButtonFieldNumber\fP = 16, \fBkAccDecGapButtonFieldNumber\fP = 17, \fBkLkaButtonFieldNumber\fP = 18, \fBkCanbusFaultFieldNumber\fP = 19, \fBkYearFieldNumber\fP = 23, \fBkLatitudeFieldNumber\fP = 20, \fBkLongitudeFieldNumber\fP = 21, \fBkMonthFieldNumber\fP = 24, \fBkDayFieldNumber\fP = 25, \fBkHoursFieldNumber\fP = 26, \fBkMinutesFieldNumber\fP = 27, \fBkSecondsFieldNumber\fP = 28, \fBkGpsValidFieldNumber\fP = 22, \fBkIsGpsFaultFieldNumber\fP = 31, \fBkIsInferredFieldNumber\fP = 32, \fBkCompassDirectionFieldNumber\fP = 29, \fBkPdopFieldNumber\fP = 30, \fBkAltitudeFieldNumber\fP = 33, \fBkHeadingFieldNumber\fP = 34, \fBkHdopFieldNumber\fP = 35, \fBkVdopFieldNumber\fP = 36, \fBkQualityFieldNumber\fP = 37, \fBkNumSatellitesFieldNumber\fP = 38, \fBkGpsSpeedFieldNumber\fP = 39 }"
.br
.ti -1c
.RI "typedef BasicInfo_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBBasicInfo\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBBasicInfo\fP (const \fBBasicInfo\fP &from)"
.br
.ti -1c
.RI "\fBBasicInfo\fP (\fBBasicInfo\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBBasicInfo\fP & \fBoperator=\fP (const \fBBasicInfo\fP &from)"
.br
.ti -1c
.RI "\fBBasicInfo\fP & \fBoperator=\fP (\fBBasicInfo\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBBasicInfo\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBBasicInfo\fP *other)"
.br
.ti -1c
.RI "\fBBasicInfo\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBBasicInfo\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBBasicInfo\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_power_state\fP () const"
.br
.ti -1c
.RI "void \fBclear_power_state\fP ()"
.br
.ti -1c
.RI "::apollo::canbus::BasicInfo_Type \fBpower_state\fP () const"
.br
.ti -1c
.RI "void \fBset_power_state\fP (::apollo::canbus::BasicInfo_Type value)"
.br
.ti -1c
.RI "bool \fBhas_is_auto_mode\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_auto_mode\fP ()"
.br
.ti -1c
.RI "bool \fBis_auto_mode\fP () const"
.br
.ti -1c
.RI "void \fBset_is_auto_mode\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_air_bag_deployed\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_air_bag_deployed\fP ()"
.br
.ti -1c
.RI "bool \fBis_air_bag_deployed\fP () const"
.br
.ti -1c
.RI "void \fBset_is_air_bag_deployed\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_system_error\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_system_error\fP ()"
.br
.ti -1c
.RI "bool \fBis_system_error\fP () const"
.br
.ti -1c
.RI "void \fBset_is_system_error\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_human_interrupt\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_human_interrupt\fP ()"
.br
.ti -1c
.RI "bool \fBis_human_interrupt\fP () const"
.br
.ti -1c
.RI "void \fBset_is_human_interrupt\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_odo_meter\fP () const"
.br
.ti -1c
.RI "void \fBclear_odo_meter\fP ()"
.br
.ti -1c
.RI "double \fBodo_meter\fP () const"
.br
.ti -1c
.RI "void \fBset_odo_meter\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_drive_range\fP () const"
.br
.ti -1c
.RI "void \fBclear_drive_range\fP ()"
.br
.ti -1c
.RI "double \fBdrive_range\fP () const"
.br
.ti -1c
.RI "void \fBset_drive_range\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_acc_on_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_on_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_on_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_on_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_off_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_off_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_off_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_off_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_res_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_res_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_res_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_res_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_cancel_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_cancel_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_cancel_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_cancel_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_on_off_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_on_off_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_on_off_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_on_off_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_res_cancel_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_res_cancel_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_res_cancel_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_res_cancel_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_inc_spd_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_inc_spd_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_inc_spd_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_inc_spd_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_dec_spd_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_dec_spd_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_dec_spd_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_dec_spd_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_inc_gap_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_inc_gap_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_inc_gap_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_inc_gap_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_acc_dec_gap_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_acc_dec_gap_button\fP ()"
.br
.ti -1c
.RI "bool \fBacc_dec_gap_button\fP () const"
.br
.ti -1c
.RI "void \fBset_acc_dec_gap_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_lka_button\fP () const"
.br
.ti -1c
.RI "void \fBclear_lka_button\fP ()"
.br
.ti -1c
.RI "bool \fBlka_button\fP () const"
.br
.ti -1c
.RI "void \fBset_lka_button\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_canbus_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_canbus_fault\fP ()"
.br
.ti -1c
.RI "bool \fBcanbus_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_canbus_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_year\fP () const"
.br
.ti -1c
.RI "void \fBclear_year\fP ()"
.br
.ti -1c
.RI "int32_t \fByear\fP () const"
.br
.ti -1c
.RI "void \fBset_year\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_latitude\fP () const"
.br
.ti -1c
.RI "void \fBclear_latitude\fP ()"
.br
.ti -1c
.RI "double \fBlatitude\fP () const"
.br
.ti -1c
.RI "void \fBset_latitude\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_longitude\fP () const"
.br
.ti -1c
.RI "void \fBclear_longitude\fP ()"
.br
.ti -1c
.RI "double \fBlongitude\fP () const"
.br
.ti -1c
.RI "void \fBset_longitude\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_month\fP () const"
.br
.ti -1c
.RI "void \fBclear_month\fP ()"
.br
.ti -1c
.RI "int32_t \fBmonth\fP () const"
.br
.ti -1c
.RI "void \fBset_month\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_day\fP () const"
.br
.ti -1c
.RI "void \fBclear_day\fP ()"
.br
.ti -1c
.RI "int32_t \fBday\fP () const"
.br
.ti -1c
.RI "void \fBset_day\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_hours\fP () const"
.br
.ti -1c
.RI "void \fBclear_hours\fP ()"
.br
.ti -1c
.RI "int32_t \fBhours\fP () const"
.br
.ti -1c
.RI "void \fBset_hours\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_minutes\fP () const"
.br
.ti -1c
.RI "void \fBclear_minutes\fP ()"
.br
.ti -1c
.RI "int32_t \fBminutes\fP () const"
.br
.ti -1c
.RI "void \fBset_minutes\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_seconds\fP () const"
.br
.ti -1c
.RI "void \fBclear_seconds\fP ()"
.br
.ti -1c
.RI "int32_t \fBseconds\fP () const"
.br
.ti -1c
.RI "void \fBset_seconds\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_gps_valid\fP () const"
.br
.ti -1c
.RI "void \fBclear_gps_valid\fP ()"
.br
.ti -1c
.RI "bool \fBgps_valid\fP () const"
.br
.ti -1c
.RI "void \fBset_gps_valid\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_gps_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_gps_fault\fP ()"
.br
.ti -1c
.RI "bool \fBis_gps_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_is_gps_fault\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_is_inferred\fP () const"
.br
.ti -1c
.RI "void \fBclear_is_inferred\fP ()"
.br
.ti -1c
.RI "bool \fBis_inferred\fP () const"
.br
.ti -1c
.RI "void \fBset_is_inferred\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_compass_direction\fP () const"
.br
.ti -1c
.RI "void \fBclear_compass_direction\fP ()"
.br
.ti -1c
.RI "double \fBcompass_direction\fP () const"
.br
.ti -1c
.RI "void \fBset_compass_direction\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_pdop\fP () const"
.br
.ti -1c
.RI "void \fBclear_pdop\fP ()"
.br
.ti -1c
.RI "double \fBpdop\fP () const"
.br
.ti -1c
.RI "void \fBset_pdop\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_altitude\fP () const"
.br
.ti -1c
.RI "void \fBclear_altitude\fP ()"
.br
.ti -1c
.RI "double \fBaltitude\fP () const"
.br
.ti -1c
.RI "void \fBset_altitude\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_heading\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading\fP ()"
.br
.ti -1c
.RI "double \fBheading\fP () const"
.br
.ti -1c
.RI "void \fBset_heading\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_hdop\fP () const"
.br
.ti -1c
.RI "void \fBclear_hdop\fP ()"
.br
.ti -1c
.RI "double \fBhdop\fP () const"
.br
.ti -1c
.RI "void \fBset_hdop\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_vdop\fP () const"
.br
.ti -1c
.RI "void \fBclear_vdop\fP ()"
.br
.ti -1c
.RI "double \fBvdop\fP () const"
.br
.ti -1c
.RI "void \fBset_vdop\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_quality\fP () const"
.br
.ti -1c
.RI "void \fBclear_quality\fP ()"
.br
.ti -1c
.RI "::apollo::canbus::GpsQuality \fBquality\fP () const"
.br
.ti -1c
.RI "void \fBset_quality\fP (::apollo::canbus::GpsQuality value)"
.br
.ti -1c
.RI "bool \fBhas_num_satellites\fP () const"
.br
.ti -1c
.RI "void \fBclear_num_satellites\fP ()"
.br
.ti -1c
.RI "int32_t \fBnum_satellites\fP () const"
.br
.ti -1c
.RI "void \fBset_num_satellites\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_gps_speed\fP () const"
.br
.ti -1c
.RI "void \fBclear_gps_speed\fP ()"
.br
.ti -1c
.RI "double \fBgps_speed\fP () const"
.br
.ti -1c
.RI "void \fBset_gps_speed\fP (double value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBBasicInfo\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBBasicInfo\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBOFF\fP"
.br
.ti -1c
.RI "static constexpr Type \fBACC\fP"
.br
.ti -1c
.RI "static constexpr Type \fBON\fP"
.br
.ti -1c
.RI "static constexpr Type \fBSTART\fP"
.br
.ti -1c
.RI "static constexpr Type \fBINVALID\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBBasicInfo\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fchassis_5fmsgs_2fchassis_5fdetail_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBBasicInfo\fP &a, \fBBasicInfo\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::canbus::BasicInfo::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicInfo::MergeImpl
}
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::ACC\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_ACC
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::INVALID\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_INVALID
.fi
.SS "constexpr int apollo::canbus::BasicInfo::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    14
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::OFF\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_OFF
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::ON\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_ON
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::START\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_START
.fi
.SS "constexpr int apollo::canbus::BasicInfo::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_Type_ARRAYSIZE
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_Type_MAX
.fi
.SS "constexpr BasicInfo_Type apollo::canbus::BasicInfo::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    BasicInfo_Type_Type_MIN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
