.TH "apollo::planning_internal::PlanningData" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::planning_internal::PlanningData
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkPathFieldNumber\fP = 6, \fBkSpeedPlanFieldNumber\fP = 13, \fBkStGraphFieldNumber\fP = 14, \fBkSlFrameFieldNumber\fP = 15, \fBkObstacleFieldNumber\fP = 18, \fBkReferenceLineFieldNumber\fP = 19, \fBkChartFieldNumber\fP = 25, \fBkAdcPositionFieldNumber\fP = 7, \fBkChassisFieldNumber\fP = 8, \fBkRoutingFieldNumber\fP = 9, \fBkInitPointFieldNumber\fP = 10, \fBkPredictionHeaderFieldNumber\fP = 16, \fBkSignalLightFieldNumber\fP = 17, \fBkDpPolyGraphFieldNumber\fP = 20, \fBkLatticeStImageFieldNumber\fP = 21, \fBkRelativeMapFieldNumber\fP = 22, \fBkAutoTuningTrainingDataFieldNumber\fP = 23, \fBkScenarioFieldNumber\fP = 26, \fBkOpenSpaceFieldNumber\fP = 27, \fBkSmootherFieldNumber\fP = 28, \fBkPullOverFieldNumber\fP = 29, \fBkHybridModelFieldNumber\fP = 30, \fBkFrontClearDistanceFieldNumber\fP = 24 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBPlanningData\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBPlanningData\fP (const \fBPlanningData\fP &from)"
.br
.ti -1c
.RI "\fBPlanningData\fP (\fBPlanningData\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBPlanningData\fP & \fBoperator=\fP (const \fBPlanningData\fP &from)"
.br
.ti -1c
.RI "\fBPlanningData\fP & \fBoperator=\fP (\fBPlanningData\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBPlanningData\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBPlanningData\fP *other)"
.br
.ti -1c
.RI "\fBPlanningData\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBPlanningData\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBPlanningData\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBpath_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_path\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Path\fP * \fBmutable_path\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::common::Path\fP > * \fBmutable_path\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Path\fP & \fBpath\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::common::Path\fP * \fBadd_path\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::common::Path\fP > & \fBpath\fP () const"
.br
.ti -1c
.RI "int \fBspeed_plan_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_speed_plan\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SpeedPlan\fP * \fBmutable_speed_plan\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::SpeedPlan\fP > * \fBmutable_speed_plan\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::SpeedPlan\fP & \fBspeed_plan\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SpeedPlan\fP * \fBadd_speed_plan\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::SpeedPlan\fP > & \fBspeed_plan\fP () const"
.br
.ti -1c
.RI "int \fBst_graph_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_st_graph\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::STGraphDebug\fP * \fBmutable_st_graph\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::STGraphDebug\fP > * \fBmutable_st_graph\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::STGraphDebug\fP & \fBst_graph\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::STGraphDebug\fP * \fBadd_st_graph\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::STGraphDebug\fP > & \fBst_graph\fP () const"
.br
.ti -1c
.RI "int \fBsl_frame_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_sl_frame\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SLFrameDebug\fP * \fBmutable_sl_frame\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::SLFrameDebug\fP > * \fBmutable_sl_frame\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::SLFrameDebug\fP & \fBsl_frame\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SLFrameDebug\fP * \fBadd_sl_frame\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::SLFrameDebug\fP > & \fBsl_frame\fP () const"
.br
.ti -1c
.RI "int \fBobstacle_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_obstacle\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ObstacleDebug\fP * \fBmutable_obstacle\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::ObstacleDebug\fP > * \fBmutable_obstacle\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::ObstacleDebug\fP & \fBobstacle\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ObstacleDebug\fP * \fBadd_obstacle\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::ObstacleDebug\fP > & \fBobstacle\fP () const"
.br
.ti -1c
.RI "int \fBreference_line_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_reference_line\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ReferenceLineDebug\fP * \fBmutable_reference_line\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::ReferenceLineDebug\fP > * \fBmutable_reference_line\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::ReferenceLineDebug\fP & \fBreference_line\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ReferenceLineDebug\fP * \fBadd_reference_line\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning_internal::ReferenceLineDebug\fP > & \fBreference_line\fP () const"
.br
.ti -1c
.RI "int \fBchart_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_chart\fP ()"
.br
.ti -1c
.RI "::\fBapollo::dreamview::Chart\fP * \fBmutable_chart\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::dreamview::Chart\fP > * \fBmutable_chart\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::dreamview::Chart\fP & \fBchart\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::dreamview::Chart\fP * \fBadd_chart\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::dreamview::Chart\fP > & \fBchart\fP () const"
.br
.ti -1c
.RI "bool \fBhas_adc_position\fP () const"
.br
.ti -1c
.RI "void \fBclear_adc_position\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::localization::LocalizationEstimate\fP & \fBadc_position\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::localization::LocalizationEstimate\fP * \fBrelease_adc_position\fP ()"
.br
.ti -1c
.RI "::\fBapollo::localization::LocalizationEstimate\fP * \fBmutable_adc_position\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_adc_position\fP (::\fBapollo::localization::LocalizationEstimate\fP *adc_position)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_adc_position\fP (::\fBapollo::localization::LocalizationEstimate\fP *adc_position)"
.br
.ti -1c
.RI "::\fBapollo::localization::LocalizationEstimate\fP * \fBunsafe_arena_release_adc_position\fP ()"
.br
.ti -1c
.RI "bool \fBhas_chassis\fP () const"
.br
.ti -1c
.RI "void \fBclear_chassis\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Chassis\fP & \fBchassis\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Chassis\fP * \fBrelease_chassis\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Chassis\fP * \fBmutable_chassis\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_chassis\fP (::\fBapollo::canbus::Chassis\fP *chassis)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_chassis\fP (::\fBapollo::canbus::Chassis\fP *chassis)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Chassis\fP * \fBunsafe_arena_release_chassis\fP ()"
.br
.ti -1c
.RI "bool \fBhas_routing\fP () const"
.br
.ti -1c
.RI "void \fBclear_routing\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::routing::RoutingResponse\fP & \fBrouting\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::routing::RoutingResponse\fP * \fBrelease_routing\fP ()"
.br
.ti -1c
.RI "::\fBapollo::routing::RoutingResponse\fP * \fBmutable_routing\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_routing\fP (::\fBapollo::routing::RoutingResponse\fP *routing)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_routing\fP (::\fBapollo::routing::RoutingResponse\fP *routing)"
.br
.ti -1c
.RI "::\fBapollo::routing::RoutingResponse\fP * \fBunsafe_arena_release_routing\fP ()"
.br
.ti -1c
.RI "bool \fBhas_init_point\fP () const"
.br
.ti -1c
.RI "void \fBclear_init_point\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::TrajectoryPoint\fP & \fBinit_point\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::TrajectoryPoint\fP * \fBrelease_init_point\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::TrajectoryPoint\fP * \fBmutable_init_point\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_init_point\fP (::\fBapollo::common::TrajectoryPoint\fP *init_point)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_init_point\fP (::\fBapollo::common::TrajectoryPoint\fP *init_point)"
.br
.ti -1c
.RI "::\fBapollo::common::TrajectoryPoint\fP * \fBunsafe_arena_release_init_point\fP ()"
.br
.ti -1c
.RI "bool \fBhas_prediction_header\fP () const"
.br
.ti -1c
.RI "void \fBclear_prediction_header\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Header\fP & \fBprediction_header\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Header\fP * \fBrelease_prediction_header\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBmutable_prediction_header\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_prediction_header\fP (::\fBapollo::common::Header\fP *prediction_header)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_prediction_header\fP (::\fBapollo::common::Header\fP *prediction_header)"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBunsafe_arena_release_prediction_header\fP ()"
.br
.ti -1c
.RI "bool \fBhas_signal_light\fP () const"
.br
.ti -1c
.RI "void \fBclear_signal_light\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::SignalLightDebug\fP & \fBsignal_light\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::SignalLightDebug\fP * \fBrelease_signal_light\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SignalLightDebug\fP * \fBmutable_signal_light\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_signal_light\fP (::\fBapollo::planning_internal::SignalLightDebug\fP *signal_light)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_signal_light\fP (::\fBapollo::planning_internal::SignalLightDebug\fP *signal_light)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SignalLightDebug\fP * \fBunsafe_arena_release_signal_light\fP ()"
.br
.ti -1c
.RI "bool \fBhas_dp_poly_graph\fP () const"
.br
.ti -1c
.RI "void \fBclear_dp_poly_graph\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::DpPolyGraphDebug\fP & \fBdp_poly_graph\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::DpPolyGraphDebug\fP * \fBrelease_dp_poly_graph\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::DpPolyGraphDebug\fP * \fBmutable_dp_poly_graph\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_dp_poly_graph\fP (::\fBapollo::planning_internal::DpPolyGraphDebug\fP *dp_poly_graph)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_dp_poly_graph\fP (::\fBapollo::planning_internal::DpPolyGraphDebug\fP *dp_poly_graph)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::DpPolyGraphDebug\fP * \fBunsafe_arena_release_dp_poly_graph\fP ()"
.br
.ti -1c
.RI "bool \fBhas_lattice_st_image\fP () const"
.br
.ti -1c
.RI "void \fBclear_lattice_st_image\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::LatticeStTraining\fP & \fBlattice_st_image\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::LatticeStTraining\fP * \fBrelease_lattice_st_image\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::LatticeStTraining\fP * \fBmutable_lattice_st_image\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_lattice_st_image\fP (::\fBapollo::planning_internal::LatticeStTraining\fP *lattice_st_image)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_lattice_st_image\fP (::\fBapollo::planning_internal::LatticeStTraining\fP *lattice_st_image)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::LatticeStTraining\fP * \fBunsafe_arena_release_lattice_st_image\fP ()"
.br
.ti -1c
.RI "bool \fBhas_relative_map\fP () const"
.br
.ti -1c
.RI "void \fBclear_relative_map\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::relative_map::MapMsg\fP & \fBrelative_map\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::relative_map::MapMsg\fP * \fBrelease_relative_map\fP ()"
.br
.ti -1c
.RI "::\fBapollo::relative_map::MapMsg\fP * \fBmutable_relative_map\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_relative_map\fP (::\fBapollo::relative_map::MapMsg\fP *relative_map)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_relative_map\fP (::\fBapollo::relative_map::MapMsg\fP *relative_map)"
.br
.ti -1c
.RI "::\fBapollo::relative_map::MapMsg\fP * \fBunsafe_arena_release_relative_map\fP ()"
.br
.ti -1c
.RI "bool \fBhas_auto_tuning_training_data\fP () const"
.br
.ti -1c
.RI "void \fBclear_auto_tuning_training_data\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::AutoTuningTrainingData\fP & \fBauto_tuning_training_data\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::AutoTuningTrainingData\fP * \fBrelease_auto_tuning_training_data\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::AutoTuningTrainingData\fP * \fBmutable_auto_tuning_training_data\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_auto_tuning_training_data\fP (::\fBapollo::planning_internal::AutoTuningTrainingData\fP *auto_tuning_training_data)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_auto_tuning_training_data\fP (::\fBapollo::planning_internal::AutoTuningTrainingData\fP *auto_tuning_training_data)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::AutoTuningTrainingData\fP * \fBunsafe_arena_release_auto_tuning_training_data\fP ()"
.br
.ti -1c
.RI "bool \fBhas_scenario\fP () const"
.br
.ti -1c
.RI "void \fBclear_scenario\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::ScenarioDebug\fP & \fBscenario\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::ScenarioDebug\fP * \fBrelease_scenario\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ScenarioDebug\fP * \fBmutable_scenario\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_scenario\fP (::\fBapollo::planning_internal::ScenarioDebug\fP *scenario)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_scenario\fP (::\fBapollo::planning_internal::ScenarioDebug\fP *scenario)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::ScenarioDebug\fP * \fBunsafe_arena_release_scenario\fP ()"
.br
.ti -1c
.RI "bool \fBhas_open_space\fP () const"
.br
.ti -1c
.RI "void \fBclear_open_space\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::OpenSpaceDebug\fP & \fBopen_space\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::OpenSpaceDebug\fP * \fBrelease_open_space\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::OpenSpaceDebug\fP * \fBmutable_open_space\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_open_space\fP (::\fBapollo::planning_internal::OpenSpaceDebug\fP *open_space)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_open_space\fP (::\fBapollo::planning_internal::OpenSpaceDebug\fP *open_space)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::OpenSpaceDebug\fP * \fBunsafe_arena_release_open_space\fP ()"
.br
.ti -1c
.RI "bool \fBhas_smoother\fP () const"
.br
.ti -1c
.RI "void \fBclear_smoother\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::SmootherDebug\fP & \fBsmoother\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::SmootherDebug\fP * \fBrelease_smoother\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SmootherDebug\fP * \fBmutable_smoother\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_smoother\fP (::\fBapollo::planning_internal::SmootherDebug\fP *smoother)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_smoother\fP (::\fBapollo::planning_internal::SmootherDebug\fP *smoother)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::SmootherDebug\fP * \fBunsafe_arena_release_smoother\fP ()"
.br
.ti -1c
.RI "bool \fBhas_pull_over\fP () const"
.br
.ti -1c
.RI "void \fBclear_pull_over\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::PullOverDebug\fP & \fBpull_over\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::PullOverDebug\fP * \fBrelease_pull_over\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::PullOverDebug\fP * \fBmutable_pull_over\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_pull_over\fP (::\fBapollo::planning_internal::PullOverDebug\fP *pull_over)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_pull_over\fP (::\fBapollo::planning_internal::PullOverDebug\fP *pull_over)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::PullOverDebug\fP * \fBunsafe_arena_release_pull_over\fP ()"
.br
.ti -1c
.RI "bool \fBhas_hybrid_model\fP () const"
.br
.ti -1c
.RI "void \fBclear_hybrid_model\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning_internal::HybridModelDebug\fP & \fBhybrid_model\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning_internal::HybridModelDebug\fP * \fBrelease_hybrid_model\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::HybridModelDebug\fP * \fBmutable_hybrid_model\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_hybrid_model\fP (::\fBapollo::planning_internal::HybridModelDebug\fP *hybrid_model)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_hybrid_model\fP (::\fBapollo::planning_internal::HybridModelDebug\fP *hybrid_model)"
.br
.ti -1c
.RI "::\fBapollo::planning_internal::HybridModelDebug\fP * \fBunsafe_arena_release_hybrid_model\fP ()"
.br
.ti -1c
.RI "bool \fBhas_front_clear_distance\fP () const"
.br
.ti -1c
.RI "void \fBclear_front_clear_distance\fP ()"
.br
.ti -1c
.RI "double \fBfront_clear_distance\fP () const"
.br
.ti -1c
.RI "void \fBset_front_clear_distance\fP (double value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBPlanningData\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBPlanningData\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBPlanningData\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fplanning_5fmsgs_2fplanning_5finternal_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBPlanningData\fP &a, \fBPlanningData\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::planning_internal::PlanningData::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningData::MergeImpl
}
.fi
.SS "constexpr int apollo::planning_internal::PlanningData::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    20
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
