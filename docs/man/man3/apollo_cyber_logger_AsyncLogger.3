.TH "apollo::cyber::logger::AsyncLogger" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::logger::AsyncLogger \- Wrapper for a glog \fBLogger\fP which asynchronously writes log messages\&. This class starts a new thread responsible for forwarding the messages to the logger, and performs double buffering\&. Writers append to the current buffer and then wake up the logger thread\&. The logger swaps in a new buffer and writes any accumulated messages to the wrapped \fBLogger\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <async_logger\&.h>\fP
.PP
Inherits \fBgoogle::base::Logger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAsyncLogger\fP (\fBgoogle::base::Logger\fP *wrapped)"
.br
.ti -1c
.RI "void \fBStart\fP ()"
.br
.RI "start the async logger "
.ti -1c
.RI "void \fBStop\fP ()"
.br
.RI "Stop the thread\&. \fBFlush()\fP and \fBWrite()\fP must not be called after this\&. NOTE: this is currently only used in tests: in real life, we enable async logging once when the program starts and then never disable it\&. REQUIRES: \fBStart()\fP must have been called\&. "
.ti -1c
.RI "void \fBWrite\fP (bool force_flush, time_t timestamp, const char *message, int message_len) override"
.br
.RI "Write a message to the log\&. \fBStart()\fP must have been called\&. "
.ti -1c
.RI "void \fBFlush\fP () override"
.br
.RI "Flush any buffered messages\&. "
.ti -1c
.RI "uint32_t \fBLogSize\fP () override"
.br
.RI "Get the current LOG file size\&. The return value is an approximate value since some logged data may not have been flushed to disk yet\&. "
.ti -1c
.RI "std::thread * \fBLogThread\fP ()"
.br
.RI "get the log thead "
.in -1c
.SH "Detailed Description"
.PP 
Wrapper for a glog \fBLogger\fP which asynchronously writes log messages\&. This class starts a new thread responsible for forwarding the messages to the logger, and performs double buffering\&. Writers append to the current buffer and then wake up the logger thread\&. The logger swaps in a new buffer and writes any accumulated messages to the wrapped \fBLogger\fP\&. 

This double-buffering design dramatically improves performance, especially for logging messages which require flushing the underlying file (i\&.e WARNING and above for default)\&. The flush can take a couple of milliseconds, and in some cases can even block for hundreds of milliseconds or more\&. With the double-buffered approach, threads can proceed with useful work while the IO thread blocks\&.
.PP
The semantics provided by this wrapper are slightly weaker than the default glog semantics\&. By default, glog will immediately (synchronously) flush WARNING and above to the underlying file, whereas here we are deferring that flush to a separate thread\&. This means that a crash just after a 'LOG_WARN' would may be missing the message in the logs, but the perf benefit is probably worth it\&. We do take care that a glog FATAL message flushes all buffered log messages before exiting\&.
.PP
\fBWarning\fP
.RS 4
The logger limits the total amount of buffer space, so if the underlying log blocks for too long, eventually the threads generating the log messages will block as well\&. This prevents runaway memory usage\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "uint32_t apollo::cyber::logger::AsyncLogger::LogSize ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Get the current LOG file size\&. The return value is an approximate value since some logged data may not have been flushed to disk yet\&. 
.PP
\fBReturns\fP
.RS 4
the log file size 
.RE
.PP

.PP
Implements \fBgoogle::base::Logger\fP\&.
.SS "std::thread* apollo::cyber::logger::AsyncLogger::LogThread ()\fC [inline]\fP"

.PP
get the log thead 
.PP
\fBReturns\fP
.RS 4
the pointer of log thread 
.RE
.PP

.SS "void apollo::cyber::logger::AsyncLogger::Write (bool force_flush, time_t timestamp, const char * message, int message_len)\fC [override]\fP, \fC [virtual]\fP"

.PP
Write a message to the log\&. \fBStart()\fP must have been called\&. 
.PP
\fBParameters\fP
.RS 4
\fIforce_flush\fP is set by the GLog library based on the configured '--logbuflevel' flag\&. Any messages logged at the configured level or higher result in 'force_flush' being set to true, indicating that the message should be immediately written to the log rather than buffered in memory\&. 
.br
\fItimestamp\fP is the time of write a message 
.br
\fImessage\fP is the info to be written 
.br
\fImessage_len\fP is the length of message 
.RE
.PP

.PP
Implements \fBgoogle::base::Logger\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
