.TH "apollo::cyber::transport::QosProfileConf" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::transport::QosProfileConf
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBQosProfile\fP \fBCreateQosProfile\fP (const QosHistoryPolicy &history, uint32_t depth, uint32_t mps, const QosReliabilityPolicy &reliability, const QosDurabilityPolicy &durability)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const uint32_t \fBQOS_HISTORY_DEPTH_SYSTEM_DEFAULT\fP = 0"
.br
.ti -1c
.RI "static const uint32_t \fBQOS_MPS_SYSTEM_DEFAULT\fP = 0"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_DEFAULT\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_SENSOR_DATA\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_PARAMETERS\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_SERVICES_DEFAULT\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_PARAM_EVENT\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_SYSTEM_DEFAULT\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_TF_STATIC\fP"
.br
.ti -1c
.RI "static const \fBQosProfile\fP \fBQOS_PROFILE_TOPO_CHANGE\fP"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_DEFAULT\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_LAST, 1, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_VOLATILE)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_PARAM_EVENT\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_LAST, 1000, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_VOLATILE)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_PARAMETERS\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_LAST, 1000, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_VOLATILE)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_SENSOR_DATA\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_LAST, 5, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_BEST_EFFORT,
    QosDurabilityPolicy::DURABILITY_VOLATILE)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_SERVICES_DEFAULT\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
    CreateQosProfile(QosHistoryPolicy::HISTORY_KEEP_LAST, 10,
                     QOS_MPS_SYSTEM_DEFAULT,
                     QosReliabilityPolicy::RELIABILITY_RELIABLE,
                     QosDurabilityPolicy::DURABILITY_TRANSIENT_LOCAL)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_SYSTEM_DEFAULT\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_SYSTEM_DEFAULT, QOS_HISTORY_DEPTH_SYSTEM_DEFAULT,
    QOS_MPS_SYSTEM_DEFAULT, QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_TRANSIENT_LOCAL)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_TF_STATIC\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_ALL, 10, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_TRANSIENT_LOCAL)
.fi
.SS "const \fBQosProfile\fP apollo::cyber::transport::QosProfileConf::QOS_PROFILE_TOPO_CHANGE\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= CreateQosProfile(
    QosHistoryPolicy::HISTORY_KEEP_ALL, 10, QOS_MPS_SYSTEM_DEFAULT,
    QosReliabilityPolicy::RELIABILITY_RELIABLE,
    QosDurabilityPolicy::DURABILITY_TRANSIENT_LOCAL)
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
