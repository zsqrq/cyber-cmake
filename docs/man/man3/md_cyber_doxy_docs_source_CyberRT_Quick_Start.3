.TH "md_cyber_doxy_docs_source_CyberRT_Quick_Start" 3 "Thu Aug 31 2023" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_cyber_doxy_docs_source_CyberRT_Quick_Start \- How to Create and Run a new Component in Cyber RT 
Apollo Cyber RT framework is built upon the concept of components\&. As the building block of Cyber RT, each component is a specific algorithm module which processes a set of inputs and generates its set of outputs\&.
.PP
To successfully create and launch a new component, there are basically 4 steps:
.PP
.IP "\(bu" 2
Set up directory layout
.IP "\(bu" 2
Implement the component class
.IP "\(bu" 2
Configuration setup
.IP "\(bu" 2
Launch the component
.PP
.PP
The example below demonstrates how to create, build and run a simple component named \fCCommonComponentExample\fP\&. To explore more about Cyber RT, you can find a couple of examples showing different functionalities of Cyber RT under the \fCcyber/examples\fP directory\&.
.PP
.RS 4
\fBNote\fP: The examples need to run after successfully built within Apollo Docker container\&. 
.RE
.PP
.SH "Set up directry layout"
.PP
Take the sample component under \fCcyber/examples/common_component_example\fP for example:
.PP
.IP "\(bu" 2
Header file: \fBcommon_component_example\&.h\fP
.IP "\(bu" 2
Source file: common_component_example\&.cc
.IP "\(bu" 2
BUILD file: BUILD
.IP "\(bu" 2
DAG file: common\&.dag
.IP "\(bu" 2
Launch file: common\&.launch
.PP
.SH "Implement the sample component class"
.PP
.SS "Header file"
In the header file (\fC\fBcommon_component_example\&.h\fP\fP) for the sample component:
.PP
.IP "\(bu" 2
Inherit the \fCComponent\fP base class
.IP "\(bu" 2
Define your own \fCInit\fP and \fCProc\fP functions\&. Please note that for \fCproc\fP, input data types need to be specified also\&.
.IP "\(bu" 2
Register the sample component class to be globally visible using the \fCCYBER_REGISTER_COMPONENT\fP macro\&.
.PP
.PP
.PP
.nf
#include <memory>

#include "cyber/component/component\&.h"
#include "cyber/examples/proto/examples\&.pb\&.h"

using apollo::cyber::Component;
using apollo::cyber::ComponentBase;
using apollo::cyber::examples::proto::Driver;

class CommonComponentSample : public Component<Driver, Driver> {
 public:
  bool Init() override;
  bool Proc(const std::shared_ptr<Driver>& msg0,
            const std::shared_ptr<Driver>& msg1) override;
};
CYBER_REGISTER_COMPONENT(CommonComponentSample)
.fi
.PP
.SS "Source File"
Implement both the \fCInit\fP and \fCProc\fP functions in \fCcommon_component_example\&.cc\fP:
.PP
.PP
.nf
#include "cyber/examples/common_component_example/common_component_example\&.h"

bool CommonComponentSample::Init() {
  AINFO << "Commontest component init";
  return true;
}

bool CommonComponentSample::Proc(const std::shared_ptr<Driver>& msg0,
                                 const std::shared_ptr<Driver>& msg1) {
  AINFO << "Start common component Proc [" << msg0->msg_id() << "] ["
        << msg1->msg_id() << "]";
  return true;
}
.fi
.PP
.SS "BUILD file"
.PP
.nf
load("@rules_cc//cc:defs\&.bzl", "cc_binary", "cc_library")
load("//tools:cpplint\&.bzl", "cpplint")

package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "libcommon_component_example\&.so",
    linkshared = True,
    linkstatic = False,
    deps = [":common_component_example_lib"],
)

cc_library(
    name = "common_component_example_lib",
    srcs = ["common_component_example\&.cc"],
    hdrs = ["common_component_example\&.h"],
    visibility = ["//visibility:private"],
    deps = [
        "//cyber",
        "//cyber/examples/proto:examples_cc_proto",
    ],
)

cpplint()
.fi
.PP
.SH "Configuration setup"
.PP
.SS "DAG file"
To configure the DAG file (\fCcommon\&.dag\fP here), specify the following items:
.PP
.IP "\(bu" 2
Channel names: for data input and output
.IP "\(bu" 2
Library path: library built from component class
.IP "\(bu" 2
Class name: the class name of the component
.PP
.PP
.PP
.nf
# Define all components in DAG streaming\&.
module_config {
module_library : "/apollo/bazel-bin/cyber/examples/common_component_example/libcommon_component_example\&.so"
components {
    class_name : "CommonComponentSample"
    config {
        name : "common"
        readers {
            channel: "/apollo/prediction"
        }
        readers {
            channel: "/apollo/test"
        }
    }
  }
}
.fi
.PP
.SS "Launch file"
To configure the launch (\fCcommon\&.launch\fP) file, specify the following items:
.PP
.IP "\(bu" 2
The name of the component
.IP "\(bu" 2
The DAG file created in the previous step
.IP "\(bu" 2
The name of the process to run the component
.PP
.PP
.PP
.nf
<cyber>
    <component>
        <name>common</name>
        <dag_conf>/apollo/cyber/examples/common_component_example/common\&.dag</dag_conf>
        <process_name>common</process_name>
    </component>
</cyber>
.fi
.PP
.SH "Launch the component"
.PP
.SS "Build"
Build the sample component by running the command below:
.PP
.PP
.nf
cd /apollo
bash apollo\&.sh build
.fi
.PP
.SS "Environment setup"
Then configure the environment:
.PP
.PP
.nf
source cyber/setup\&.bash

# To see output from terminal
export GLOG_alsologtostderr=1
.fi
.PP
.SS "Launch the component"
You can choose either of the two ways to launch the newly built component:
.PP
.IP "\(bu" 2
Launch with the launch file (recommended)
.PP
.PP
.PP
.nf
cyber_launch start cyber/examples/common_component_example/common\&.launch
.fi
.PP
.PP
.IP "\(bu" 2
Launch with the DAG file
.PP
.PP
.PP
.nf
mainboard -d cyber/examples/common_component_example/common\&.dag
.fi
.PP
.SS "<em>Feed</em> channel data for the component to process"
Open another terminal:
.PP
.PP
.nf
source cyber/setup\&.bash
export GLOG_alsologtostderr=1
/apollo/bazel-bin/cyber/examples/common_component_example/channel_test_writer
.fi
.PP
.PP
Open the 3rd terminal and run:
.PP
.PP
.nf
source cyber/setup\&.bash
export GLOG_alsologtostderr=1
/apollo/bazel-bin/cyber/examples/common_component_example/channel_prediction_writer
.fi
.PP
.PP
And you should see output from terminal #1 like the following:
.PP
.PP
.nf
I0331 16:49:34\&.736016 1774773 common_component_example\&.cc:25] [mainboard]Start common component Proc [1094] [766]
I0331 16:49:35\&.069005 1774775 common_component_example\&.cc:25] [mainboard]Start common component Proc [1095] [767]
I0331 16:49:35\&.402289 1774783 common_component_example\&.cc:25] [mainboard]Start common component Proc [1096] [768]
.fi
.PP
 
