.TH "apollo::canbus::Surround" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::canbus::Surround
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkSonarRangeFieldNumber\fP = 23, \fBkSonarFieldNumber\fP = 24, \fBkCrossTrafficAlertLeftFieldNumber\fP = 1, \fBkCrossTrafficAlertLeftEnabledFieldNumber\fP = 2, \fBkBlindSpotLeftAlertFieldNumber\fP = 3, \fBkBlindSpotLeftAlertEnabledFieldNumber\fP = 4, \fBkCrossTrafficAlertRightFieldNumber\fP = 5, \fBkCrossTrafficAlertRightEnabledFieldNumber\fP = 6, \fBkBlindSpotRightAlertFieldNumber\fP = 7, \fBkBlindSpotRightAlertEnabledFieldNumber\fP = 8, \fBkSonar00FieldNumber\fP = 9, \fBkSonar01FieldNumber\fP = 10, \fBkSonar02FieldNumber\fP = 11, \fBkSonar03FieldNumber\fP = 12, \fBkSonar04FieldNumber\fP = 13, \fBkSonar05FieldNumber\fP = 14, \fBkSonar06FieldNumber\fP = 15, \fBkSonar07FieldNumber\fP = 16, \fBkSonar08FieldNumber\fP = 17, \fBkSonar09FieldNumber\fP = 18, \fBkSonar10FieldNumber\fP = 19, \fBkSonar11FieldNumber\fP = 20, \fBkSonarEnabledFieldNumber\fP = 21, \fBkSonarFaultFieldNumber\fP = 22 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBSurround\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBSurround\fP (const \fBSurround\fP &from)"
.br
.ti -1c
.RI "\fBSurround\fP (\fBSurround\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBSurround\fP & \fBoperator=\fP (const \fBSurround\fP &from)"
.br
.ti -1c
.RI "\fBSurround\fP & \fBoperator=\fP (\fBSurround\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBSurround\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBSurround\fP *other)"
.br
.ti -1c
.RI "\fBSurround\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBSurround\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBSurround\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBsonar_range_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar_range\fP ()"
.br
.ti -1c
.RI "double \fBsonar_range\fP (int index) const"
.br
.ti -1c
.RI "void \fBset_sonar_range\fP (int index, double value)"
.br
.ti -1c
.RI "void \fBadd_sonar_range\fP (double value)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > & \fBsonar_range\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedField< double > * \fBmutable_sonar_range\fP ()"
.br
.ti -1c
.RI "int \fBsonar_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Sonar\fP * \fBmutable_sonar\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::canbus::Sonar\fP > * \fBmutable_sonar\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Sonar\fP & \fBsonar\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::canbus::Sonar\fP * \fBadd_sonar\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::canbus::Sonar\fP > & \fBsonar\fP () const"
.br
.ti -1c
.RI "bool \fBhas_cross_traffic_alert_left\fP () const"
.br
.ti -1c
.RI "void \fBclear_cross_traffic_alert_left\fP ()"
.br
.ti -1c
.RI "bool \fBcross_traffic_alert_left\fP () const"
.br
.ti -1c
.RI "void \fBset_cross_traffic_alert_left\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_cross_traffic_alert_left_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_cross_traffic_alert_left_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBcross_traffic_alert_left_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_cross_traffic_alert_left_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_blind_spot_left_alert\fP () const"
.br
.ti -1c
.RI "void \fBclear_blind_spot_left_alert\fP ()"
.br
.ti -1c
.RI "bool \fBblind_spot_left_alert\fP () const"
.br
.ti -1c
.RI "void \fBset_blind_spot_left_alert\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_blind_spot_left_alert_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_blind_spot_left_alert_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBblind_spot_left_alert_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_blind_spot_left_alert_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_cross_traffic_alert_right\fP () const"
.br
.ti -1c
.RI "void \fBclear_cross_traffic_alert_right\fP ()"
.br
.ti -1c
.RI "bool \fBcross_traffic_alert_right\fP () const"
.br
.ti -1c
.RI "void \fBset_cross_traffic_alert_right\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_cross_traffic_alert_right_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_cross_traffic_alert_right_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBcross_traffic_alert_right_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_cross_traffic_alert_right_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_blind_spot_right_alert\fP () const"
.br
.ti -1c
.RI "void \fBclear_blind_spot_right_alert\fP ()"
.br
.ti -1c
.RI "bool \fBblind_spot_right_alert\fP () const"
.br
.ti -1c
.RI "void \fBset_blind_spot_right_alert\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_blind_spot_right_alert_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_blind_spot_right_alert_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBblind_spot_right_alert_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_blind_spot_right_alert_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_sonar00\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar00\fP ()"
.br
.ti -1c
.RI "double \fBsonar00\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar00\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar01\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar01\fP ()"
.br
.ti -1c
.RI "double \fBsonar01\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar01\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar02\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar02\fP ()"
.br
.ti -1c
.RI "double \fBsonar02\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar02\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar03\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar03\fP ()"
.br
.ti -1c
.RI "double \fBsonar03\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar03\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar04\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar04\fP ()"
.br
.ti -1c
.RI "double \fBsonar04\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar04\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar05\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar05\fP ()"
.br
.ti -1c
.RI "double \fBsonar05\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar05\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar06\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar06\fP ()"
.br
.ti -1c
.RI "double \fBsonar06\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar06\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar07\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar07\fP ()"
.br
.ti -1c
.RI "double \fBsonar07\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar07\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar08\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar08\fP ()"
.br
.ti -1c
.RI "double \fBsonar08\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar08\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar09\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar09\fP ()"
.br
.ti -1c
.RI "double \fBsonar09\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar09\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar10\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar10\fP ()"
.br
.ti -1c
.RI "double \fBsonar10\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar10\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar11\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar11\fP ()"
.br
.ti -1c
.RI "double \fBsonar11\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar11\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_sonar_enabled\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar_enabled\fP ()"
.br
.ti -1c
.RI "bool \fBsonar_enabled\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar_enabled\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_sonar_fault\fP () const"
.br
.ti -1c
.RI "void \fBclear_sonar_fault\fP ()"
.br
.ti -1c
.RI "bool \fBsonar_fault\fP () const"
.br
.ti -1c
.RI "void \fBset_sonar_fault\fP (bool value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBSurround\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBSurround\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSurround\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBSurround\fP &a, \fBSurround\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::canbus::Surround::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Surround::MergeImpl
}
.fi
.SS "constexpr int apollo::canbus::Surround::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    4
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
