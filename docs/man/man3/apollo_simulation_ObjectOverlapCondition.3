.TH "apollo::simulation::ObjectOverlapCondition" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::simulation::ObjectOverlapCondition
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkIgnoreObjectIdsFieldNumber\fP = 5, \fBkSourceObjectIdsFieldNumber\fP = 1, \fBkTargetObjectIdsFieldNumber\fP = 2, \fBkDistanceFieldNumber\fP = 3, \fBkDirectionFieldNumber\fP = 4, \fBkUseScoreFieldNumber\fP = 6 }"
.br
.ti -1c
.RI "typedef ObjectOverlapCondition_DirectionType \fBDirectionType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBObjectOverlapCondition\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBObjectOverlapCondition\fP (const \fBObjectOverlapCondition\fP &from)"
.br
.ti -1c
.RI "\fBObjectOverlapCondition\fP (\fBObjectOverlapCondition\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBObjectOverlapCondition\fP & \fBoperator=\fP (const \fBObjectOverlapCondition\fP &from)"
.br
.ti -1c
.RI "\fBObjectOverlapCondition\fP & \fBoperator=\fP (\fBObjectOverlapCondition\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBObjectOverlapCondition\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBObjectOverlapCondition\fP *other)"
.br
.ti -1c
.RI "\fBObjectOverlapCondition\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBObjectOverlapCondition\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBObjectOverlapCondition\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBignore_object_ids_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_ignore_object_ids\fP ()"
.br
.ti -1c
.RI "const std::string & \fBignore_object_ids\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_ignore_object_ids\fP (int index)"
.br
.ti -1c
.RI "void \fBset_ignore_object_ids\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_ignore_object_ids\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_ignore_object_ids\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_ignore_object_ids\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_ignore_object_ids\fP ()"
.br
.ti -1c
.RI "void \fBadd_ignore_object_ids\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_ignore_object_ids\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_ignore_object_ids\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_ignore_object_ids\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBignore_object_ids\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_ignore_object_ids\fP ()"
.br
.ti -1c
.RI "bool \fBhas_source_object_ids\fP () const"
.br
.ti -1c
.RI "void \fBclear_source_object_ids\fP ()"
.br
.ti -1c
.RI "const std::string & \fBsource_object_ids\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_source_object_ids\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_source_object_ids\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_source_object_ids\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_source_object_ids\fP (std::string *source_object_ids)"
.br
.ti -1c
.RI "bool \fBhas_target_object_ids\fP () const"
.br
.ti -1c
.RI "void \fBclear_target_object_ids\fP ()"
.br
.ti -1c
.RI "const std::string & \fBtarget_object_ids\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_target_object_ids\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_target_object_ids\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_target_object_ids\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_target_object_ids\fP (std::string *target_object_ids)"
.br
.ti -1c
.RI "bool \fBhas_distance\fP () const"
.br
.ti -1c
.RI "void \fBclear_distance\fP ()"
.br
.ti -1c
.RI "double \fBdistance\fP () const"
.br
.ti -1c
.RI "void \fBset_distance\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_direction\fP () const"
.br
.ti -1c
.RI "void \fBclear_direction\fP ()"
.br
.ti -1c
.RI "::apollo::simulation::ObjectOverlapCondition_DirectionType \fBdirection\fP () const"
.br
.ti -1c
.RI "void \fBset_direction\fP (::apollo::simulation::ObjectOverlapCondition_DirectionType value)"
.br
.ti -1c
.RI "bool \fBhas_use_score\fP () const"
.br
.ti -1c
.RI "void \fBclear_use_score\fP ()"
.br
.ti -1c
.RI "bool \fBuse_score\fP () const"
.br
.ti -1c
.RI "void \fBset_use_score\fP (bool value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_source_object_ids\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_target_object_ids\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBObjectOverlapCondition\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBObjectOverlapCondition\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBDirectionType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBDirectionType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBDirectionType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBDirectionType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionType *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr DirectionType \fBEXCLUDE_BACK\fP"
.br
.ti -1c
.RI "static constexpr DirectionType \fBINCLUDE_BACK\fP"
.br
.ti -1c
.RI "static constexpr DirectionType \fBDirectionType_MIN\fP"
.br
.ti -1c
.RI "static constexpr DirectionType \fBDirectionType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBDirectionType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBObjectOverlapCondition\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fgrading_5fcondition_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBObjectOverlapCondition\fP &a, \fBObjectOverlapCondition\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::simulation::ObjectOverlapCondition::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectOverlapCondition::MergeImpl
}
.fi
.SS "constexpr int apollo::simulation::ObjectOverlapCondition::DirectionType_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ObjectOverlapCondition_DirectionType_DirectionType_ARRAYSIZE
.fi
.SS "constexpr ObjectOverlapCondition_DirectionType apollo::simulation::ObjectOverlapCondition::DirectionType_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ObjectOverlapCondition_DirectionType_DirectionType_MAX
.fi
.SS "constexpr ObjectOverlapCondition_DirectionType apollo::simulation::ObjectOverlapCondition::DirectionType_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ObjectOverlapCondition_DirectionType_DirectionType_MIN
.fi
.SS "constexpr ObjectOverlapCondition_DirectionType apollo::simulation::ObjectOverlapCondition::EXCLUDE_BACK\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ObjectOverlapCondition_DirectionType_EXCLUDE_BACK
.fi
.SS "constexpr ObjectOverlapCondition_DirectionType apollo::simulation::ObjectOverlapCondition::INCLUDE_BACK\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ObjectOverlapCondition_DirectionType_INCLUDE_BACK
.fi
.SS "constexpr int apollo::simulation::ObjectOverlapCondition::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    8
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
