.TH "apollo::hdmap::Subsignal" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::hdmap::Subsignal
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkIdFieldNumber\fP = 1, \fBkLocationFieldNumber\fP = 3, \fBkTypeFieldNumber\fP = 2 }"
.br
.ti -1c
.RI "typedef Subsignal_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBSubsignal\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBSubsignal\fP (const \fBSubsignal\fP &from)"
.br
.ti -1c
.RI "\fBSubsignal\fP (\fBSubsignal\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBSubsignal\fP & \fBoperator=\fP (const \fBSubsignal\fP &from)"
.br
.ti -1c
.RI "\fBSubsignal\fP & \fBoperator=\fP (\fBSubsignal\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBSubsignal\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBSubsignal\fP *other)"
.br
.ti -1c
.RI "\fBSubsignal\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBSubsignal\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBSubsignal\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_id\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::hdmap::Id\fP & \fBid\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::hdmap::Id\fP * \fBrelease_id\fP ()"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBmutable_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_id\fP (::\fBapollo::hdmap::Id\fP *id)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_id\fP (::\fBapollo::hdmap::Id\fP *id)"
.br
.ti -1c
.RI "::\fBapollo::hdmap::Id\fP * \fBunsafe_arena_release_id\fP ()"
.br
.ti -1c
.RI "bool \fBhas_location\fP () const"
.br
.ti -1c
.RI "void \fBclear_location\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::PointENU\fP & \fBlocation\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::PointENU\fP * \fBrelease_location\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::PointENU\fP * \fBmutable_location\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_location\fP (::\fBapollo::common::PointENU\fP *location)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_location\fP (::\fBapollo::common::PointENU\fP *location)"
.br
.ti -1c
.RI "::\fBapollo::common::PointENU\fP * \fBunsafe_arena_release_location\fP ()"
.br
.ti -1c
.RI "bool \fBhas_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_type\fP ()"
.br
.ti -1c
.RI "::apollo::hdmap::Subsignal_Type \fBtype\fP () const"
.br
.ti -1c
.RI "void \fBset_type\fP (::apollo::hdmap::Subsignal_Type value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBSubsignal\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBSubsignal\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBUNKNOWN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBCIRCLE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_LEFT\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_FORWARD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_RIGHT\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_LEFT_AND_FORWARD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_RIGHT_AND_FORWARD\fP"
.br
.ti -1c
.RI "static constexpr Type \fBARROW_U_TURN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSubsignal\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fmap_5fmsgs_2fmap_5fsignal_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBSubsignal\fP &a, \fBSubsignal\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::hdmap::Subsignal::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subsignal::MergeImpl
}
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_FORWARD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_FORWARD
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_LEFT\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_LEFT
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_LEFT_AND_FORWARD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_LEFT_AND_FORWARD
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_RIGHT\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_RIGHT
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_RIGHT_AND_FORWARD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_RIGHT_AND_FORWARD
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::ARROW_U_TURN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_ARROW_U_TURN
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::CIRCLE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_CIRCLE
.fi
.SS "constexpr int apollo::hdmap::Subsignal::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr int apollo::hdmap::Subsignal::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_Type_ARRAYSIZE
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_Type_MAX
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_Type_MIN
.fi
.SS "constexpr Subsignal_Type apollo::hdmap::Subsignal::UNKNOWN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Subsignal_Type_UNKNOWN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
