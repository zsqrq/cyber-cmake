.TH "eprosima::fastrtps::rtps::TransportInterface" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eprosima::fastrtps::rtps::TransportInterface
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TransportInterface\&.h>\fP
.PP
Inherited by \fBeprosima::fastrtps::rtps::UDPv4Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv6Transport\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~TransportInterface\fP ()"
.br
.ti -1c
.RI "virtual bool \fBinit\fP ()=0"
.br
.ti -1c
.RI "virtual bool \fBIsOutputChannelOpen\fP (const \fBLocator_t\fP &) const =0"
.br
.ti -1c
.RI "virtual bool \fBIsInputChannelOpen\fP (const \fBLocator_t\fP &) const =0"
.br
.ti -1c
.RI "virtual bool \fBIsLocatorSupported\fP (const \fBLocator_t\fP &) const =0"
.br
.RI "Must report whether the given locator is supported by this transport (typically inspecting its 'kind' value)\&. "
.ti -1c
.RI "virtual \fBLocator_t\fP \fBRemoteToMainLocal\fP (const \fBLocator_t\fP &remote) const =0"
.br
.RI "Returns the locator describing the main (most general) channel that can write to the provided remote locator\&. "
.ti -1c
.RI "virtual bool \fBOpenOutputChannel\fP (\fBLocator_t\fP &)=0"
.br
.ti -1c
.RI "virtual bool \fBOpenInputChannel\fP (const \fBLocator_t\fP &)=0"
.br
.ti -1c
.RI "virtual bool \fBCloseOutputChannel\fP (const \fBLocator_t\fP &)=0"
.br
.ti -1c
.RI "virtual bool \fBCloseInputChannel\fP (const \fBLocator_t\fP &)=0"
.br
.ti -1c
.RI "virtual bool \fBDoLocatorsMatch\fP (const \fBLocator_t\fP &, const \fBLocator_t\fP &) const =0"
.br
.RI "Must report whether two locators map to the same internal channel\&. "
.ti -1c
.RI "virtual bool \fBSend\fP (const octet *sendBuffer, uint32_t sendBufferSize, const \fBLocator_t\fP &localLocator, const \fBLocator_t\fP &remoteLocator)=0"
.br
.ti -1c
.RI "virtual bool \fBReceive\fP (octet *receiveBuffer, uint32_t receiveBufferCapacity, uint32_t &receiveBufferSize, const \fBLocator_t\fP &localLocator, \fBLocator_t\fP &remoteLocator)=0"
.br
.ti -1c
.RI "virtual \fBLocatorList_t\fP \fBNormalizeLocator\fP (const \fBLocator_t\fP &locator)=0"
.br
.ti -1c
.RI "virtual \fBLocatorList_t\fP \fBShrinkLocatorLists\fP (const std::vector< \fBLocatorList_t\fP > &locatorLists)=0"
.br
.ti -1c
.RI "virtual bool \fBis_local_locator\fP (const \fBLocator_t\fP &locator) const =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Interface against which to implement a transport layer, decoupled from FastRTPS internals\&. \fBTransportInterface\fP expects the user to implement a logical equivalence between Locators and protocol-specific 'channels'\&. This equivalence can be narrowing: For instance in UDP/IP, a port would take the role of channel, and several different locators can map to the same port, and hence the same channel\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual eprosima::fastrtps::rtps::TransportInterface::~TransportInterface ()\fC [inline]\fP, \fC [virtual]\fP"
Aside from the API defined here, an user-defined Transport must define a descriptor data type and a constructor that expects a constant reference to such descriptor\&. e\&.g:
.PP
class MyTransport: public: typedef struct { \&.\&.\&. } MyTransportDescriptor; MyTransport(const MyTransportDescriptor&); \&.\&.\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::CloseInputChannel (const \fBLocator_t\fP &)\fC [pure virtual]\fP"
Must close the channel that maps to/from the given locator\&. IMPORTANT: It MUST be safe to call this method even during a Receive operation on another thread\&. You must implement any necessary mutual exclusion and timeout mechanisms to make sure the channel can be closed without damage\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::CloseOutputChannel (const \fBLocator_t\fP &)\fC [pure virtual]\fP"
Must close the channel that maps to/from the given locator\&. IMPORTANT: It MUST be safe to call this method even during a Send operation on another thread\&. You must implement any necessary mutual exclusion and timeout mechanisms to make sure the channel can be closed without damage\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::IsInputChannelOpen (const \fBLocator_t\fP &) const\fC [pure virtual]\fP"
Must report whether the input channel associated to this locator is open\&. Channels must either be fully closed or fully open, so that 'open' and 'close' operations are whole and definitive\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::IsOutputChannelOpen (const \fBLocator_t\fP &) const\fC [pure virtual]\fP"
Must report whether the output channel associated to this locator is open\&. Channels must either be fully closed or fully open, so that 'open' and 'close' operations are whole and definitive\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::OpenOutputChannel (\fBLocator_t\fP &)\fC [pure virtual]\fP"
Must open the channel that maps to/from the given locator\&. This method must allocate, reserve and mark any resources that are needed for said channel\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::Receive (octet * receiveBuffer, uint32_t receiveBufferCapacity, uint32_t & receiveBufferSize, const \fBLocator_t\fP & localLocator, \fBLocator_t\fP & remoteLocator)\fC [pure virtual]\fP"
Must execute a blocking receive, on the inbound channel that maps to the localLocator, receiving from the address that gets written to remoteLocator\&. Must be threadsafe between channels, but not necessarily within the same channel\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, and \fBeprosima::fastrtps::rtps::UDPv4Transport\fP\&.
.SS "virtual bool eprosima::fastrtps::rtps::TransportInterface::Send (const octet * sendBuffer, uint32_t sendBufferSize, const \fBLocator_t\fP & localLocator, const \fBLocator_t\fP & remoteLocator)\fC [pure virtual]\fP"
Must execute a blocking send, through the outbound channel that maps to the localLocator, targeted to the remote address defined by remoteLocator\&. Must be threadsafe between channels, but not necessarily within the same channel\&. 
.PP
Implemented in \fBeprosima::fastrtps::rtps::UDPv6Transport\fP, \fBeprosima::fastrtps::rtps::UDPv4Transport\fP, and \fBeprosima::fastrtps::rtps::test_UDPv4Transport\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
