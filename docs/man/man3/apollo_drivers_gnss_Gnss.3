.TH "apollo::drivers::gnss::Gnss" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::drivers::gnss::Gnss
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkHeaderFieldNumber\fP = 1, \fBkPositionFieldNumber\fP = 4, \fBkPositionStdDevFieldNumber\fP = 5, \fBkLinearVelocityFieldNumber\fP = 6, \fBkLinearVelocityStdDevFieldNumber\fP = 7, \fBkMeasurementTimeFieldNumber\fP = 2, \fBkVelocityLatencyFieldNumber\fP = 3, \fBkNumSatsFieldNumber\fP = 8, \fBkTypeFieldNumber\fP = 9, \fBkSolutionStatusFieldNumber\fP = 10, \fBkPositionTypeFieldNumber\fP = 11 }"
.br
.ti -1c
.RI "typedef Gnss_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBGnss\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBGnss\fP (const \fBGnss\fP &from)"
.br
.ti -1c
.RI "\fBGnss\fP (\fBGnss\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBGnss\fP & \fBoperator=\fP (const \fBGnss\fP &from)"
.br
.ti -1c
.RI "\fBGnss\fP & \fBoperator=\fP (\fBGnss\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBGnss\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBGnss\fP *other)"
.br
.ti -1c
.RI "\fBGnss\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBGnss\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBGnss\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_header\fP () const"
.br
.ti -1c
.RI "void \fBclear_header\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Header\fP & \fBheader\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Header\fP * \fBrelease_header\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBmutable_header\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_header\fP (::\fBapollo::common::Header\fP *header)"
.br
.ti -1c
.RI "::\fBapollo::common::Header\fP * \fBunsafe_arena_release_header\fP ()"
.br
.ti -1c
.RI "bool \fBhas_position\fP () const"
.br
.ti -1c
.RI "void \fBclear_position\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::PointLLH\fP & \fBposition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::PointLLH\fP * \fBrelease_position\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::PointLLH\fP * \fBmutable_position\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_position\fP (::\fBapollo::common::PointLLH\fP *position)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_position\fP (::\fBapollo::common::PointLLH\fP *position)"
.br
.ti -1c
.RI "::\fBapollo::common::PointLLH\fP * \fBunsafe_arena_release_position\fP ()"
.br
.ti -1c
.RI "bool \fBhas_position_std_dev\fP () const"
.br
.ti -1c
.RI "void \fBclear_position_std_dev\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Point3D\fP & \fBposition_std_dev\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Point3D\fP * \fBrelease_position_std_dev\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBmutable_position_std_dev\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_position_std_dev\fP (::\fBapollo::common::Point3D\fP *position_std_dev)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_position_std_dev\fP (::\fBapollo::common::Point3D\fP *position_std_dev)"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBunsafe_arena_release_position_std_dev\fP ()"
.br
.ti -1c
.RI "bool \fBhas_linear_velocity\fP () const"
.br
.ti -1c
.RI "void \fBclear_linear_velocity\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Point3D\fP & \fBlinear_velocity\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Point3D\fP * \fBrelease_linear_velocity\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBmutable_linear_velocity\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_linear_velocity\fP (::\fBapollo::common::Point3D\fP *linear_velocity)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_linear_velocity\fP (::\fBapollo::common::Point3D\fP *linear_velocity)"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBunsafe_arena_release_linear_velocity\fP ()"
.br
.ti -1c
.RI "bool \fBhas_linear_velocity_std_dev\fP () const"
.br
.ti -1c
.RI "void \fBclear_linear_velocity_std_dev\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Point3D\fP & \fBlinear_velocity_std_dev\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Point3D\fP * \fBrelease_linear_velocity_std_dev\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBmutable_linear_velocity_std_dev\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_linear_velocity_std_dev\fP (::\fBapollo::common::Point3D\fP *linear_velocity_std_dev)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_linear_velocity_std_dev\fP (::\fBapollo::common::Point3D\fP *linear_velocity_std_dev)"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBunsafe_arena_release_linear_velocity_std_dev\fP ()"
.br
.ti -1c
.RI "bool \fBhas_measurement_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_measurement_time\fP ()"
.br
.ti -1c
.RI "double \fBmeasurement_time\fP () const"
.br
.ti -1c
.RI "void \fBset_measurement_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_velocity_latency\fP () const"
.br
.ti -1c
.RI "void \fBclear_velocity_latency\fP ()"
.br
.ti -1c
.RI "float \fBvelocity_latency\fP () const"
.br
.ti -1c
.RI "void \fBset_velocity_latency\fP (float value)"
.br
.ti -1c
.RI "bool \fBhas_num_sats\fP () const"
.br
.ti -1c
.RI "void \fBclear_num_sats\fP ()"
.br
.ti -1c
.RI "int32_t \fBnum_sats\fP () const"
.br
.ti -1c
.RI "void \fBset_num_sats\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_type\fP ()"
.br
.ti -1c
.RI "::apollo::drivers::gnss::Gnss_Type \fBtype\fP () const"
.br
.ti -1c
.RI "void \fBset_type\fP (::apollo::drivers::gnss::Gnss_Type value)"
.br
.ti -1c
.RI "bool \fBhas_solution_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_solution_status\fP ()"
.br
.ti -1c
.RI "uint32_t \fBsolution_status\fP () const"
.br
.ti -1c
.RI "void \fBset_solution_status\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_position_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_position_type\fP ()"
.br
.ti -1c
.RI "uint32_t \fBposition_type\fP () const"
.br
.ti -1c
.RI "void \fBset_position_type\fP (uint32_t value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBGnss\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBGnss\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBINVALID\fP"
.br
.ti -1c
.RI "static constexpr Type \fBPROPAGATED\fP"
.br
.ti -1c
.RI "static constexpr Type \fBSINGLE\fP"
.br
.ti -1c
.RI "static constexpr Type \fBPSRDIFF\fP"
.br
.ti -1c
.RI "static constexpr Type \fBPPP\fP"
.br
.ti -1c
.RI "static constexpr Type \fBRTK_FLOAT\fP"
.br
.ti -1c
.RI "static constexpr Type \fBRTK_INTEGER\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBGnss\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fsensor_5fmsgs_2fgnss_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBGnss\fP &a, \fBGnss\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::drivers::gnss::Gnss::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gnss::MergeImpl
}
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::INVALID\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_INVALID
.fi
.SS "constexpr int apollo::drivers::gnss::Gnss::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::PPP\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_PPP
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::PROPAGATED\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_PROPAGATED
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::PSRDIFF\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_PSRDIFF
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::RTK_FLOAT\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_RTK_FLOAT
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::RTK_INTEGER\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_RTK_INTEGER
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::SINGLE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_SINGLE
.fi
.SS "constexpr int apollo::drivers::gnss::Gnss::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_Type_ARRAYSIZE
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_Type_MAX
.fi
.SS "constexpr Gnss_Type apollo::drivers::gnss::Gnss::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Gnss_Type_Type_MIN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
