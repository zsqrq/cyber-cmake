.TH "apollo::cyber::base::AtomicHashMap< K, V, TableSize, type >" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::base::AtomicHashMap< K, V, TableSize, type > \- A implementation of lock-free fixed size hash map\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <atomic_hash_map\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAtomicHashMap\fP (const \fBAtomicHashMap\fP &other)=delete"
.br
.ti -1c
.RI "\fBAtomicHashMap\fP & \fBoperator=\fP (const \fBAtomicHashMap\fP &other)=delete"
.br
.ti -1c
.RI "bool \fBHas\fP (K key)"
.br
.ti -1c
.RI "bool \fBGet\fP (K key, V **value)"
.br
.ti -1c
.RI "bool \fBGet\fP (K key, V *value)"
.br
.ti -1c
.RI "void \fBSet\fP (K key)"
.br
.ti -1c
.RI "void \fBSet\fP (K key, const V &value)"
.br
.ti -1c
.RI "void \fBSet\fP (K key, V &&value)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename K, typename V, std::size_t TableSize = 128, typename std::enable_if< std::is_integral< K >::value &&(TableSize &(TableSize \- 1))==0, int >::type = 0>
.br
class apollo::cyber::base::AtomicHashMap< K, V, TableSize, type >"
A implementation of lock-free fixed size hash map\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIK\fP Type of key, must be integral 
.br
\fIV\fP Type of value 
.br
\fI128\fP Size of hash table 
.br
\fI0\fP Type traits, use for checking types of key & value 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
