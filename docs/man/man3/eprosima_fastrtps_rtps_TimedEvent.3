.TH "eprosima::fastrtps::rtps::TimedEvent" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
eprosima::fastrtps::rtps::TimedEvent
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TimedEvent\&.h>\fP
.PP
Inherited by \fBeprosima::fastrtps::rtps::HeartbeatResponseDelay\fP, \fBeprosima::fastrtps::rtps::InitialAckNack\fP, \fBeprosima::fastrtps::rtps::InitialHeartbeat\fP, \fBeprosima::fastrtps::rtps::NackResponseDelay\fP, \fBeprosima::fastrtps::rtps::NackSupressionDuration\fP, \fBeprosima::fastrtps::rtps::PeriodicHeartbeat\fP, \fBeprosima::fastrtps::rtps::RemoteParticipantLeaseDuration\fP, \fBeprosima::fastrtps::rtps::ResendParticipantProxyDataPeriod\fP, \fBeprosima::fastrtps::rtps::WLivelinessPeriodicAssertion\fP, and \fBeprosima::fastrtps::rtps::WriterProxyLiveliness\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBEventCode\fP { \fBEVENT_SUCCESS\fP, \fBEVENT_ABORT\fP, \fBEVENT_MSG\fP }"
.br
.ti -1c
.RI "enum \fBAUTODESTRUCTION_MODE\fP { \fBNONE\fP, \fBON_SUCCESS\fP, \fBALLWAYS\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTimedEvent\fP (asio::io_service &service, const std::thread &event_thread, double milliseconds, TimedEvent::AUTODESTRUCTION_MODE autodestruction=TimedEvent::NONE)"
.br
.ti -1c
.RI "virtual void \fBevent\fP (\fBEventCode\fP code, const char *msg)=0"
.br
.ti -1c
.RI "void \fBcancel_timer\fP ()"
.br
.ti -1c
.RI "void \fBrestart_timer\fP ()"
.br
.RI "Method to restart the timer\&. "
.ti -1c
.RI "bool \fBupdate_interval\fP (const \fBDuration_t\fP &inter)"
.br
.ti -1c
.RI "bool \fBupdate_interval_millisec\fP (double time_millisec)"
.br
.ti -1c
.RI "double \fBgetIntervalMilliSec\fP ()"
.br
.ti -1c
.RI "double \fBgetRemainingTimeMilliSec\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Timed Event class used to define any timed events\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBeprosima::fastrtps::rtps::TimedEvent::EventCode\fP"
Enum representing event statuses 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "eprosima::fastrtps::rtps::TimedEvent::TimedEvent (asio::io_service & service, const std::thread & event_thread, double milliseconds, TimedEvent::AUTODESTRUCTION_MODE autodestruction = \fCTimedEvent::NONE\fP)"

.PP
\fBParameters\fP
.RS 4
\fIservice\fP IO service to run the event\&. 
.br
\fIevent_thread\fP starting thread for identification\&. 
.br
\fImilliseconds\fP Interval of the timedEvent\&. 
.br
\fIautodestruction\fP Self-destruct mode flag\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void eprosima::fastrtps::rtps::TimedEvent::event (\fBEventCode\fP code, const char * msg)\fC [pure virtual]\fP"
Method invoked when the event occurs\&. Abstract method\&.
.PP
\fBParameters\fP
.RS 4
\fIcode\fP Code representing the status of the event 
.br
\fImsg\fP Message associated to the event\&. It can be nullptr\&. 
.RE
.PP

.PP
Implemented in \fBeprosima::fastrtps::rtps::PeriodicHeartbeat\fP, \fBeprosima::fastrtps::rtps::NackSupressionDuration\fP, \fBeprosima::fastrtps::rtps::NackResponseDelay\fP, \fBeprosima::fastrtps::rtps::InitialHeartbeat\fP, \fBeprosima::fastrtps::rtps::WriterProxyLiveliness\fP, \fBeprosima::fastrtps::rtps::InitialAckNack\fP, \fBeprosima::fastrtps::rtps::HeartbeatResponseDelay\fP, \fBeprosima::fastrtps::rtps::WLivelinessPeriodicAssertion\fP, \fBeprosima::fastrtps::rtps::ResendParticipantProxyDataPeriod\fP, and \fBeprosima::fastrtps::rtps::RemoteParticipantLeaseDuration\fP\&.
.SS "double eprosima::fastrtps::rtps::TimedEvent::getIntervalMilliSec ()"
Get the milliseconds interval 
.PP
\fBReturns\fP
.RS 4
Mulliseconds interval 
.RE
.PP

.SS "double eprosima::fastrtps::rtps::TimedEvent::getRemainingTimeMilliSec ()"
Get the remaining milliseconds for the timer to expire 
.PP
\fBReturns\fP
.RS 4
Remaining milliseconds for the timer to expire 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::TimedEvent::update_interval (const \fBDuration_t\fP & inter)"
Update event interval\&. When updating the interval, the timer is not restarted and the new interval will only be used the next time you call \fBrestart_timer()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIinter\fP New interval for the timedEvent 
.RE
.PP
\fBReturns\fP
.RS 4
true on success 
.RE
.PP

.SS "bool eprosima::fastrtps::rtps::TimedEvent::update_interval_millisec (double time_millisec)"
Update event interval\&. When updating the interval, the timer is not restarted and the new interval will only be used the next time you call \fBrestart_timer()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fItime_millisec\fP New interval for the timedEvent 
.RE
.PP
\fBReturns\fP
.RS 4
true on success 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
