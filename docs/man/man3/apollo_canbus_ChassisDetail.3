.TH "apollo::canbus::ChassisDetail" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::canbus::ChassisDetail
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkBasicFieldNumber\fP = 2, \fBkSafetyFieldNumber\fP = 3, \fBkGearFieldNumber\fP = 4, \fBkEmsFieldNumber\fP = 5, \fBkEspFieldNumber\fP = 6, \fBkGasFieldNumber\fP = 7, \fBkEpbFieldNumber\fP = 8, \fBkBrakeFieldNumber\fP = 9, \fBkDecelerationFieldNumber\fP = 10, \fBkVehicleSpdFieldNumber\fP = 11, \fBkEpsFieldNumber\fP = 12, \fBkLightFieldNumber\fP = 13, \fBkBatteryFieldNumber\fP = 14, \fBkCheckResponseFieldNumber\fP = 15, \fBkLicenseFieldNumber\fP = 16, \fBkSurroundFieldNumber\fP = 17, \fBkVehicleIdFieldNumber\fP = 101, \fBkCarTypeFieldNumber\fP = 1 }"
.br
.ti -1c
.RI "typedef ChassisDetail_Type \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBChassisDetail\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBChassisDetail\fP (const \fBChassisDetail\fP &from)"
.br
.ti -1c
.RI "\fBChassisDetail\fP (\fBChassisDetail\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBChassisDetail\fP & \fBoperator=\fP (const \fBChassisDetail\fP &from)"
.br
.ti -1c
.RI "\fBChassisDetail\fP & \fBoperator=\fP (\fBChassisDetail\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBChassisDetail\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBChassisDetail\fP *other)"
.br
.ti -1c
.RI "\fBChassisDetail\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBChassisDetail\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBChassisDetail\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_basic\fP () const"
.br
.ti -1c
.RI "void \fBclear_basic\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::BasicInfo\fP & \fBbasic\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::BasicInfo\fP * \fBrelease_basic\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::BasicInfo\fP * \fBmutable_basic\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_basic\fP (::\fBapollo::canbus::BasicInfo\fP *basic)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_basic\fP (::\fBapollo::canbus::BasicInfo\fP *basic)"
.br
.ti -1c
.RI "::\fBapollo::canbus::BasicInfo\fP * \fBunsafe_arena_release_basic\fP ()"
.br
.ti -1c
.RI "bool \fBhas_safety\fP () const"
.br
.ti -1c
.RI "void \fBclear_safety\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Safety\fP & \fBsafety\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Safety\fP * \fBrelease_safety\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Safety\fP * \fBmutable_safety\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_safety\fP (::\fBapollo::canbus::Safety\fP *safety)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_safety\fP (::\fBapollo::canbus::Safety\fP *safety)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Safety\fP * \fBunsafe_arena_release_safety\fP ()"
.br
.ti -1c
.RI "bool \fBhas_gear\fP () const"
.br
.ti -1c
.RI "void \fBclear_gear\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Gear\fP & \fBgear\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Gear\fP * \fBrelease_gear\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Gear\fP * \fBmutable_gear\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_gear\fP (::\fBapollo::canbus::Gear\fP *gear)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_gear\fP (::\fBapollo::canbus::Gear\fP *gear)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Gear\fP * \fBunsafe_arena_release_gear\fP ()"
.br
.ti -1c
.RI "bool \fBhas_ems\fP () const"
.br
.ti -1c
.RI "void \fBclear_ems\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Ems\fP & \fBems\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Ems\fP * \fBrelease_ems\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Ems\fP * \fBmutable_ems\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_ems\fP (::\fBapollo::canbus::Ems\fP *ems)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_ems\fP (::\fBapollo::canbus::Ems\fP *ems)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Ems\fP * \fBunsafe_arena_release_ems\fP ()"
.br
.ti -1c
.RI "bool \fBhas_esp\fP () const"
.br
.ti -1c
.RI "void \fBclear_esp\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Esp\fP & \fBesp\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Esp\fP * \fBrelease_esp\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Esp\fP * \fBmutable_esp\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_esp\fP (::\fBapollo::canbus::Esp\fP *esp)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_esp\fP (::\fBapollo::canbus::Esp\fP *esp)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Esp\fP * \fBunsafe_arena_release_esp\fP ()"
.br
.ti -1c
.RI "bool \fBhas_gas\fP () const"
.br
.ti -1c
.RI "void \fBclear_gas\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Gas\fP & \fBgas\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Gas\fP * \fBrelease_gas\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Gas\fP * \fBmutable_gas\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_gas\fP (::\fBapollo::canbus::Gas\fP *gas)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_gas\fP (::\fBapollo::canbus::Gas\fP *gas)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Gas\fP * \fBunsafe_arena_release_gas\fP ()"
.br
.ti -1c
.RI "bool \fBhas_epb\fP () const"
.br
.ti -1c
.RI "void \fBclear_epb\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Epb\fP & \fBepb\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Epb\fP * \fBrelease_epb\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Epb\fP * \fBmutable_epb\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_epb\fP (::\fBapollo::canbus::Epb\fP *epb)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_epb\fP (::\fBapollo::canbus::Epb\fP *epb)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Epb\fP * \fBunsafe_arena_release_epb\fP ()"
.br
.ti -1c
.RI "bool \fBhas_brake\fP () const"
.br
.ti -1c
.RI "void \fBclear_brake\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Brake\fP & \fBbrake\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Brake\fP * \fBrelease_brake\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Brake\fP * \fBmutable_brake\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_brake\fP (::\fBapollo::canbus::Brake\fP *brake)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_brake\fP (::\fBapollo::canbus::Brake\fP *brake)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Brake\fP * \fBunsafe_arena_release_brake\fP ()"
.br
.ti -1c
.RI "bool \fBhas_deceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_deceleration\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Deceleration\fP & \fBdeceleration\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Deceleration\fP * \fBrelease_deceleration\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Deceleration\fP * \fBmutable_deceleration\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_deceleration\fP (::\fBapollo::canbus::Deceleration\fP *deceleration)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_deceleration\fP (::\fBapollo::canbus::Deceleration\fP *deceleration)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Deceleration\fP * \fBunsafe_arena_release_deceleration\fP ()"
.br
.ti -1c
.RI "bool \fBhas_vehicle_spd\fP () const"
.br
.ti -1c
.RI "void \fBclear_vehicle_spd\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::VehicleSpd\fP & \fBvehicle_spd\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::VehicleSpd\fP * \fBrelease_vehicle_spd\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::VehicleSpd\fP * \fBmutable_vehicle_spd\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_vehicle_spd\fP (::\fBapollo::canbus::VehicleSpd\fP *vehicle_spd)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_vehicle_spd\fP (::\fBapollo::canbus::VehicleSpd\fP *vehicle_spd)"
.br
.ti -1c
.RI "::\fBapollo::canbus::VehicleSpd\fP * \fBunsafe_arena_release_vehicle_spd\fP ()"
.br
.ti -1c
.RI "bool \fBhas_eps\fP () const"
.br
.ti -1c
.RI "void \fBclear_eps\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Eps\fP & \fBeps\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Eps\fP * \fBrelease_eps\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Eps\fP * \fBmutable_eps\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_eps\fP (::\fBapollo::canbus::Eps\fP *eps)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_eps\fP (::\fBapollo::canbus::Eps\fP *eps)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Eps\fP * \fBunsafe_arena_release_eps\fP ()"
.br
.ti -1c
.RI "bool \fBhas_light\fP () const"
.br
.ti -1c
.RI "void \fBclear_light\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Light\fP & \fBlight\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Light\fP * \fBrelease_light\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Light\fP * \fBmutable_light\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_light\fP (::\fBapollo::canbus::Light\fP *light)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_light\fP (::\fBapollo::canbus::Light\fP *light)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Light\fP * \fBunsafe_arena_release_light\fP ()"
.br
.ti -1c
.RI "bool \fBhas_battery\fP () const"
.br
.ti -1c
.RI "void \fBclear_battery\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Battery\fP & \fBbattery\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Battery\fP * \fBrelease_battery\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Battery\fP * \fBmutable_battery\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_battery\fP (::\fBapollo::canbus::Battery\fP *battery)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_battery\fP (::\fBapollo::canbus::Battery\fP *battery)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Battery\fP * \fBunsafe_arena_release_battery\fP ()"
.br
.ti -1c
.RI "bool \fBhas_check_response\fP () const"
.br
.ti -1c
.RI "void \fBclear_check_response\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::CheckResponseSignal\fP & \fBcheck_response\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::CheckResponseSignal\fP * \fBrelease_check_response\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::CheckResponseSignal\fP * \fBmutable_check_response\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_check_response\fP (::\fBapollo::canbus::CheckResponseSignal\fP *check_response)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_check_response\fP (::\fBapollo::canbus::CheckResponseSignal\fP *check_response)"
.br
.ti -1c
.RI "::\fBapollo::canbus::CheckResponseSignal\fP * \fBunsafe_arena_release_check_response\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED bool \fBhas_license\fP () const"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBclear_license\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATEDconst ::\fBapollo::canbus::License\fP & \fBlicense\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::\fBapollo::canbus::License\fP * \fBrelease_license\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::canbus::License\fP * \fBmutable_license\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBset_allocated_license\fP (::\fBapollo::canbus::License\fP *license)"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBunsafe_arena_set_allocated_license\fP (::\fBapollo::canbus::License\fP *license)"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::canbus::License\fP * \fBunsafe_arena_release_license\fP ()"
.br
.ti -1c
.RI "bool \fBhas_surround\fP () const"
.br
.ti -1c
.RI "void \fBclear_surround\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::canbus::Surround\fP & \fBsurround\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::canbus::Surround\fP * \fBrelease_surround\fP ()"
.br
.ti -1c
.RI "::\fBapollo::canbus::Surround\fP * \fBmutable_surround\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_surround\fP (::\fBapollo::canbus::Surround\fP *surround)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_surround\fP (::\fBapollo::canbus::Surround\fP *surround)"
.br
.ti -1c
.RI "::\fBapollo::canbus::Surround\fP * \fBunsafe_arena_release_surround\fP ()"
.br
.ti -1c
.RI "bool \fBhas_vehicle_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_vehicle_id\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::VehicleID\fP & \fBvehicle_id\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::VehicleID\fP * \fBrelease_vehicle_id\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::VehicleID\fP * \fBmutable_vehicle_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_vehicle_id\fP (::\fBapollo::common::VehicleID\fP *vehicle_id)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_vehicle_id\fP (::\fBapollo::common::VehicleID\fP *vehicle_id)"
.br
.ti -1c
.RI "::\fBapollo::common::VehicleID\fP * \fBunsafe_arena_release_vehicle_id\fP ()"
.br
.ti -1c
.RI "bool \fBhas_car_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_car_type\fP ()"
.br
.ti -1c
.RI "::apollo::canbus::ChassisDetail_Type \fBcar_type\fP () const"
.br
.ti -1c
.RI "void \fBset_car_type\fP (::apollo::canbus::ChassisDetail_Type value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBChassisDetail\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBChassisDetail\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr Type \fBQIRUI_EQ_15\fP"
.br
.ti -1c
.RI "static constexpr Type \fBCHANGAN_RUICHENG\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MIN\fP"
.br
.ti -1c
.RI "static constexpr Type \fBType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBChassisDetail\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fchassis_5fmsgs_2fchassis_5fdetail_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBChassisDetail\fP &a, \fBChassisDetail\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::canbus::ChassisDetail::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChassisDetail::MergeImpl
}
.fi
.SS "constexpr ChassisDetail_Type apollo::canbus::ChassisDetail::CHANGAN_RUICHENG\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ChassisDetail_Type_CHANGAN_RUICHENG
.fi
.SS "constexpr int apollo::canbus::ChassisDetail::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr ChassisDetail_Type apollo::canbus::ChassisDetail::QIRUI_EQ_15\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ChassisDetail_Type_QIRUI_EQ_15
.fi
.SS "constexpr int apollo::canbus::ChassisDetail::Type_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ChassisDetail_Type_Type_ARRAYSIZE
.fi
.SS "constexpr ChassisDetail_Type apollo::canbus::ChassisDetail::Type_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ChassisDetail_Type_Type_MAX
.fi
.SS "constexpr ChassisDetail_Type apollo::canbus::ChassisDetail::Type_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    ChassisDetail_Type_Type_MIN
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
