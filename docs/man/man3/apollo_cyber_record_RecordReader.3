.TH "apollo::cyber::record::RecordReader" 3 "Thu Aug 31 2023" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::record::RecordReader \- The record reader\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <record_reader\&.h>\fP
.PP
Inherits \fBapollo::cyber::record::RecordBase\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBFileReaderPtr\fP = std::unique_ptr< \fBRecordFileReader\fP >"
.br
.ti -1c
.RI "using \fBChannelInfoMap\fP = std::unordered_map< std::string, proto::ChannelCache >"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRecordReader\fP (const std::string &file)"
.br
.RI "The constructor with record file path as parameter\&. "
.ti -1c
.RI "virtual \fB~RecordReader\fP ()"
.br
.RI "The destructor\&. "
.ti -1c
.RI "bool \fBIsValid\fP () const"
.br
.RI "Is this record reader is valid\&. "
.ti -1c
.RI "bool \fBReadMessage\fP (\fBRecordMessage\fP *message, uint64_t begin_time=0, uint64_t end_time=std::numeric_limits< uint64_t >::max())"
.br
.RI "Read one message from reader\&. "
.ti -1c
.RI "void \fBReset\fP ()"
.br
.RI "Reset the message index of record reader\&. "
.ti -1c
.RI "uint64_t \fBGetMessageNumber\fP (const std::string &channel_name) const override"
.br
.RI "Get message number by channel name\&. "
.ti -1c
.RI "const std::string & \fBGetMessageType\fP (const std::string &channel_name) const override"
.br
.RI "Get message type by channel name\&. "
.ti -1c
.RI "const std::string & \fBGetProtoDesc\fP (const std::string &channel_name) const override"
.br
.RI "Get proto descriptor string by channel name\&. "
.ti -1c
.RI "std::set< std::string > \fBGetChannelList\fP () const override"
.br
.RI "Get channel list\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The record reader\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "apollo::cyber::record::RecordReader::RecordReader (const std::string & file)\fC [explicit]\fP"

.PP
The constructor with record file path as parameter\&. 
.PP
\fBParameters\fP
.RS 4
\fIfile\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "std::set< std::string > apollo::cyber::record::RecordReader::GetChannelList () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Get channel list\&. 
.PP
\fBReturns\fP
.RS 4
List container with all channel name string\&. 
.RE
.PP

.PP
Implements \fBapollo::cyber::record::RecordBase\fP\&.
.SS "uint64_t apollo::cyber::record::RecordReader::GetMessageNumber (const std::string & channel_name) const\fC [override]\fP, \fC [virtual]\fP"

.PP
Get message number by channel name\&. 
.PP
\fBParameters\fP
.RS 4
\fIchannel_name\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fBMessage\fP number\&. 
.RE
.PP

.PP
Implements \fBapollo::cyber::record::RecordBase\fP\&.
.SS "const std::string & apollo::cyber::record::RecordReader::GetMessageType (const std::string & channel_name) const\fC [override]\fP, \fC [virtual]\fP"

.PP
Get message type by channel name\&. 
.PP
\fBParameters\fP
.RS 4
\fIchannel_name\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fBMessage\fP type\&. 
.RE
.PP

.PP
Implements \fBapollo::cyber::record::RecordBase\fP\&.
.SS "const std::string & apollo::cyber::record::RecordReader::GetProtoDesc (const std::string & channel_name) const\fC [override]\fP, \fC [virtual]\fP"

.PP
Get proto descriptor string by channel name\&. 
.PP
\fBParameters\fP
.RS 4
\fIchannel_name\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Proto descriptor string by channel name\&. 
.RE
.PP

.PP
Implements \fBapollo::cyber::record::RecordBase\fP\&.
.SS "bool apollo::cyber::record::RecordReader::IsValid () const\fC [inline]\fP"

.PP
Is this record reader is valid\&. 
.PP
\fBReturns\fP
.RS 4
True for valid, false for not\&. 
.RE
.PP

.SS "bool apollo::cyber::record::RecordReader::ReadMessage (\fBRecordMessage\fP * message, uint64_t begin_time = \fC0\fP, uint64_t end_time = \fCstd::numeric_limits<uint64_t>::max()\fP)"

.PP
Read one message from reader\&. 
.PP
\fBParameters\fP
.RS 4
\fImessage\fP 
.br
\fIbegin_time\fP 
.br
\fIend_time\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True for success, false for not\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
