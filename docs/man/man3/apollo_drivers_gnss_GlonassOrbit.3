.TH "apollo::drivers::gnss::GlonassOrbit" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::drivers::gnss::GlonassOrbit
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkSlotPrnFieldNumber\fP = 2, \fBkYearFieldNumber\fP = 5, \fBkToeFieldNumber\fP = 4, \fBkMonthFieldNumber\fP = 6, \fBkDayFieldNumber\fP = 7, \fBkHourFieldNumber\fP = 8, \fBkMinuteFieldNumber\fP = 9, \fBkSecondSFieldNumber\fP = 10, \fBkFrequencyNoFieldNumber\fP = 11, \fBkWeekNumFieldNumber\fP = 12, \fBkWeekSecondSFieldNumber\fP = 13, \fBkTkFieldNumber\fP = 14, \fBkClockOffsetFieldNumber\fP = 15, \fBkClockDriftFieldNumber\fP = 16, \fBkPositionXFieldNumber\fP = 18, \fBkPositionYFieldNumber\fP = 19, \fBkPositionZFieldNumber\fP = 20, \fBkVelocityXFieldNumber\fP = 21, \fBkVelocityYFieldNumber\fP = 22, \fBkHealthFieldNumber\fP = 17, \fBkSatPrnFieldNumber\fP = 28, \fBkVelocityZFieldNumber\fP = 23, \fBkAccelerateXFieldNumber\fP = 24, \fBkAccelerateYFieldNumber\fP = 25, \fBkAccelerateZFieldNumber\fP = 26, \fBkInforAgeFieldNumber\fP = 27, \fBkGnssTypeFieldNumber\fP = 1, \fBkGnssTimeTypeFieldNumber\fP = 3 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBGlonassOrbit\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBGlonassOrbit\fP (const \fBGlonassOrbit\fP &from)"
.br
.ti -1c
.RI "\fBGlonassOrbit\fP (\fBGlonassOrbit\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBGlonassOrbit\fP & \fBoperator=\fP (const \fBGlonassOrbit\fP &from)"
.br
.ti -1c
.RI "\fBGlonassOrbit\fP & \fBoperator=\fP (\fBGlonassOrbit\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBGlonassOrbit\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBGlonassOrbit\fP *other)"
.br
.ti -1c
.RI "\fBGlonassOrbit\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBGlonassOrbit\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBGlonassOrbit\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_slot_prn\fP () const"
.br
.ti -1c
.RI "void \fBclear_slot_prn\fP ()"
.br
.ti -1c
.RI "uint32_t \fBslot_prn\fP () const"
.br
.ti -1c
.RI "void \fBset_slot_prn\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_year\fP () const"
.br
.ti -1c
.RI "void \fBclear_year\fP ()"
.br
.ti -1c
.RI "uint32_t \fByear\fP () const"
.br
.ti -1c
.RI "void \fBset_year\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_toe\fP () const"
.br
.ti -1c
.RI "void \fBclear_toe\fP ()"
.br
.ti -1c
.RI "double \fBtoe\fP () const"
.br
.ti -1c
.RI "void \fBset_toe\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_month\fP () const"
.br
.ti -1c
.RI "void \fBclear_month\fP ()"
.br
.ti -1c
.RI "uint32_t \fBmonth\fP () const"
.br
.ti -1c
.RI "void \fBset_month\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_day\fP () const"
.br
.ti -1c
.RI "void \fBclear_day\fP ()"
.br
.ti -1c
.RI "uint32_t \fBday\fP () const"
.br
.ti -1c
.RI "void \fBset_day\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_hour\fP () const"
.br
.ti -1c
.RI "void \fBclear_hour\fP ()"
.br
.ti -1c
.RI "uint32_t \fBhour\fP () const"
.br
.ti -1c
.RI "void \fBset_hour\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_minute\fP () const"
.br
.ti -1c
.RI "void \fBclear_minute\fP ()"
.br
.ti -1c
.RI "uint32_t \fBminute\fP () const"
.br
.ti -1c
.RI "void \fBset_minute\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_second_s\fP () const"
.br
.ti -1c
.RI "void \fBclear_second_s\fP ()"
.br
.ti -1c
.RI "double \fBsecond_s\fP () const"
.br
.ti -1c
.RI "void \fBset_second_s\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_frequency_no\fP () const"
.br
.ti -1c
.RI "void \fBclear_frequency_no\fP ()"
.br
.ti -1c
.RI "int32_t \fBfrequency_no\fP () const"
.br
.ti -1c
.RI "void \fBset_frequency_no\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_week_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_week_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBweek_num\fP () const"
.br
.ti -1c
.RI "void \fBset_week_num\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_week_second_s\fP () const"
.br
.ti -1c
.RI "void \fBclear_week_second_s\fP ()"
.br
.ti -1c
.RI "double \fBweek_second_s\fP () const"
.br
.ti -1c
.RI "void \fBset_week_second_s\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_tk\fP () const"
.br
.ti -1c
.RI "void \fBclear_tk\fP ()"
.br
.ti -1c
.RI "double \fBtk\fP () const"
.br
.ti -1c
.RI "void \fBset_tk\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_clock_offset\fP () const"
.br
.ti -1c
.RI "void \fBclear_clock_offset\fP ()"
.br
.ti -1c
.RI "double \fBclock_offset\fP () const"
.br
.ti -1c
.RI "void \fBset_clock_offset\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_clock_drift\fP () const"
.br
.ti -1c
.RI "void \fBclear_clock_drift\fP ()"
.br
.ti -1c
.RI "double \fBclock_drift\fP () const"
.br
.ti -1c
.RI "void \fBset_clock_drift\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_position_x\fP () const"
.br
.ti -1c
.RI "void \fBclear_position_x\fP ()"
.br
.ti -1c
.RI "double \fBposition_x\fP () const"
.br
.ti -1c
.RI "void \fBset_position_x\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_position_y\fP () const"
.br
.ti -1c
.RI "void \fBclear_position_y\fP ()"
.br
.ti -1c
.RI "double \fBposition_y\fP () const"
.br
.ti -1c
.RI "void \fBset_position_y\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_position_z\fP () const"
.br
.ti -1c
.RI "void \fBclear_position_z\fP ()"
.br
.ti -1c
.RI "double \fBposition_z\fP () const"
.br
.ti -1c
.RI "void \fBset_position_z\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_velocity_x\fP () const"
.br
.ti -1c
.RI "void \fBclear_velocity_x\fP ()"
.br
.ti -1c
.RI "double \fBvelocity_x\fP () const"
.br
.ti -1c
.RI "void \fBset_velocity_x\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_velocity_y\fP () const"
.br
.ti -1c
.RI "void \fBclear_velocity_y\fP ()"
.br
.ti -1c
.RI "double \fBvelocity_y\fP () const"
.br
.ti -1c
.RI "void \fBset_velocity_y\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_health\fP () const"
.br
.ti -1c
.RI "void \fBclear_health\fP ()"
.br
.ti -1c
.RI "uint32_t \fBhealth\fP () const"
.br
.ti -1c
.RI "void \fBset_health\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_sat_prn\fP () const"
.br
.ti -1c
.RI "void \fBclear_sat_prn\fP ()"
.br
.ti -1c
.RI "uint32_t \fBsat_prn\fP () const"
.br
.ti -1c
.RI "void \fBset_sat_prn\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_velocity_z\fP () const"
.br
.ti -1c
.RI "void \fBclear_velocity_z\fP ()"
.br
.ti -1c
.RI "double \fBvelocity_z\fP () const"
.br
.ti -1c
.RI "void \fBset_velocity_z\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_accelerate_x\fP () const"
.br
.ti -1c
.RI "void \fBclear_accelerate_x\fP ()"
.br
.ti -1c
.RI "double \fBaccelerate_x\fP () const"
.br
.ti -1c
.RI "void \fBset_accelerate_x\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_accelerate_y\fP () const"
.br
.ti -1c
.RI "void \fBclear_accelerate_y\fP ()"
.br
.ti -1c
.RI "double \fBaccelerate_y\fP () const"
.br
.ti -1c
.RI "void \fBset_accelerate_y\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_accelerate_z\fP () const"
.br
.ti -1c
.RI "void \fBclear_accelerate_z\fP ()"
.br
.ti -1c
.RI "double \fBaccelerate_z\fP () const"
.br
.ti -1c
.RI "void \fBset_accelerate_z\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_infor_age\fP () const"
.br
.ti -1c
.RI "void \fBclear_infor_age\fP ()"
.br
.ti -1c
.RI "double \fBinfor_age\fP () const"
.br
.ti -1c
.RI "void \fBset_infor_age\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_gnss_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_gnss_type\fP ()"
.br
.ti -1c
.RI "::apollo::drivers::gnss::GnssType \fBgnss_type\fP () const"
.br
.ti -1c
.RI "void \fBset_gnss_type\fP (::apollo::drivers::gnss::GnssType value)"
.br
.ti -1c
.RI "bool \fBhas_gnss_time_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_gnss_time_type\fP ()"
.br
.ti -1c
.RI "::apollo::drivers::gnss::GnssTimeType \fBgnss_time_type\fP () const"
.br
.ti -1c
.RI "void \fBset_gnss_time_type\fP (::apollo::drivers::gnss::GnssTimeType value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBGlonassOrbit\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBGlonassOrbit\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBGlonassOrbit\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fsensor_5fmsgs_2fgnss_5fraw_5fobservation_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBGlonassOrbit\fP &a, \fBGlonassOrbit\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::drivers::gnss::GlonassOrbit::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GlonassOrbit::MergeImpl
}
.fi
.SS "constexpr int apollo::drivers::gnss::GlonassOrbit::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    4
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
