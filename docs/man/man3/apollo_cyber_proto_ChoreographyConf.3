.TH "apollo::cyber::proto::ChoreographyConf" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::proto::ChoreographyConf
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkTasksFieldNumber\fP = 11, \fBkChoreographyAffinityFieldNumber\fP = 2, \fBkChoreographyProcessorPolicyFieldNumber\fP = 3, \fBkChoreographyCpusetFieldNumber\fP = 5, \fBkPoolAffinityFieldNumber\fP = 7, \fBkPoolProcessorPolicyFieldNumber\fP = 8, \fBkPoolCpusetFieldNumber\fP = 10, \fBkChoreographyProcessorNumFieldNumber\fP = 1, \fBkChoreographyProcessorPrioFieldNumber\fP = 4, \fBkPoolProcessorNumFieldNumber\fP = 6, \fBkPoolProcessorPrioFieldNumber\fP = 9 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBChoreographyConf\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBChoreographyConf\fP (const \fBChoreographyConf\fP &from)"
.br
.ti -1c
.RI "\fBChoreographyConf\fP (\fBChoreographyConf\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBChoreographyConf\fP & \fBoperator=\fP (const \fBChoreographyConf\fP &from)"
.br
.ti -1c
.RI "\fBChoreographyConf\fP & \fBoperator=\fP (\fBChoreographyConf\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBChoreographyConf\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBChoreographyConf\fP *other)"
.br
.ti -1c
.RI "\fBChoreographyConf\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBChoreographyConf\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBChoreographyConf\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBtasks_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_tasks\fP ()"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ChoreographyTask\fP * \fBmutable_tasks\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::cyber::proto::ChoreographyTask\fP > * \fBmutable_tasks\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::cyber::proto::ChoreographyTask\fP & \fBtasks\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ChoreographyTask\fP * \fBadd_tasks\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::cyber::proto::ChoreographyTask\fP > & \fBtasks\fP () const"
.br
.ti -1c
.RI "bool \fBhas_choreography_affinity\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_affinity\fP ()"
.br
.ti -1c
.RI "const std::string & \fBchoreography_affinity\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_choreography_affinity\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_choreography_affinity\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_choreography_affinity\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_choreography_affinity\fP (std::string *choreography_affinity)"
.br
.ti -1c
.RI "bool \fBhas_choreography_processor_policy\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_processor_policy\fP ()"
.br
.ti -1c
.RI "const std::string & \fBchoreography_processor_policy\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_choreography_processor_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_choreography_processor_policy\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_choreography_processor_policy\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_choreography_processor_policy\fP (std::string *choreography_processor_policy)"
.br
.ti -1c
.RI "bool \fBhas_choreography_cpuset\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_cpuset\fP ()"
.br
.ti -1c
.RI "const std::string & \fBchoreography_cpuset\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_choreography_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_choreography_cpuset\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_choreography_cpuset\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_choreography_cpuset\fP (std::string *choreography_cpuset)"
.br
.ti -1c
.RI "bool \fBhas_pool_affinity\fP () const"
.br
.ti -1c
.RI "void \fBclear_pool_affinity\fP ()"
.br
.ti -1c
.RI "const std::string & \fBpool_affinity\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_pool_affinity\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_pool_affinity\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_pool_affinity\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_pool_affinity\fP (std::string *pool_affinity)"
.br
.ti -1c
.RI "bool \fBhas_pool_processor_policy\fP () const"
.br
.ti -1c
.RI "void \fBclear_pool_processor_policy\fP ()"
.br
.ti -1c
.RI "const std::string & \fBpool_processor_policy\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_pool_processor_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_pool_processor_policy\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_pool_processor_policy\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_pool_processor_policy\fP (std::string *pool_processor_policy)"
.br
.ti -1c
.RI "bool \fBhas_pool_cpuset\fP () const"
.br
.ti -1c
.RI "void \fBclear_pool_cpuset\fP ()"
.br
.ti -1c
.RI "const std::string & \fBpool_cpuset\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_pool_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_pool_cpuset\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_pool_cpuset\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_pool_cpuset\fP (std::string *pool_cpuset)"
.br
.ti -1c
.RI "bool \fBhas_choreography_processor_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_processor_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBchoreography_processor_num\fP () const"
.br
.ti -1c
.RI "void \fBset_choreography_processor_num\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_choreography_processor_prio\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_processor_prio\fP ()"
.br
.ti -1c
.RI "int32_t \fBchoreography_processor_prio\fP () const"
.br
.ti -1c
.RI "void \fBset_choreography_processor_prio\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_pool_processor_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_pool_processor_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBpool_processor_num\fP () const"
.br
.ti -1c
.RI "void \fBset_pool_processor_num\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_pool_processor_prio\fP () const"
.br
.ti -1c
.RI "void \fBclear_pool_processor_prio\fP ()"
.br
.ti -1c
.RI "int32_t \fBpool_processor_prio\fP () const"
.br
.ti -1c
.RI "void \fBset_pool_processor_prio\fP (int32_t value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_choreography_affinity\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_choreography_processor_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_choreography_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_pool_affinity\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_pool_processor_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_pool_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBChoreographyConf\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBChoreographyConf\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBChoreographyConf\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBChoreographyConf\fP &a, \fBChoreographyConf\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::cyber::proto::ChoreographyConf::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChoreographyConf::MergeImpl
}
.fi
.SS "constexpr int apollo::cyber::proto::ChoreographyConf::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    1
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
