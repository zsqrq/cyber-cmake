.TH "apollo::prediction::LanePoint" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::prediction::LanePoint
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkPositionFieldNumber\fP = 1, \fBkHeadingFieldNumber\fP = 2, \fBkWidthFieldNumber\fP = 3, \fBkRelativeSFieldNumber\fP = 4, \fBkRelativeLFieldNumber\fP = 5, \fBkAngleDiffFieldNumber\fP = 6, \fBkKappaFieldNumber\fP = 7, \fBkSpeedLimitFieldNumber\fP = 9, \fBkScenarioTypeFieldNumber\fP = 8 }"
.br
.ti -1c
.RI "typedef LanePoint_ScenarioType \fBScenarioType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBLanePoint\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBLanePoint\fP (const \fBLanePoint\fP &from)"
.br
.ti -1c
.RI "\fBLanePoint\fP (\fBLanePoint\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBLanePoint\fP & \fBoperator=\fP (const \fBLanePoint\fP &from)"
.br
.ti -1c
.RI "\fBLanePoint\fP & \fBoperator=\fP (\fBLanePoint\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBLanePoint\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBLanePoint\fP *other)"
.br
.ti -1c
.RI "\fBLanePoint\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBLanePoint\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBLanePoint\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_position\fP () const"
.br
.ti -1c
.RI "void \fBclear_position\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::Point3D\fP & \fBposition\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::Point3D\fP * \fBrelease_position\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBmutable_position\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_position\fP (::\fBapollo::common::Point3D\fP *position)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_position\fP (::\fBapollo::common::Point3D\fP *position)"
.br
.ti -1c
.RI "::\fBapollo::common::Point3D\fP * \fBunsafe_arena_release_position\fP ()"
.br
.ti -1c
.RI "bool \fBhas_heading\fP () const"
.br
.ti -1c
.RI "void \fBclear_heading\fP ()"
.br
.ti -1c
.RI "double \fBheading\fP () const"
.br
.ti -1c
.RI "void \fBset_heading\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_width\fP () const"
.br
.ti -1c
.RI "void \fBclear_width\fP ()"
.br
.ti -1c
.RI "double \fBwidth\fP () const"
.br
.ti -1c
.RI "void \fBset_width\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_relative_s\fP () const"
.br
.ti -1c
.RI "void \fBclear_relative_s\fP ()"
.br
.ti -1c
.RI "double \fBrelative_s\fP () const"
.br
.ti -1c
.RI "void \fBset_relative_s\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_relative_l\fP () const"
.br
.ti -1c
.RI "void \fBclear_relative_l\fP ()"
.br
.ti -1c
.RI "double \fBrelative_l\fP () const"
.br
.ti -1c
.RI "void \fBset_relative_l\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_angle_diff\fP () const"
.br
.ti -1c
.RI "void \fBclear_angle_diff\fP ()"
.br
.ti -1c
.RI "double \fBangle_diff\fP () const"
.br
.ti -1c
.RI "void \fBset_angle_diff\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_kappa\fP () const"
.br
.ti -1c
.RI "void \fBclear_kappa\fP ()"
.br
.ti -1c
.RI "double \fBkappa\fP () const"
.br
.ti -1c
.RI "void \fBset_kappa\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_speed_limit\fP () const"
.br
.ti -1c
.RI "void \fBclear_speed_limit\fP ()"
.br
.ti -1c
.RI "double \fBspeed_limit\fP () const"
.br
.ti -1c
.RI "void \fBset_speed_limit\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_scenario_type\fP () const"
.br
.ti -1c
.RI "void \fBclear_scenario_type\fP ()"
.br
.ti -1c
.RI "::apollo::prediction::LanePoint_ScenarioType \fBscenario_type\fP () const"
.br
.ti -1c
.RI "void \fBset_scenario_type\fP (::apollo::prediction::LanePoint_ScenarioType value)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBLanePoint\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBLanePoint\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBScenarioType_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBScenarioType_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBScenarioType_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBScenarioType_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScenarioType *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr ScenarioType \fBURBAN_ROAD\fP"
.br
.ti -1c
.RI "static constexpr ScenarioType \fBJUNCTION\fP"
.br
.ti -1c
.RI "static constexpr ScenarioType \fBHIGHWAY\fP"
.br
.ti -1c
.RI "static constexpr ScenarioType \fBScenarioType_MIN\fP"
.br
.ti -1c
.RI "static constexpr ScenarioType \fBScenarioType_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBScenarioType_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBLanePoint\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fprediction_5fmsgs_2flane_5fgraph_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBLanePoint\fP &a, \fBLanePoint\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::prediction::LanePoint::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LanePoint::MergeImpl
}
.fi
.SS "constexpr LanePoint_ScenarioType apollo::prediction::LanePoint::HIGHWAY\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_HIGHWAY
.fi
.SS "constexpr LanePoint_ScenarioType apollo::prediction::LanePoint::JUNCTION\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_JUNCTION
.fi
.SS "constexpr int apollo::prediction::LanePoint::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi
.SS "constexpr int apollo::prediction::LanePoint::ScenarioType_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_ScenarioType_ARRAYSIZE
.fi
.SS "constexpr LanePoint_ScenarioType apollo::prediction::LanePoint::ScenarioType_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_ScenarioType_MAX
.fi
.SS "constexpr LanePoint_ScenarioType apollo::prediction::LanePoint::ScenarioType_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_ScenarioType_MIN
.fi
.SS "constexpr LanePoint_ScenarioType apollo::prediction::LanePoint::URBAN_ROAD\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    LanePoint_ScenarioType_URBAN_ROAD
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
