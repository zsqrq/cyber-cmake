.TH "apollo::planning::MainDecision" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::planning::MainDecision
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTaskCase\fP { \fBkCruise\fP = 1, \fBkStop\fP = 2, \fBkEstop\fP = 3, \fBkChangeLane\fP = 4, \fBkMissionComplete\fP = 6, \fBkNotReady\fP = 7, \fBkParking\fP = 8, \fBTASK_NOT_SET\fP = 0 }"
.br
.ti -1c
.RI "enum : int { \fBkTargetLaneFieldNumber\fP = 5, \fBkCruiseFieldNumber\fP = 1, \fBkStopFieldNumber\fP = 2, \fBkEstopFieldNumber\fP = 3, \fBkChangeLaneFieldNumber\fP = 4, \fBkMissionCompleteFieldNumber\fP = 6, \fBkNotReadyFieldNumber\fP = 7, \fBkParkingFieldNumber\fP = 8 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBMainDecision\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBMainDecision\fP (const \fBMainDecision\fP &from)"
.br
.ti -1c
.RI "\fBMainDecision\fP (\fBMainDecision\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBMainDecision\fP & \fBoperator=\fP (const \fBMainDecision\fP &from)"
.br
.ti -1c
.RI "\fBMainDecision\fP & \fBoperator=\fP (\fBMainDecision\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBMainDecision\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBMainDecision\fP *other)"
.br
.ti -1c
.RI "\fBMainDecision\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBMainDecision\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBMainDecision\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED int \fBtarget_lane_size\fP () const"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBclear_target_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::planning::TargetLane\fP * \fBmutable_target_lane\fP (int index)"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning::TargetLane\fP > * \fBmutable_target_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATEDconst ::\fBapollo::planning::TargetLane\fP & \fBtarget_lane\fP (int index) const"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::planning::TargetLane\fP * \fBadd_target_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::planning::TargetLane\fP > & \fBtarget_lane\fP () const"
.br
.ti -1c
.RI "bool \fBhas_cruise\fP () const"
.br
.ti -1c
.RI "void \fBclear_cruise\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainCruise\fP & \fBcruise\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainCruise\fP * \fBrelease_cruise\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainCruise\fP * \fBmutable_cruise\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_cruise\fP (::\fBapollo::planning::MainCruise\fP *cruise)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_cruise\fP (::\fBapollo::planning::MainCruise\fP *cruise)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainCruise\fP * \fBunsafe_arena_release_cruise\fP ()"
.br
.ti -1c
.RI "bool \fBhas_stop\fP () const"
.br
.ti -1c
.RI "void \fBclear_stop\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainStop\fP & \fBstop\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainStop\fP * \fBrelease_stop\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainStop\fP * \fBmutable_stop\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_stop\fP (::\fBapollo::planning::MainStop\fP *stop)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_stop\fP (::\fBapollo::planning::MainStop\fP *stop)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainStop\fP * \fBunsafe_arena_release_stop\fP ()"
.br
.ti -1c
.RI "bool \fBhas_estop\fP () const"
.br
.ti -1c
.RI "void \fBclear_estop\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainEmergencyStop\fP & \fBestop\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainEmergencyStop\fP * \fBrelease_estop\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainEmergencyStop\fP * \fBmutable_estop\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_estop\fP (::\fBapollo::planning::MainEmergencyStop\fP *estop)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_estop\fP (::\fBapollo::planning::MainEmergencyStop\fP *estop)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainEmergencyStop\fP * \fBunsafe_arena_release_estop\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED bool \fBhas_change_lane\fP () const"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBclear_change_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATEDconst ::\fBapollo::planning::MainChangeLane\fP & \fBchange_lane\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::\fBapollo::planning::MainChangeLane\fP * \fBrelease_change_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::planning::MainChangeLane\fP * \fBmutable_change_lane\fP ()"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBset_allocated_change_lane\fP (::\fBapollo::planning::MainChangeLane\fP *change_lane)"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED void \fBunsafe_arena_set_allocated_change_lane\fP (::\fBapollo::planning::MainChangeLane\fP *change_lane)"
.br
.ti -1c
.RI "PROTOBUF_DEPRECATED ::\fBapollo::planning::MainChangeLane\fP * \fBunsafe_arena_release_change_lane\fP ()"
.br
.ti -1c
.RI "bool \fBhas_mission_complete\fP () const"
.br
.ti -1c
.RI "void \fBclear_mission_complete\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainMissionComplete\fP & \fBmission_complete\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainMissionComplete\fP * \fBrelease_mission_complete\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainMissionComplete\fP * \fBmutable_mission_complete\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_mission_complete\fP (::\fBapollo::planning::MainMissionComplete\fP *mission_complete)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_mission_complete\fP (::\fBapollo::planning::MainMissionComplete\fP *mission_complete)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainMissionComplete\fP * \fBunsafe_arena_release_mission_complete\fP ()"
.br
.ti -1c
.RI "bool \fBhas_not_ready\fP () const"
.br
.ti -1c
.RI "void \fBclear_not_ready\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainNotReady\fP & \fBnot_ready\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainNotReady\fP * \fBrelease_not_ready\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainNotReady\fP * \fBmutable_not_ready\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_not_ready\fP (::\fBapollo::planning::MainNotReady\fP *not_ready)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_not_ready\fP (::\fBapollo::planning::MainNotReady\fP *not_ready)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainNotReady\fP * \fBunsafe_arena_release_not_ready\fP ()"
.br
.ti -1c
.RI "bool \fBhas_parking\fP () const"
.br
.ti -1c
.RI "void \fBclear_parking\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::planning::MainParking\fP & \fBparking\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::planning::MainParking\fP * \fBrelease_parking\fP ()"
.br
.ti -1c
.RI "::\fBapollo::planning::MainParking\fP * \fBmutable_parking\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_parking\fP (::\fBapollo::planning::MainParking\fP *parking)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_parking\fP (::\fBapollo::planning::MainParking\fP *parking)"
.br
.ti -1c
.RI "::\fBapollo::planning::MainParking\fP * \fBunsafe_arena_release_parking\fP ()"
.br
.ti -1c
.RI "void \fBclear_task\fP ()"
.br
.ti -1c
.RI "TaskCase \fBtask_case\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBMainDecision\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBMainDecision\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBMainDecision\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fplanning_5fmsgs_2fdecision_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBMainDecision\fP &a, \fBMainDecision\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::planning::MainDecision::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainDecision::MergeImpl
}
.fi
.SS "constexpr int apollo::planning::MainDecision::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    25
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
