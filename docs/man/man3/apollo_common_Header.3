.TH "apollo::common::Header" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::common::Header
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkModuleNameFieldNumber\fP = 2, \fBkFrameIdFieldNumber\fP = 9, \fBkStatusFieldNumber\fP = 8, \fBkTimestampSecFieldNumber\fP = 1, \fBkLidarTimestampFieldNumber\fP = 4, \fBkCameraTimestampFieldNumber\fP = 5, \fBkRadarTimestampFieldNumber\fP = 6, \fBkSequenceNumFieldNumber\fP = 3, \fBkVersionFieldNumber\fP = 7 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBHeader\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBHeader\fP (const \fBHeader\fP &from)"
.br
.ti -1c
.RI "\fBHeader\fP (\fBHeader\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBHeader\fP & \fBoperator=\fP (const \fBHeader\fP &from)"
.br
.ti -1c
.RI "\fBHeader\fP & \fBoperator=\fP (\fBHeader\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBHeader\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBHeader\fP *other)"
.br
.ti -1c
.RI "\fBHeader\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBHeader\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBHeader\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "bool \fBhas_module_name\fP () const"
.br
.ti -1c
.RI "void \fBclear_module_name\fP ()"
.br
.ti -1c
.RI "const std::string & \fBmodule_name\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_module_name\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_module_name\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_module_name\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_module_name\fP (std::string *module_name)"
.br
.ti -1c
.RI "bool \fBhas_frame_id\fP () const"
.br
.ti -1c
.RI "void \fBclear_frame_id\fP ()"
.br
.ti -1c
.RI "const std::string & \fBframe_id\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_frame_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_frame_id\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_frame_id\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_frame_id\fP (std::string *frame_id)"
.br
.ti -1c
.RI "bool \fBhas_status\fP () const"
.br
.ti -1c
.RI "void \fBclear_status\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::common::StatusPb\fP & \fBstatus\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::common::StatusPb\fP * \fBrelease_status\fP ()"
.br
.ti -1c
.RI "::\fBapollo::common::StatusPb\fP * \fBmutable_status\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_status\fP (::\fBapollo::common::StatusPb\fP *status)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_status\fP (::\fBapollo::common::StatusPb\fP *status)"
.br
.ti -1c
.RI "::\fBapollo::common::StatusPb\fP * \fBunsafe_arena_release_status\fP ()"
.br
.ti -1c
.RI "bool \fBhas_timestamp_sec\fP () const"
.br
.ti -1c
.RI "void \fBclear_timestamp_sec\fP ()"
.br
.ti -1c
.RI "double \fBtimestamp_sec\fP () const"
.br
.ti -1c
.RI "void \fBset_timestamp_sec\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_lidar_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBclear_lidar_timestamp\fP ()"
.br
.ti -1c
.RI "uint64_t \fBlidar_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBset_lidar_timestamp\fP (uint64_t value)"
.br
.ti -1c
.RI "bool \fBhas_camera_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBclear_camera_timestamp\fP ()"
.br
.ti -1c
.RI "uint64_t \fBcamera_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBset_camera_timestamp\fP (uint64_t value)"
.br
.ti -1c
.RI "bool \fBhas_radar_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBclear_radar_timestamp\fP ()"
.br
.ti -1c
.RI "uint64_t \fBradar_timestamp\fP () const"
.br
.ti -1c
.RI "void \fBset_radar_timestamp\fP (uint64_t value)"
.br
.ti -1c
.RI "bool \fBhas_sequence_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_sequence_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBsequence_num\fP () const"
.br
.ti -1c
.RI "void \fBset_sequence_num\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_version\fP () const"
.br
.ti -1c
.RI "void \fBclear_version\fP ()"
.br
.ti -1c
.RI "uint32_t \fBversion\fP () const"
.br
.ti -1c
.RI "void \fBset_version\fP (uint32_t value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_module_name\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_frame_id\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBHeader\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBHeader\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBHeader\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBHeader\fP &a, \fBHeader\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::common::Header::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
}
.fi
.SS "constexpr int apollo::common::Header::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    0
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
