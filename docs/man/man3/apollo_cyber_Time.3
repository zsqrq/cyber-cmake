.TH "apollo::cyber::Time" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::Time \- Cyber has builtin time type \fBTime\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <time\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTime\fP (uint64_t nanoseconds)"
.br
.ti -1c
.RI "\fBTime\fP (int nanoseconds)"
.br
.ti -1c
.RI "\fBTime\fP (double seconds)"
.br
.ti -1c
.RI "\fBTime\fP (uint32_t seconds, uint32_t nanoseconds)"
.br
.ti -1c
.RI "\fBTime\fP (const \fBTime\fP &other)"
.br
.ti -1c
.RI "\fBTime\fP & \fBoperator=\fP (const \fBTime\fP &other)"
.br
.ti -1c
.RI "double \fBToSecond\fP () const"
.br
.RI "convert time to second\&. "
.ti -1c
.RI "uint64_t \fBToMicrosecond\fP () const"
.br
.RI "convert time to microsecond (us)\&. "
.ti -1c
.RI "uint64_t \fBToNanosecond\fP () const"
.br
.RI "convert time to nanosecond\&. "
.ti -1c
.RI "std::string \fBToString\fP () const"
.br
.RI "convert time to a string\&. "
.ti -1c
.RI "bool \fBIsZero\fP () const"
.br
.RI "determine if time is 0 "
.ti -1c
.RI "\fBDuration\fP \fBoperator\-\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "\fBTime\fP \fBoperator+\fP (const \fBDuration\fP &rhs) const"
.br
.ti -1c
.RI "\fBTime\fP \fBoperator\-\fP (const \fBDuration\fP &rhs) const"
.br
.ti -1c
.RI "\fBTime\fP & \fBoperator+=\fP (const \fBDuration\fP &rhs)"
.br
.ti -1c
.RI "\fBTime\fP & \fBoperator\-=\fP (const \fBDuration\fP &rhs)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator>\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBTime\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBTime\fP &rhs) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTime\fP \fBNow\fP ()"
.br
.RI "get the current time\&. "
.ti -1c
.RI "static \fBTime\fP \fBMonoTime\fP ()"
.br
.ti -1c
.RI "static void \fBSleepUntil\fP (const \fBTime\fP &time)"
.br
.RI "Sleep Until time\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const \fBTime\fP \fBMAX\fP = \fBTime\fP(std::numeric_limits<uint64_t>::max())"
.br
.ti -1c
.RI "static const \fBTime\fP \fBMIN\fP = \fBTime\fP(0)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Cyber has builtin time type \fBTime\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool apollo::cyber::Time::IsZero () const"

.PP
determine if time is 0 
.PP
\fBReturns\fP
.RS 4
return true if time is 0 
.RE
.PP

.SS "\fBTime\fP apollo::cyber::Time::Now ()\fC [static]\fP"

.PP
get the current time\&. 
.PP
\fBReturns\fP
.RS 4
return the current time\&. 
.RE
.PP

.SS "void apollo::cyber::Time::SleepUntil (const \fBTime\fP & time)\fC [static]\fP"

.PP
Sleep Until time\&. 
.PP
\fBParameters\fP
.RS 4
\fItime\fP the \fBTime\fP object\&. 
.RE
.PP

.SS "uint64_t apollo::cyber::Time::ToMicrosecond () const"

.PP
convert time to microsecond (us)\&. 
.PP
\fBReturns\fP
.RS 4
return a unit64_t value unit is us\&. 
.RE
.PP

.SS "uint64_t apollo::cyber::Time::ToNanosecond () const"

.PP
convert time to nanosecond\&. 
.PP
\fBReturns\fP
.RS 4
return a unit64_t value unit is nanosecond\&. 
.RE
.PP

.SS "double apollo::cyber::Time::ToSecond () const"

.PP
convert time to second\&. 
.PP
\fBReturns\fP
.RS 4
return a double value unit is second\&. 
.RE
.PP

.SS "std::string apollo::cyber::Time::ToString () const"

.PP
convert time to a string\&. 
.PP
\fBReturns\fP
.RS 4
return a string\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
