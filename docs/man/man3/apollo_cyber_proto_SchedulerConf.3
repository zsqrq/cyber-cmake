.TH "apollo::cyber::proto::SchedulerConf" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::cyber::proto::SchedulerConf
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkThreadsFieldNumber\fP = 5, \fBkPolicyFieldNumber\fP = 1, \fBkProcessLevelCpusetFieldNumber\fP = 4, \fBkClassicConfFieldNumber\fP = 6, \fBkChoreographyConfFieldNumber\fP = 7, \fBkRoutineNumFieldNumber\fP = 2, \fBkDefaultProcNumFieldNumber\fP = 3 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBSchedulerConf\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBSchedulerConf\fP (const \fBSchedulerConf\fP &from)"
.br
.ti -1c
.RI "\fBSchedulerConf\fP (\fBSchedulerConf\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBSchedulerConf\fP & \fBoperator=\fP (const \fBSchedulerConf\fP &from)"
.br
.ti -1c
.RI "\fBSchedulerConf\fP & \fBoperator=\fP (\fBSchedulerConf\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBSchedulerConf\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBSchedulerConf\fP *other)"
.br
.ti -1c
.RI "\fBSchedulerConf\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBSchedulerConf\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBSchedulerConf\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBthreads_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_threads\fP ()"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::InnerThread\fP * \fBmutable_threads\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::cyber::proto::InnerThread\fP > * \fBmutable_threads\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::cyber::proto::InnerThread\fP & \fBthreads\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::InnerThread\fP * \fBadd_threads\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::cyber::proto::InnerThread\fP > & \fBthreads\fP () const"
.br
.ti -1c
.RI "bool \fBhas_policy\fP () const"
.br
.ti -1c
.RI "void \fBclear_policy\fP ()"
.br
.ti -1c
.RI "const std::string & \fBpolicy\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_policy\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_policy\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_policy\fP (std::string *policy)"
.br
.ti -1c
.RI "bool \fBhas_process_level_cpuset\fP () const"
.br
.ti -1c
.RI "void \fBclear_process_level_cpuset\fP ()"
.br
.ti -1c
.RI "const std::string & \fBprocess_level_cpuset\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_process_level_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_process_level_cpuset\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_process_level_cpuset\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_process_level_cpuset\fP (std::string *process_level_cpuset)"
.br
.ti -1c
.RI "bool \fBhas_classic_conf\fP () const"
.br
.ti -1c
.RI "void \fBclear_classic_conf\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::cyber::proto::ClassicConf\fP & \fBclassic_conf\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::cyber::proto::ClassicConf\fP * \fBrelease_classic_conf\fP ()"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ClassicConf\fP * \fBmutable_classic_conf\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_classic_conf\fP (::\fBapollo::cyber::proto::ClassicConf\fP *classic_conf)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_classic_conf\fP (::\fBapollo::cyber::proto::ClassicConf\fP *classic_conf)"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ClassicConf\fP * \fBunsafe_arena_release_classic_conf\fP ()"
.br
.ti -1c
.RI "bool \fBhas_choreography_conf\fP () const"
.br
.ti -1c
.RI "void \fBclear_choreography_conf\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::cyber::proto::ChoreographyConf\fP & \fBchoreography_conf\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::cyber::proto::ChoreographyConf\fP * \fBrelease_choreography_conf\fP ()"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ChoreographyConf\fP * \fBmutable_choreography_conf\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_choreography_conf\fP (::\fBapollo::cyber::proto::ChoreographyConf\fP *choreography_conf)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_choreography_conf\fP (::\fBapollo::cyber::proto::ChoreographyConf\fP *choreography_conf)"
.br
.ti -1c
.RI "::\fBapollo::cyber::proto::ChoreographyConf\fP * \fBunsafe_arena_release_choreography_conf\fP ()"
.br
.ti -1c
.RI "bool \fBhas_routine_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_routine_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBroutine_num\fP () const"
.br
.ti -1c
.RI "void \fBset_routine_num\fP (uint32_t value)"
.br
.ti -1c
.RI "bool \fBhas_default_proc_num\fP () const"
.br
.ti -1c
.RI "void \fBclear_default_proc_num\fP ()"
.br
.ti -1c
.RI "uint32_t \fBdefault_proc_num\fP () const"
.br
.ti -1c
.RI "void \fBset_default_proc_num\fP (uint32_t value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_policy\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_process_level_cpuset\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBSchedulerConf\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBSchedulerConf\fP * \fBinternal_default_instance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSchedulerConf\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_cyber_2fproto_2fscheduler_5fconf_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBSchedulerConf\fP &a, \fBSchedulerConf\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::cyber::proto::SchedulerConf::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchedulerConf::MergeImpl
}
.fi
.SS "constexpr int apollo::cyber::proto::SchedulerConf::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    1
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
