.TH "apollo::simulation::Scenario" 3 "Sun Sep 3 2023" "Version 8.0" "Cyber-Cmake" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apollo::simulation::Scenario
.SH SYNOPSIS
.br
.PP
.PP
Inherits PROTOBUF_NAMESPACE_ID::Message\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB_Internal\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum : int { \fBkOriginLogFilePathFieldNumber\fP = 6, \fBkAgentFieldNumber\fP = 12, \fBkDriveActionConfigFieldNumber\fP = 13, \fBkTrafficLightsFieldNumber\fP = 24, \fBkSelectDefaultMetricFieldNumber\fP = 26, \fBkDeselectDefaultMetricFieldNumber\fP = 27, \fBkNameFieldNumber\fP = 1, \fBkDescriptionFieldNumber\fP = 2, \fBkMapDirFieldNumber\fP = 10, \fBkBaseGradeConfigFileFieldNumber\fP = 18, \fBkVehicleFieldNumber\fP = 29, \fBkStartFieldNumber\fP = 3, \fBkEndFieldNumber\fP = 4, \fBkParkingPointFieldNumber\fP = 5, \fBkRoutingRequestFieldNumber\fP = 9, \fBkGradeConfigFieldNumber\fP = 11, \fBkFuzzingConfigFieldNumber\fP = 14, \fBkLogFileStartTimeFieldNumber\fP = 7, \fBkLogFileEndTimeFieldNumber\fP = 8, \fBkStartVelocityFieldNumber\fP = 16, \fBkStartAccelerationFieldNumber\fP = 17, \fBkSimulatorTimeFieldNumber\fP = 15, \fBkDefaultLightBehaviorFieldNumber\fP = 20, \fBkModeFieldNumber\fP = 25, \fBkTrafficFlowFieldNumber\fP = 30, \fBkDetectDistanceFieldNumber\fP = 19, \fBkRedTimeFieldNumber\fP = 21, \fBkGreenTimeFieldNumber\fP = 22, \fBkYellowTimeFieldNumber\fP = 23, \fBkBacktrackTimeFieldNumber\fP = 28 }"
.br
.ti -1c
.RI "typedef \fBScenario_Point\fP \fBPoint\fP"
.br
.ti -1c
.RI "typedef \fBScenario_TL\fP \fBTL\fP"
.br
.ti -1c
.RI "typedef Scenario_DefaultLightBehavior \fBDefaultLightBehavior\fP"
.br
.ti -1c
.RI "typedef Scenario_Mode \fBMode\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "constexpr \fBScenario\fP (::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)"
.br
.ti -1c
.RI "\fBScenario\fP (const \fBScenario\fP &from)"
.br
.ti -1c
.RI "\fBScenario\fP (\fBScenario\fP &&from) noexcept"
.br
.ti -1c
.RI "\fBScenario\fP & \fBoperator=\fP (const \fBScenario\fP &from)"
.br
.ti -1c
.RI "\fBScenario\fP & \fBoperator=\fP (\fBScenario\fP &&from) noexcept"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet & \fBunknown_fields\fP () const"
.br
.ti -1c
.RI "inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet * \fBmutable_unknown_fields\fP ()"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBScenario\fP *other)"
.br
.ti -1c
.RI "void \fBUnsafeArenaSwap\fP (\fBScenario\fP *other)"
.br
.ti -1c
.RI "\fBScenario\fP * \fBNew\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena=nullptr) const final"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (const \fBScenario\fP &from)"
.br
.ti -1c
.RI "void \fBMergeFrom\fP (const \fBScenario\fP &from)"
.br
.ti -1c
.RI "PROTOBUF_ATTRIBUTE_REINITIALIZES void \fBClear\fP () final"
.br
.ti -1c
.RI "bool \fBIsInitialized\fP () const final"
.br
.ti -1c
.RI "size_t \fBByteSizeLong\fP () const final"
.br
.ti -1c
.RI "const char * \fB_InternalParse\fP (const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final"
.br
.ti -1c
.RI "uint8_t * \fB_InternalSerialize\fP (uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final"
.br
.ti -1c
.RI "int \fBGetCachedSize\fP () const final"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData * \fBGetClassData\fP () const final"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::Metadata \fBGetMetadata\fP () const final"
.br
.ti -1c
.RI "int \fBorigin_log_file_path_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_origin_log_file_path\fP ()"
.br
.ti -1c
.RI "const std::string & \fBorigin_log_file_path\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_origin_log_file_path\fP (int index)"
.br
.ti -1c
.RI "void \fBset_origin_log_file_path\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_origin_log_file_path\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_origin_log_file_path\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_origin_log_file_path\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_origin_log_file_path\fP ()"
.br
.ti -1c
.RI "void \fBadd_origin_log_file_path\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_origin_log_file_path\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_origin_log_file_path\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_origin_log_file_path\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBorigin_log_file_path\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_origin_log_file_path\fP ()"
.br
.ti -1c
.RI "int \fBagent_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_agent\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::AgentConfig\fP * \fBmutable_agent\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::AgentConfig\fP > * \fBmutable_agent\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::AgentConfig\fP & \fBagent\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::simulation::AgentConfig\fP * \fBadd_agent\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::AgentConfig\fP > & \fBagent\fP () const"
.br
.ti -1c
.RI "int \fBdrive_action_config_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_drive_action_config\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::DriveActionConfig\fP * \fBmutable_drive_action_config\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::DriveActionConfig\fP > * \fBmutable_drive_action_config\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::DriveActionConfig\fP & \fBdrive_action_config\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::simulation::DriveActionConfig\fP * \fBadd_drive_action_config\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::DriveActionConfig\fP > & \fBdrive_action_config\fP () const"
.br
.ti -1c
.RI "int \fBtraffic_lights_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_traffic_lights\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_TL\fP * \fBmutable_traffic_lights\fP (int index)"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::Scenario_TL\fP > * \fBmutable_traffic_lights\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::Scenario_TL\fP & \fBtraffic_lights\fP (int index) const"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_TL\fP * \fBadd_traffic_lights\fP ()"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::\fBapollo::simulation::Scenario_TL\fP > & \fBtraffic_lights\fP () const"
.br
.ti -1c
.RI "int \fBselect_default_metric_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_select_default_metric\fP ()"
.br
.ti -1c
.RI "const std::string & \fBselect_default_metric\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_select_default_metric\fP (int index)"
.br
.ti -1c
.RI "void \fBset_select_default_metric\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_select_default_metric\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_select_default_metric\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_select_default_metric\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_select_default_metric\fP ()"
.br
.ti -1c
.RI "void \fBadd_select_default_metric\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_select_default_metric\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_select_default_metric\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_select_default_metric\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBselect_default_metric\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_select_default_metric\fP ()"
.br
.ti -1c
.RI "int \fBdeselect_default_metric_size\fP () const"
.br
.ti -1c
.RI "void \fBclear_deselect_default_metric\fP ()"
.br
.ti -1c
.RI "const std::string & \fBdeselect_default_metric\fP (int index) const"
.br
.ti -1c
.RI "std::string * \fBmutable_deselect_default_metric\fP (int index)"
.br
.ti -1c
.RI "void \fBset_deselect_default_metric\fP (int index, const std::string &value)"
.br
.ti -1c
.RI "void \fBset_deselect_default_metric\fP (int index, std::string &&value)"
.br
.ti -1c
.RI "void \fBset_deselect_default_metric\fP (int index, const char *value)"
.br
.ti -1c
.RI "void \fBset_deselect_default_metric\fP (int index, const char *value, size_t size)"
.br
.ti -1c
.RI "std::string * \fBadd_deselect_default_metric\fP ()"
.br
.ti -1c
.RI "void \fBadd_deselect_default_metric\fP (const std::string &value)"
.br
.ti -1c
.RI "void \fBadd_deselect_default_metric\fP (std::string &&value)"
.br
.ti -1c
.RI "void \fBadd_deselect_default_metric\fP (const char *value)"
.br
.ti -1c
.RI "void \fBadd_deselect_default_metric\fP (const char *value, size_t size)"
.br
.ti -1c
.RI "const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > & \fBdeselect_default_metric\fP () const"
.br
.ti -1c
.RI "::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > * \fBmutable_deselect_default_metric\fP ()"
.br
.ti -1c
.RI "bool \fBhas_name\fP () const"
.br
.ti -1c
.RI "void \fBclear_name\fP ()"
.br
.ti -1c
.RI "const std::string & \fBname\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_name\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_name\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_name\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_name\fP (std::string *name)"
.br
.ti -1c
.RI "bool \fBhas_description\fP () const"
.br
.ti -1c
.RI "void \fBclear_description\fP ()"
.br
.ti -1c
.RI "const std::string & \fBdescription\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_description\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_description\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_description\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_description\fP (std::string *description)"
.br
.ti -1c
.RI "bool \fBhas_map_dir\fP () const"
.br
.ti -1c
.RI "void \fBclear_map_dir\fP ()"
.br
.ti -1c
.RI "const std::string & \fBmap_dir\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_map_dir\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_map_dir\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_map_dir\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_map_dir\fP (std::string *map_dir)"
.br
.ti -1c
.RI "bool \fBhas_base_grade_config_file\fP () const"
.br
.ti -1c
.RI "void \fBclear_base_grade_config_file\fP ()"
.br
.ti -1c
.RI "const std::string & \fBbase_grade_config_file\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_base_grade_config_file\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_base_grade_config_file\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_base_grade_config_file\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_base_grade_config_file\fP (std::string *base_grade_config_file)"
.br
.ti -1c
.RI "bool \fBhas_vehicle\fP () const"
.br
.ti -1c
.RI "void \fBclear_vehicle\fP ()"
.br
.ti -1c
.RI "const std::string & \fBvehicle\fP () const"
.br
.ti -1c
.RI "template<typename ArgT0  = const std::string&, typename\&.\&.\&. ArgT> void \fBset_vehicle\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "std::string * \fBmutable_vehicle\fP ()"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD std::string * \fBrelease_vehicle\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_vehicle\fP (std::string *vehicle)"
.br
.ti -1c
.RI "bool \fBhas_start\fP () const"
.br
.ti -1c
.RI "void \fBclear_start\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::Scenario_Point\fP & \fBstart\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::Scenario_Point\fP * \fBrelease_start\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBmutable_start\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_start\fP (::\fBapollo::simulation::Scenario_Point\fP *start)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_start\fP (::\fBapollo::simulation::Scenario_Point\fP *start)"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBunsafe_arena_release_start\fP ()"
.br
.ti -1c
.RI "bool \fBhas_end\fP () const"
.br
.ti -1c
.RI "void \fBclear_end\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::Scenario_Point\fP & \fBend\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::Scenario_Point\fP * \fBrelease_end\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBmutable_end\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_end\fP (::\fBapollo::simulation::Scenario_Point\fP *end)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_end\fP (::\fBapollo::simulation::Scenario_Point\fP *end)"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBunsafe_arena_release_end\fP ()"
.br
.ti -1c
.RI "bool \fBhas_parking_point\fP () const"
.br
.ti -1c
.RI "void \fBclear_parking_point\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::Scenario_Point\fP & \fBparking_point\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::Scenario_Point\fP * \fBrelease_parking_point\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBmutable_parking_point\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_parking_point\fP (::\fBapollo::simulation::Scenario_Point\fP *parking_point)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_parking_point\fP (::\fBapollo::simulation::Scenario_Point\fP *parking_point)"
.br
.ti -1c
.RI "::\fBapollo::simulation::Scenario_Point\fP * \fBunsafe_arena_release_parking_point\fP ()"
.br
.ti -1c
.RI "bool \fBhas_routing_request\fP () const"
.br
.ti -1c
.RI "void \fBclear_routing_request\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::routing::RoutingRequest\fP & \fBrouting_request\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::routing::RoutingRequest\fP * \fBrelease_routing_request\fP ()"
.br
.ti -1c
.RI "::\fBapollo::routing::RoutingRequest\fP * \fBmutable_routing_request\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_routing_request\fP (::\fBapollo::routing::RoutingRequest\fP *routing_request)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_routing_request\fP (::\fBapollo::routing::RoutingRequest\fP *routing_request)"
.br
.ti -1c
.RI "::\fBapollo::routing::RoutingRequest\fP * \fBunsafe_arena_release_routing_request\fP ()"
.br
.ti -1c
.RI "bool \fBhas_grade_config\fP () const"
.br
.ti -1c
.RI "void \fBclear_grade_config\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::GradingConfig\fP & \fBgrade_config\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::GradingConfig\fP * \fBrelease_grade_config\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::GradingConfig\fP * \fBmutable_grade_config\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_grade_config\fP (::\fBapollo::simulation::GradingConfig\fP *grade_config)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_grade_config\fP (::\fBapollo::simulation::GradingConfig\fP *grade_config)"
.br
.ti -1c
.RI "::\fBapollo::simulation::GradingConfig\fP * \fBunsafe_arena_release_grade_config\fP ()"
.br
.ti -1c
.RI "bool \fBhas_fuzzing_config\fP () const"
.br
.ti -1c
.RI "void \fBclear_fuzzing_config\fP ()"
.br
.ti -1c
.RI "const ::\fBapollo::simulation::FuzzingConfig\fP & \fBfuzzing_config\fP () const"
.br
.ti -1c
.RI "PROTOBUF_NODISCARD ::\fBapollo::simulation::FuzzingConfig\fP * \fBrelease_fuzzing_config\fP ()"
.br
.ti -1c
.RI "::\fBapollo::simulation::FuzzingConfig\fP * \fBmutable_fuzzing_config\fP ()"
.br
.ti -1c
.RI "void \fBset_allocated_fuzzing_config\fP (::\fBapollo::simulation::FuzzingConfig\fP *fuzzing_config)"
.br
.ti -1c
.RI "void \fBunsafe_arena_set_allocated_fuzzing_config\fP (::\fBapollo::simulation::FuzzingConfig\fP *fuzzing_config)"
.br
.ti -1c
.RI "::\fBapollo::simulation::FuzzingConfig\fP * \fBunsafe_arena_release_fuzzing_config\fP ()"
.br
.ti -1c
.RI "bool \fBhas_log_file_start_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_log_file_start_time\fP ()"
.br
.ti -1c
.RI "double \fBlog_file_start_time\fP () const"
.br
.ti -1c
.RI "void \fBset_log_file_start_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_log_file_end_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_log_file_end_time\fP ()"
.br
.ti -1c
.RI "double \fBlog_file_end_time\fP () const"
.br
.ti -1c
.RI "void \fBset_log_file_end_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_start_velocity\fP () const"
.br
.ti -1c
.RI "void \fBclear_start_velocity\fP ()"
.br
.ti -1c
.RI "double \fBstart_velocity\fP () const"
.br
.ti -1c
.RI "void \fBset_start_velocity\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_start_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBclear_start_acceleration\fP ()"
.br
.ti -1c
.RI "double \fBstart_acceleration\fP () const"
.br
.ti -1c
.RI "void \fBset_start_acceleration\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_simulator_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_simulator_time\fP ()"
.br
.ti -1c
.RI "int32_t \fBsimulator_time\fP () const"
.br
.ti -1c
.RI "void \fBset_simulator_time\fP (int32_t value)"
.br
.ti -1c
.RI "bool \fBhas_default_light_behavior\fP () const"
.br
.ti -1c
.RI "void \fBclear_default_light_behavior\fP ()"
.br
.ti -1c
.RI "::apollo::simulation::Scenario_DefaultLightBehavior \fBdefault_light_behavior\fP () const"
.br
.ti -1c
.RI "void \fBset_default_light_behavior\fP (::apollo::simulation::Scenario_DefaultLightBehavior value)"
.br
.ti -1c
.RI "bool \fBhas_mode\fP () const"
.br
.ti -1c
.RI "void \fBclear_mode\fP ()"
.br
.ti -1c
.RI "::apollo::simulation::Scenario_Mode \fBmode\fP () const"
.br
.ti -1c
.RI "void \fBset_mode\fP (::apollo::simulation::Scenario_Mode value)"
.br
.ti -1c
.RI "bool \fBhas_traffic_flow\fP () const"
.br
.ti -1c
.RI "void \fBclear_traffic_flow\fP ()"
.br
.ti -1c
.RI "bool \fBtraffic_flow\fP () const"
.br
.ti -1c
.RI "void \fBset_traffic_flow\fP (bool value)"
.br
.ti -1c
.RI "bool \fBhas_detect_distance\fP () const"
.br
.ti -1c
.RI "void \fBclear_detect_distance\fP ()"
.br
.ti -1c
.RI "double \fBdetect_distance\fP () const"
.br
.ti -1c
.RI "void \fBset_detect_distance\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_red_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_red_time\fP ()"
.br
.ti -1c
.RI "double \fBred_time\fP () const"
.br
.ti -1c
.RI "void \fBset_red_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_green_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_green_time\fP ()"
.br
.ti -1c
.RI "double \fBgreen_time\fP () const"
.br
.ti -1c
.RI "void \fBset_green_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_yellow_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_yellow_time\fP ()"
.br
.ti -1c
.RI "double \fByellow_time\fP () const"
.br
.ti -1c
.RI "void \fBset_yellow_time\fP (double value)"
.br
.ti -1c
.RI "bool \fBhas_backtrack_time\fP () const"
.br
.ti -1c
.RI "void \fBclear_backtrack_time\fP ()"
.br
.ti -1c
.RI "double \fBbacktrack_time\fP () const"
.br
.ti -1c
.RI "void \fBset_backtrack_time\fP (double value)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_name\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_description\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_map_dir\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_base_grade_config_file\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename ArgT0 , typename\&.\&.\&. ArgT> PROTOBUF_ALWAYS_INLINE void \fBset_vehicle\fP (ArgT0 &&arg0, ArgT\&.\&.\&. args)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBdescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Descriptor * \fBGetDescriptor\fP ()"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::Reflection * \fBGetReflection\fP ()"
.br
.ti -1c
.RI "static const \fBScenario\fP & \fBdefault_instance\fP ()"
.br
.ti -1c
.RI "static const \fBScenario\fP * \fBinternal_default_instance\fP ()"
.br
.ti -1c
.RI "static bool \fBDefaultLightBehavior_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBDefaultLightBehavior_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBDefaultLightBehavior_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBDefaultLightBehavior_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DefaultLightBehavior *value)"
.br
.ti -1c
.RI "static bool \fBMode_IsValid\fP (int value)"
.br
.ti -1c
.RI "static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor * \fBMode_descriptor\fP ()"
.br
.ti -1c
.RI "template<typename T > static const std::string & \fBMode_Name\fP (T enum_t_value)"
.br
.ti -1c
.RI "static bool \fBMode_Parse\fP (::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mode *value)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr int \fBkIndexInFileMessages\fP"
.br
.ti -1c
.RI "static const ClassData \fB_class_data_\fP"
.br
.ti -1c
.RI "static constexpr DefaultLightBehavior \fBALWAYS_GREEN\fP"
.br
.ti -1c
.RI "static constexpr DefaultLightBehavior \fBCYCLICAL\fP"
.br
.ti -1c
.RI "static constexpr DefaultLightBehavior \fBDefaultLightBehavior_MIN\fP"
.br
.ti -1c
.RI "static constexpr DefaultLightBehavior \fBDefaultLightBehavior_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBDefaultLightBehavior_ARRAYSIZE\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBWORLDSIM\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBLOGSIM\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBLOGSIM_CONTROL\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBLOGSIM_PERCEPTION\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBMode_MIN\fP"
.br
.ti -1c
.RI "static constexpr Mode \fBMode_MAX\fP"
.br
.ti -1c
.RI "static constexpr int \fBMode_ARRAYSIZE\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBScenario\fP (::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fB::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata\fP"
.br
.ti -1c
.RI "template<typename T > class \fB::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper\fP"
.br
.ti -1c
.RI "struct \fB::TableStruct_modules_2fcommon_5fmsgs_2fsimulation_5fmsgs_2fscenario_2eproto\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBScenario\fP &a, \fBScenario\fP &b)"
.br
.in -1c
.SH "Member Data Documentation"
.PP 
.SS "const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apollo::simulation::Scenario::_class_data_\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scenario::MergeImpl
}
.fi
.SS "constexpr Scenario_DefaultLightBehavior apollo::simulation::Scenario::ALWAYS_GREEN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_DefaultLightBehavior_ALWAYS_GREEN
.fi
.SS "constexpr Scenario_DefaultLightBehavior apollo::simulation::Scenario::CYCLICAL\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_DefaultLightBehavior_CYCLICAL
.fi
.SS "constexpr int apollo::simulation::Scenario::DefaultLightBehavior_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_DefaultLightBehavior_DefaultLightBehavior_ARRAYSIZE
.fi
.SS "constexpr Scenario_DefaultLightBehavior apollo::simulation::Scenario::DefaultLightBehavior_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_DefaultLightBehavior_DefaultLightBehavior_MAX
.fi
.SS "constexpr Scenario_DefaultLightBehavior apollo::simulation::Scenario::DefaultLightBehavior_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_DefaultLightBehavior_DefaultLightBehavior_MIN
.fi
.SS "constexpr int apollo::simulation::Scenario::kIndexInFileMessages\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    6
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::LOGSIM\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_LOGSIM
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::LOGSIM_CONTROL\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_LOGSIM_CONTROL
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::LOGSIM_PERCEPTION\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_LOGSIM_PERCEPTION
.fi
.SS "constexpr int apollo::simulation::Scenario::Mode_ARRAYSIZE\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_Mode_ARRAYSIZE
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::Mode_MAX\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_Mode_MAX
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::Mode_MIN\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_Mode_MIN
.fi
.SS "constexpr Scenario_Mode apollo::simulation::Scenario::WORLDSIM\fC [static]\fP, \fC [constexpr]\fP"
\fBInitial value:\fP
.PP
.nf
=
    Scenario_Mode_WORLDSIM
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Cyber-Cmake from the source code\&.
